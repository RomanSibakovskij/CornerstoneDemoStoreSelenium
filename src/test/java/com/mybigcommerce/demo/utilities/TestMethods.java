package com.mybigcommerce.demo.utilities;

import com.mybigcommerce.demo.*;

import org.slf4j.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.*;

import com.mybigcommerce.demo.regpageinvalidscenarios.*;
import com.mybigcommerce.demo.accountpageinvalidscenarios.*;
import com.mybigcommerce.demo.addaddresspageinvalidscenarios.*;
import com.mybigcommerce.demo.logindashpageinvalidscenarios.*;
import com.mybigcommerce.demo.shopcartinvalidscenarios.*;
import com.mybigcommerce.demo.checkoutpageguestinvalidscenarios.*;

import java.io.File;
import java.nio.file.*;
import java.util.*;

public class TestMethods extends BaseTest{

    protected static final Logger logger = LoggerFactory.getLogger(TestMethods.class);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //navigate to 'Register' page test method
    protected void navigateToRegisterPageTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //log home page product data
        logHomePageProductData(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //click header 'Register' nav link
        generalPage.clickRegisterLink();
        //capture screenshot of the test result
        captureScreenshot(driver, "Navigate To Register Page Test Result");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid user account creation test

    //valid user account creation test method
    protected void validUserAccountCreationTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //valid user register data getter
        registerPage.validUserRegisterDataGetter();
        //input valid user email into email input field
        registerPage.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPage.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPage.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPage.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPage.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPage.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPage.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPage.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPage.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after valid data input
        captureScreenshot(driver, "Register Page Display After Valid Data Input");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected account creation success message (title and message)
        assertEquals("Your account has been created", registerPage.getAccountCreationSuccessMessageTitle(), "The user account creation success message title doesn't match expectations or the user account creation process has failed.");
        assertEquals("Thank you for creating your account at Cornerstone Demo. Your account details have been emailed to " + registerPage.getEmail(), registerPage.getAccountCreationSuccessMessage(), "The user account creation success message doesn't match expectations or the user account creation process has failed.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid User Account Creation Test Result");
    }

    //invalid user account creation tests

    //no singular input

    //invalid user account creation test method - no user email
    protected void invalidUserAccountCreationNoEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user email
        registerPageNoSingularInput.invalidUserRegisterDataNoEmailGetter();
        //don't input user email into email input field
        registerPageNoSingularInput.inputNoRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageNoSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageNoSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageNoSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageNoSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageNoSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageNoSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageNoSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageNoSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user email
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User Email");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("You must enter a valid email.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing email input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User Email");
    }

    //invalid user account creation test method - no user password / confirm password
    protected void invalidUserAccountCreationNoPasswordConfirmTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user password and confirm password
        registerPageNoSingularInput.invalidUserRegisterDataNoPasswordConfirmGetter();
        //input valid user email into email input field
        registerPageNoSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //don't input user password into password input field
        registerPageNoSingularInput.inputNoRegisterPasswordIntoPasswordInputField();
        //don't input user confirm password into confirm password input field
        registerPageNoSingularInput.inputNoRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageNoSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageNoSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageNoSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageNoSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageNoSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageNoSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user password / confirm password
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User Password and Confirm Password");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("You must enter a password.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing password and confirm password input errors don't match expectations or the error weren't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User Password and Confirm Password");
    }

    //invalid user account creation test method - no user country
    protected void invalidUserAccountCreationNoCountryTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //valid user register data getter
        registerPage.validUserRegisterDataGetter();
        //input valid user email into email input field
        registerPage.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPage.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPage.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //click "Country" dropdown menu
        registerPage.clickCountryDropdownMenu();
        //select "Select country" option
        registerPage.selectCountryOption();
        //input valid user first name into first name input field
        registerPage.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPage.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPage.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPage.inputValidRegisterCityIntoCityInputField();
        //input valid user post code into post code input field
        registerPage.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPage.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user country
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User Country");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("Country field cannot be blank.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing country input errors don't match expectations or the error weren't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User Country");
    }

    //invalid user account creation test method - no user first name
    protected void invalidUserAccountCreationNoFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user first name
        registerPageNoSingularInput.invalidUserRegisterDataNoFirstNameGetter();
        //input valid user email into email input field
        registerPageNoSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageNoSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid matching user confirm password into confirm password input field
        registerPageNoSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //don't input user first name into first name input field
        registerPageNoSingularInput.inputNoRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageNoSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageNoSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageNoSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageNoSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageNoSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user first name
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User First Name");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("First Name field cannot be blank.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing first name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User First Name");
    }

    //invalid user account creation test method - no user last name
    protected void invalidUserAccountCreationNoLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user last name
        registerPageNoSingularInput.invalidUserRegisterDataNoLastNameGetter();
        //input valid user email into email input field
        registerPageNoSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageNoSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid matching user confirm password into confirm password input field
        registerPageNoSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageNoSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //don't input user last name into last name input field
        registerPageNoSingularInput.inputNoRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageNoSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageNoSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageNoSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageNoSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user last name
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User Last Name");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("Last Name field cannot be blank.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing last name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User Last Name");
    }

    //invalid user account creation test method - no user address
    protected void invalidUserAccountCreationNoAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user address
        registerPageNoSingularInput.invalidUserRegisterDataNoAddressGetter();
        //input valid user email into email input field
        registerPageNoSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageNoSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid matching user confirm password into confirm password input field
        registerPageNoSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageNoSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageNoSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //don't input user address 1 into address 1 input field
        registerPageNoSingularInput.inputNoRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageNoSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageNoSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageNoSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user address
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User Address");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("Address Line 1 field cannot be blank.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing address input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User Address");
    }

    //invalid user account creation test method - no user city
    protected void invalidUserAccountCreationNoCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user city
        registerPageNoSingularInput.invalidUserRegisterDataNoCityGetter();
        //input valid user email into email input field
        registerPageNoSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageNoSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid matching user confirm password into confirm password input field
        registerPageNoSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageNoSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageNoSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageNoSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //don't input user city into city input field
        registerPageNoSingularInput.inputNoRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageNoSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageNoSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user city
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User City");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("Suburb/City field cannot be blank.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing city input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User City");
    }

    //invalid user account creation test method - no user post code
    protected void invalidUserAccountCreationNoPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user post code
        registerPageNoSingularInput.invalidUserRegisterDataNoPostCodeGetter();
        //input valid user email into email input field
        registerPageNoSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageNoSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid matching user confirm password into confirm password input field
        registerPageNoSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageNoSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageNoSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageNoSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageNoSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //don't input user post code into post code input field
        registerPageNoSingularInput.inputNoRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageNoSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user post code
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User Post Code");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("Zip/Postcode field cannot be blank.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing post code input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User Post Code");
    }

    //invalid user account creation test method - no user phone
    protected void invalidUserAccountCreationNoPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageNoSingularInput registerPageNoSingularInput = new RegisterPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - no user phone
        registerPageNoSingularInput.invalidUserRegisterDataNoPhoneGetter();
        //input valid user email into email input field
        registerPageNoSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageNoSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid matching user confirm password into confirm password input field
        registerPageNoSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageNoSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageNoSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageNoSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageNoSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageNoSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //don't input user phone into phone input field
        registerPageNoSingularInput.inputNoRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - no user phone
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - No User Phone");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message
        assertEquals("Phone Number field cannot be blank.", registerPage.getRegisterPageSingularInputError(), "The user account creation missing phone input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - No User Phone");
    }

    //too short singular input

    //invalid user account creation test method - too short user email (1 char -> name, domain)
    protected void invalidUserAccountCreationTooShortEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user email (1 char -> name, domain)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortEmailGetter();
        //input too short user email into email input field (1 char -> name, domain)
        registerPageTooShortSingularInput.inputTooShortRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooShortSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooShortSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooShortSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooShortSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooShortSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooShortSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooShortSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooShortSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user email (1 char -> name, domain)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User Email");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("You must enter a valid email.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short email input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user email input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User Email");
    }

    //invalid user account creation test method - too short user password / confirm password (6 chars)
    protected void invalidUserAccountCreationTooShortPasswordConfirmTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user password (6 chars)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortPasswordConfirmGetter();
        //input valid user email into email input field
        registerPageTooShortSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input too short user password into password input field (6 chars)
        registerPageTooShortSingularInput.inputTooShortRegisterPasswordIntoPasswordInputField();
        //input matching too short confirm password into confirm password input field
        registerPageTooShortSingularInput.inputTooShortRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooShortSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooShortSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooShortSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooShortSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooShortSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooShortSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user password / confirm password (6 chars)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User Password and Confirm Password");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Passwords must be at least 7 characters and contain both alphabetic and numeric characters.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short password / confirm password input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user password / confirm password input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User Password and Confirm Password");
    }

    //invalid user account creation test method - too short user first name (1 char)
    protected void invalidUserAccountCreationTooShortFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user first name (1 char)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortFirstNameGetter();
        //input valid user email into email input field
        registerPageTooShortSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooShortSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input matching valid confirm password into confirm password input field
        registerPageTooShortSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input too short user first name into first name input field (1 char)
        registerPageTooShortSingularInput.inputTooShortRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooShortSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooShortSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooShortSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooShortSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooShortSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user first name (1 char)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User First Name");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("First name is too short.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short first name input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user first name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User First Name");
    }

    //invalid user account creation test method - too short user last name (1 char)
    protected void invalidUserAccountCreationTooShortLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user last name (1 char)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortLastNameGetter();
        //input valid user email into email input field
        registerPageTooShortSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooShortSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input matching valid confirm password into confirm password input field
        registerPageTooShortSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooShortSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input too short user last name into last name input field (1 char)
        registerPageTooShortSingularInput.inputTooShortRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooShortSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooShortSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooShortSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooShortSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user last name (1 char)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User Last Name");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Last name is too short.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short last name input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user last name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User Last Name");
    }

    //invalid user account creation test method - too short user address (3 chars)
    protected void invalidUserAccountCreationTooShortAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user address (3 chars)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortAddressGetter();
        //input valid user email into email input field
        registerPageTooShortSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooShortSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input matching valid confirm password into confirm password input field
        registerPageTooShortSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooShortSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooShortSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input too short user address 1 into address 1 input field (3 chars)
        registerPageTooShortSingularInput.inputTooShortRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooShortSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooShortSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooShortSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user address (3 chars)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User Address");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Address Line 1 is too short.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short address input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user address input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User Address");
    }

    //invalid user account creation test method - too short user city (1 char)
    protected void invalidUserAccountCreationTooShortCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user city (1 char)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortCityGetter();
        //input valid user email into email input field
        registerPageTooShortSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooShortSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input matching valid confirm password into confirm password input field
        registerPageTooShortSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooShortSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooShortSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooShortSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input too short user city into city input field (1 char)
        registerPageTooShortSingularInput.inputTooShortRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooShortSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooShortSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user city (1 char)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User City");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("City is too short.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short city input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user city input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User City");
    }

    //invalid user account creation test method - too short user post code (4 digits)
    protected void invalidUserAccountCreationTooShortPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user post code (4 digits)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortPostCodeGetter();
        //input valid user email into email input field
        registerPageTooShortSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooShortSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input matching valid confirm password into confirm password input field
        registerPageTooShortSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooShortSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooShortSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooShortSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooShortSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input too short user post code into post code input field (4 digits)
        registerPageTooShortSingularInput.inputTooShortRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooShortSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user post code (4 digits)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User Post Code");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Post code is too short.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short post code input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user post code input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User Post Code");
    }

    //invalid user account creation test method - too short user phone (2 digits)
    protected void invalidUserAccountCreationTooShortPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooShortSingularInput registerPageTooShortSingularInput = new RegisterPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too short user phone (2 digits)
        registerPageTooShortSingularInput.invalidUserRegisterDataTooShortPhoneGetter();
        //input valid user email into email input field
        registerPageTooShortSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooShortSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input matching valid confirm password into confirm password input field
        registerPageTooShortSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooShortSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooShortSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooShortSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooShortSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooShortSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input too short user phone into phone input field
        registerPageTooShortSingularInput.inputTooShortRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too short user phone (2 digits)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Short User Phone");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Phone is too short.", registerPage.getRegisterPageSingularInputError(), "The user account creation too short phone input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too short user phone input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Short User Phone");
    }

    //too long singular input

    //invalid user account creation test method - too long user email (100 chars -> name, domain)
    protected void invalidUserAccountCreationTooLongEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user email (100 chars -> name, domain)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongEmailGetter();
        //input too long user email into email input field (100 chars -> name, domain)
        registerPageTooLongSingularInput.inputTooLongRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooLongSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooLongSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooLongSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooLongSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooLongSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooLongSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooLongSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooLongSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user email (100 chars -> name, domain)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User Email");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Please type in a valid email address, such as joe@example.com", registerPage.getRegisterPageSingularInputErrorBoxText(), "The user account creation too long email input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user email input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User Email");
    }

    //invalid user account creation test method - too long user password / confirm password (100 chars -> name, domain)
    protected void invalidUserAccountCreationTooLongPasswordConfirmTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user password / confirm password (75 chars)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongPasswordConfirmGetter();
        //input valid user email into email input field
        registerPageTooLongSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input too long user password into password input field (75 chars)
        registerPageTooLongSingularInput.inputTooLongRegisterPasswordIntoPasswordInputField();
        //input too long user confirm password into confirm password input field (75 chars)
        registerPageTooLongSingularInput.inputTooLongRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooLongSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooLongSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooLongSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooLongSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooLongSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooLongSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user password / confirm password (75 chars)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User Password and Confirm Password");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Password is too long", registerPage.getRegisterPageSingularInputError(), "The user account creation too long password / confirm password input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user password / confirm password input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User Password and Confirm Password");
    }

    //invalid user account creation test method - too long user first name (100 chars)
    protected void invalidUserAccountCreationTooLongFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user first name (100 chars)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongFirstNameGetter();
        //input valid user email into email input field
        registerPageTooLongSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooLongSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooLongSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input too long user first name into first name input field (100 chars)
        registerPageTooLongSingularInput.inputTooLongRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooLongSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooLongSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooLongSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooLongSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooLongSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user first name (100 chars)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User First Name");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("First name is too long", registerPage.getRegisterPageSingularInputError(), "The user account creation too long first name input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user first name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User First Name");
    }

    //invalid user account creation test method - too long user last name (100 chars)
    protected void invalidUserAccountCreationTooLongLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user last name (100 chars)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongLastNameGetter();
        //input valid user email into email input field
        registerPageTooLongSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooLongSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooLongSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooLongSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input too long user last name into last name input field (100 chars)
        registerPageTooLongSingularInput.inputTooLongRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooLongSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooLongSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooLongSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooLongSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user last name (100 chars)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User Last Name");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Last name is too long", registerPage.getRegisterPageSingularInputError(), "The user account creation too long last name input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user last name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User Last Name");
    }

    //invalid user account creation test method - too long user address (100 chars)
    protected void invalidUserAccountCreationTooLongAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user address (100 chars)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongAddressGetter();
        //input valid user email into email input field
        registerPageTooLongSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooLongSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooLongSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooLongSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooLongSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input too long user address 1 into address 1 input field (100 chars)
        registerPageTooLongSingularInput.inputTooLongRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooLongSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooLongSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooLongSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user address (100 chars)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User Address");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Address Line 1 is too long", registerPage.getRegisterPageSingularInputError(), "The user account creation too long address input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user address input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User Address");
    }

    //invalid user account creation test method - too long user city (100 chars)
    protected void invalidUserAccountCreationTooLongCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user city (100 chars)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongCityGetter();
        //input valid user email into email input field
        registerPageTooLongSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooLongSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooLongSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooLongSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooLongSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooLongSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input too long user city into city input field (100 chars)
        registerPageTooLongSingularInput.inputTooLongRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooLongSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooLongSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user city (100 chars)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User City");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("City is too long", registerPage.getRegisterPageSingularInputError(), "The user account creation too long city input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user city input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User City");
    }

    //invalid user account creation test method - too long user post code (6 digits)
    protected void invalidUserAccountCreationTooLongPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user post code (6 digits)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongPostCodeGetter();
        //input valid user email into email input field
        registerPageTooLongSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooLongSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooLongSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooLongSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooLongSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooLongSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooLongSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input too long user post code into post code input field (6 digits)
        registerPageTooLongSingularInput.inputTooLongRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageTooLongSingularInput.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user post code (6 digits)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User Post Code");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Post code is too long", registerPage.getRegisterPageSingularInputError(), "The user account creation too long post code input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user post code input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User Post Code");
    }

    //invalid user account creation test method - too long user phone (30 digits)
    protected void invalidUserAccountCreationTooLongPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageTooLongSingularInput registerPageTooLongSingularInput = new RegisterPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - too long user phone (30 digits)
        registerPageTooLongSingularInput.invalidUserRegisterDataTooLongPhoneGetter();
        //input valid user email into email input field
        registerPageTooLongSingularInput.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageTooLongSingularInput.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageTooLongSingularInput.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageTooLongSingularInput.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageTooLongSingularInput.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageTooLongSingularInput.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageTooLongSingularInput.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageTooLongSingularInput.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input too long user phone into phone input field (30 digits)
        registerPageTooLongSingularInput.inputTooLongRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - too long user phone (30 digits)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Too Long User Phone");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Phone is too long", registerPage.getRegisterPageSingularInputError(), "The user account creation too long phone input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The too long user phone input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Too Long User Phone");
    }

    //invalid singular input format

    //invalid user account creation test method - invalid user email format (missing '@')
    protected void invalidUserAccountCreationInvalidEmailFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user email format (missing '@')
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidEmailFormatGetter();
        //input invalid user email format into email input field (missing '@')
        registerPageInvalidSingularInputFormat.inputInvalidRegisterEmailFormatIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user email format (missing '@')
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User Email Format");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("You must enter a valid email.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid email input format error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid email input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User Email Format");
    }

    //invalid user account creation test method - existing user email (used beforehand in manual testing)
    protected void invalidUserAccountCreationExistingEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - existing user email (used beforehand in manual testing)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataExistingEmailGetter();
        //input pre-existing user email into email input field (used beforehand in manual testing)
        registerPageInvalidSingularInputFormat.inputExistingRegEmailFormatIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - existing user email (used beforehand in manual testing)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Existing User Email");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("The email address m1@fakemail.com is already in use. Please enter a different one.", registerPage.getRegisterPageSingularInputErrorBoxText(), "The user account creation existing email input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The existing email input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Existing User Email");
    }

    //invalid user account creation test method - invalid user password / confirm password format (strings only)
    protected void invalidUserAccountCreationInvalidPasswordConfirmTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user password / confirm password format (strings only)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidPasswordConfirmFormatGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input invalid user password format into password input field
        registerPageInvalidSingularInputFormat.inputInvalidRegisterPasswordFormatIntoPasswordInputField();
        //input invalid user confirm password format into confirm password input field
        registerPageInvalidSingularInputFormat.inputInvalidRegisterConfirmPasswordFormatIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user password / confirm password format (strings only)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User Password and Confirm Password");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Passwords must be at least 7 characters and contain both alphabetic and numeric characters.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid user password and confirm password input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid user password and confirm password input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User Password and Confirm Password");
    }

    //invalid user account creation test method - mismatching user confirm password
    protected void invalidUserAccountCreationMismatchingConfirmPasswordTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - mismatching user confirm password
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataMismatchConfirmPasswordGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password format into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input mismatching user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputMismatchRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - mismatching user confirm password
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Mismatching Confirm Password");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Your passwords do not match.", registerPage.getRegisterPageSingularInputError(), "The user account creation  mismatching user confirm password input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The mismatching user confirm password input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Mismatching Confirm Password");
    }

    //invalid user account creation test method - invalid user first name input format (special symbols only)
    protected void invalidUserAccountCreationInvalidFirstNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user first name input format (special symbols only)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidFirstNameFormatGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input invalid user first name format into first name input field (special symbols only)
        registerPageInvalidSingularInputFormat.inputInvalidRegisterFirstNameFormatIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user first name format (special symbols only)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User First Name Format");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("First name cannot consist of special symbols only.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid user first name input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid user first name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User First Name Format");
    }

    //invalid user account creation test method - invalid user last name input format (special symbols only)
    protected void invalidUserAccountCreationInvalidLastNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user last name input format (special symbols only)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidLastNameFormatGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input invalid user last name format into last name input field (special symbols only)
        registerPageInvalidSingularInputFormat.inputInvalidRegisterLastNameFormatIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user last name format (special symbols only)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User Last Name Format");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Last name cannot consist of special symbols only.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid user last name input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid user last name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User Last Name Format");
    }

    //invalid user account creation test method - invalid user address input format (special symbols only)
    protected void invalidUserAccountCreationInvalidAddressFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user address input format (special symbols only)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidAddressFormatGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input invalid user address 1 format into address 1 input field (special symbols only)
        registerPageInvalidSingularInputFormat.inputInvalidRegisterAddressFormatIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user address format (special symbols only)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User Address Format");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Address Line 1 cannot consist of special symbols only.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid user address input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid user address input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User Address Format");
    }

    //invalid user account creation test method - invalid user city input format (special symbols only)
    protected void invalidUserAccountCreationInvalidCityFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user city input format (special symbols only)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidCityFormatGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input invalid user city format into city input field (special symbols only)
        registerPageInvalidSingularInputFormat.inputInvalidRegisterCityFormatIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user city format (special symbols only)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User City Format");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("City cannot consist of special symbols only.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid user city input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid user city input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User City Format");
    }

    //invalid user account creation test method - invalid user post code input format (special symbols only)
    protected void invalidUserAccountCreationInvalidPostCodeFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user post code input format (special symbols only)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidPostCodeFormatGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input invalid user post code format into post code input field (special symbols only)
        registerPageInvalidSingularInputFormat.inputInvalidRegisterPostCodeFormatIntoPostCodeInputField();
        //input valid user phone into phone input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPhoneIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user post code format (special symbols only)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User Post Code Format");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Post code cannot consist of special symbols only.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid user post code input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid user post code input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User Post Code Format");
    }

    //invalid user account creation test method - invalid user phone input format (special symbols only)
    protected void invalidUserAccountCreationInvalidPhoneFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        RegisterPageInvalidSingularInputFormat registerPageInvalidSingularInputFormat = new RegisterPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //register page web element assert
        isRegisterPageWebElementDisplayed(registerPage);
        //register page text element assert
        isRegisterPageTextElementAsExpected(registerPage);
        //capture screenshot of the register page before data input
        captureScreenshot(driver, "Register Page Display Before Data Input");
        //invalid user register data getter - invalid user phone input format (special symbols only)
        registerPageInvalidSingularInputFormat.invalidUserRegisterDataInvalidPhoneFormatGetter();
        //input valid user email into email input field
        registerPageInvalidSingularInputFormat.inputValidRegisterEmailIntoEmailInputField();
        //input valid user password into password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPasswordIntoPasswordInputField();
        //input valid user confirm password into confirm password input field
        registerPageInvalidSingularInputFormat.inputValidRegisterConfirmPasswordIntoConfirmPasswordInputField();
        //input valid user first name into first name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterFirstNameIntoFirstNameInputField();
        //input valid user last name into last name input field
        registerPageInvalidSingularInputFormat.inputValidRegisterLastNameIntoLastNameInputField();
        //input valid user address 1 into address 1 input field
        registerPageInvalidSingularInputFormat.inputValidRegisterAddressIntoAddressInputField();
        //input valid user city into city input field
        registerPageInvalidSingularInputFormat.inputValidRegisterCityIntoCityInputField();
        //click 'State' dropdown menu
        registerPage.clickStateDropdownMenu();
        //select 'Illinois' option
        registerPage.selectIllinoisOption();
        //input valid user post code into post code input field
        registerPageInvalidSingularInputFormat.inputValidRegisterPostCodeIntoPostCodeInputField();
        //input invalid user phone format into phone input field (special symbols only)
        registerPageInvalidSingularInputFormat.inputInvalidRegisterPhoneFormatIntoPhoneNumberInputField();
        //capture screenshot of the register page after invalid data input - invalid user phone format (special symbols only)
        captureScreenshot(driver, "Register Page Display After Invalid Data Input - Invalid User Phone Format");
        //click 'Create account' button
        registerPage.clickCreateAccountButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Phone cannot consist of special symbols only.", registerPage.getRegisterPageSingularInputError(), "The user account creation invalid user phone input error doesn't match expectations");
        } catch (Exception e) {
            logger.error("The invalid user phone input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Account Creation Test Result - Invalid User Phone Format");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid edit account tests

    //valid edit account with login email test method
    protected void validEditUserAccountDataWithLoginEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //valid edited user account data getter (no password edit here)
        accountSettingsPage.validEditedUserAccountDataForLoginEmailGetter();
        //input valid edited first name into first name input field
        accountSettingsPage.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPage.inputEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPage.inputEditedUserEmailIntoEmailInputField();
        //input valid edited phone into phone input field
        accountSettingsPage.inputEditedUserPhoneIntoPhoneInputField();
        //input valid password into current password input field
        accountSettingsPage.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after valid edited data input
        captureScreenshot(driver, "Account Settings Page Display After Valid Edited Data Input (With Login Email)");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected account update success message
        assertEquals("Your account details have been updated.", accountSettingsPage.getAccountSettingsUpdateSuccessMessage(), "The account settings update success message doesn't match expectations or the update process has failed.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid Edit User Account Data (With Login Email) Test Result");
    }

    //valid edit account with login password test method
    protected void validEditUserAccountDataWithLoginPasswordTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //valid edited user account data getter (no email edit here)
        accountSettingsPage.validEditedUserAccountDataForLoginPasswordGetter();
        //input valid edited first name into first name input field
        accountSettingsPage.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPage.inputEditedUserLastNameIntoLastNameInputField();
        //input valid edited phone into phone input field
        accountSettingsPage.inputEditedUserPhoneIntoPhoneInputField();
        //input valid password into current password input field
        accountSettingsPage.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //input valid password into password input field
        accountSettingsPage.inputEditedUserPasswordIntoPasswordInputField();
        //input matching confirm password into confirm password input field
        accountSettingsPage.inputEditedUserConfirmPasswordIntoConfirmPasswordInputField();
        //capture screenshot of the account settings page after valid edited data input
        captureScreenshot(driver, "Account Settings Page Display After Valid Edited Data Input (With Login Password)");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //capture screenshot of the test result (the user drops onto login-register dashboard page)
        captureScreenshot(driver, "Valid Edit User Account Data (With Login Password) Test Result");
    }

    //invalid account settings page (edit account) tests

    //no singular input

    //invalid account settings page (edit account) test method - no first name
    protected void invalidEditedUserAccountNoFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageNoSingularInput accountSettingsPageNoSingularInput = new AccountSettingsPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - no edited user first name
        accountSettingsPageNoSingularInput.invalidEditedUserAccountDataNoFirstNameGetter();
        //don't input edited first name into first name input field
        accountSettingsPageNoSingularInput.inputNoEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageNoSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageNoSingularInput.inputEditedUserEmailIntoEmailInputField();
        //capture screenshot of the account settings page after invalid edited data input - no edited first name
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - No Edited First Name");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message
        assertEquals("You must enter a first name.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings missing first name input error message doesn't match expectations or the error message wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - No Edited First Name");
    }

    //invalid account settings page (edit account) test method - no edited last name
    protected void invalidEditedUserAccountNoLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageNoSingularInput accountSettingsPageNoSingularInput = new AccountSettingsPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - no edited user last name
        accountSettingsPageNoSingularInput.invalidEditedUserAccountDataNoLastNameGetter();
        //input valid edited first name into first name input field
        accountSettingsPageNoSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //don't input edited last name into last name input field
        accountSettingsPageNoSingularInput.inputNoEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageNoSingularInput.inputEditedUserEmailIntoEmailInputField();
        //capture screenshot of the account settings page after invalid edited data input - no edited last name
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - No Edited Last Name");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message
        assertEquals("You must enter a last name.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings missing last name input error message doesn't match expectations or the error message wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - No Edited Last Name");
    }

    //invalid account settings page (edit account) test method - no edited email
    protected void invalidEditedUserAccountNoEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageNoSingularInput accountSettingsPageNoSingularInput = new AccountSettingsPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - no edited user email
        accountSettingsPageNoSingularInput.invalidEditedUserAccountDataNoEmailGetter();
        //input valid edited first name into first name input field
        accountSettingsPageNoSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageNoSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //don't input edited email into email input field
        accountSettingsPageNoSingularInput.inputNoEditedUserEmailIntoEmailInputField();
        //capture screenshot of the account settings page after invalid edited data input - no edited email
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - No Edited Email");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message
        assertEquals("You must enter a valid email.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings missing email input error message doesn't match expectations or the error message wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - No Edited Email");
    }

    //invalid account settings page (edit account) test method - no edited password / confirm password
    protected void invalidEditedUserAccountNoPasswordConfirmTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageNoSingularInput accountSettingsPageNoSingularInput = new AccountSettingsPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - no edited user password / confirm password
        accountSettingsPageNoSingularInput.invalidEditedUserAccountDataNoPasswordConfirmGetter();
        //input valid edited first name into first name input field
        accountSettingsPageNoSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageNoSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input valid password into current password input field
        accountSettingsPageNoSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //don't input password into password input field
        accountSettingsPageNoSingularInput.inputNoEditedUserPasswordIntoPasswordInputField();
        //don't input confirm password into confirm password input field
        accountSettingsPageNoSingularInput.inputNoEditedUserConfirmPasswordIntoConfirmPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - no edited password / confirm password
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - No Edited Password and Confirm Password");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("You must enter a valid password", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings missing password / confirm password input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings missing password / confirm password input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - No Edited Password and Confirm Password");
    }

    //invalid account settings page (edit account) test method - no current password
    protected void invalidEditedUserAccountNoCurrentPasswordTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageNoSingularInput accountSettingsPageNoSingularInput = new AccountSettingsPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - no current user password
        accountSettingsPageNoSingularInput.invalidEditedUserAccountDataNoCurrentPasswordGetter();
        //input valid edited first name into first name input field
        accountSettingsPageNoSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageNoSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //don't input password into current password input field
        accountSettingsPageNoSingularInput.inputNoCurrentUserPasswordIntoCurrentPasswordInputField();
        //input valid edited password into password input field
        accountSettingsPageNoSingularInput.inputEditedUserPasswordIntoPasswordInputField();
        //input valid matching confirm password into confirm password input field
        accountSettingsPageNoSingularInput.inputEditedUserConfirmPasswordIntoConfirmPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - no current password
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - No Current Password");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("You must enter your current password.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings missing current password input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings missing current password input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - No Current Password");
    }

    //too short singular input

    //invalid account settings page (edit account) test method - too short edited first name (1 char)
    protected void invalidEditedUserAccountTooShortFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooShortSingularInput accountSettingsPageTooShortSingularInput = new AccountSettingsPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too short edited first name (1 char)
        accountSettingsPageTooShortSingularInput.invalidEditedUserAccountDataTooShortFirstNameGetter();
        //input too short edited first name into first name input field (1 char)
        accountSettingsPageTooShortSingularInput.inputTooShortEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageTooShortSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageTooShortSingularInput.inputEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageTooShortSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input  - too short edited first name
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Short Edited First Name");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("First name is too short.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings too short edited first name input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too short edited first name input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Short Edited First Name");
    }

    //invalid account settings page (edit account) test method - too short edited last name (1 char)
    protected void invalidEditedUserAccountTooShortLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooShortSingularInput accountSettingsPageTooShortSingularInput = new AccountSettingsPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too short edited last name (1 char)
        accountSettingsPageTooShortSingularInput.invalidEditedUserAccountDataTooShortLastNameGetter();
        //input valid edited first name into first name input field
        accountSettingsPageTooShortSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input too short edited last name into last name input field (1 char)
        accountSettingsPageTooShortSingularInput.inputTooShortEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageTooShortSingularInput.inputEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageTooShortSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - too short edited last name
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Short Edited Last Name");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Last name is too short.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings too short edited last name input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too short edited last name input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Short Edited Last Name");
    }

    //invalid account settings page (edit account) test method - too short edited email (1 char -> name, domain)
    protected void invalidEditedUserAccountTooShortEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooShortSingularInput accountSettingsPageTooShortSingularInput = new AccountSettingsPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too short edited email (1 char -> name, domain)
        accountSettingsPageTooShortSingularInput.invalidEditedUserAccountDataTooShortEmailGetter();
        //input valid edited first name into first name input field
        accountSettingsPageTooShortSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageTooShortSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input too short edited email into email input field (1 char -> name, domain)
        accountSettingsPageTooShortSingularInput.inputTooShortEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageTooShortSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - too short edited email
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Short Edited Email");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Email is too short.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings too short edited email input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too short edited email input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Short Edited Email");
    }

    //invalid account settings page (edit account) test method - too short edited password / confirm password (6 chars)
    protected void invalidEditedUserAccountTooShortPasswordConfirmTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooShortSingularInput accountSettingsPageTooShortSingularInput = new AccountSettingsPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too short edited password / confirm password (6 chars)
        accountSettingsPageTooShortSingularInput.invalidEditedUserAccountDataTooShortPasswordConfirmGetter();
        //input valid edited first name into first name input field
        accountSettingsPageTooShortSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageTooShortSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input valid password into current password input field
        accountSettingsPageTooShortSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //input too short password into password input field (6 chars)
        accountSettingsPageTooShortSingularInput.inputTooShortEditedUserPasswordIntoPasswordInputField();
        //input too short matching confirm password into confirm password input field (6 chars)
        accountSettingsPageTooShortSingularInput.inputTooShortEditedUserConfirmPasswordIntoConfirmPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - too short edited password/ confirm password
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Short Edited Password and Confirm Password");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Passwords must be at least 7 characters and contain both alphabetic and numeric characters.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings too short edited password / confirm password input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too short edited password / confirm password input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Short Edited Password and Confirm Password");
    }

    //too long singular input

    //invalid account settings page (edit account) test method - too long edited first name (100 chars)
    protected void invalidEditedUserAccountTooLongFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooLongSingularInput accountSettingsPageTooLongSingularInput = new AccountSettingsPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too long edited first name (100 chars)
        accountSettingsPageTooLongSingularInput.invalidEditedUserAccountDataTooLongFirstNameGetter();
        //input too long edited first name into first name input field (100 chars)
        accountSettingsPageTooLongSingularInput.inputTooLongEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageTooLongSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageTooLongSingularInput.inputEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageTooLongSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input  - too long edited first name
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Long Edited First Name");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Last name is too short.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings too long edited first name input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too long edited first name input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Long Edited First Name");
    }

    //invalid account settings page (edit account) test method - too long edited last name (100 chars)
    protected void invalidEditedUserAccountTooLongLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooLongSingularInput accountSettingsPageTooLongSingularInput = new AccountSettingsPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too short edited last name (100 chars)
        accountSettingsPageTooLongSingularInput.invalidEditedUserAccountDataTooLongLastNameGetter();
        //input valid edited first name into first name input field
        accountSettingsPageTooLongSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input too short edited last name into last name input field (100 chars)
        accountSettingsPageTooLongSingularInput.inputTooLongEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageTooLongSingularInput.inputEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageTooLongSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - too long edited last name
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Long Edited Last Name");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Last name is too long.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings too long edited last name input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too long edited last name input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Long Edited Last Name");
    }

    //invalid account settings page (edit account) test method - too long edited email (100 chars -> name, domain)
    protected void invalidEditedUserAccountTooLongEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooLongSingularInput accountSettingsPageTooLongSingularInput = new AccountSettingsPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too long edited email (100 chars -> name, domain)
        accountSettingsPageTooLongSingularInput.invalidEditedUserAccountDataTooLongEmailGetter();
        //input valid edited first name into first name input field
        accountSettingsPageTooLongSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageTooLongSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input too long edited email into email input field (100 chars -> name, domain)
        accountSettingsPageTooLongSingularInput.inputTooLongEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageTooLongSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - too long edited email
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Long Edited Email");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Something went wrong trying to update your details. Please try again.", accountSettingsPage.getAccountSettingsPageSingularInputErrorBoxText(), "The account settings too long edited email input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too long edited email input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Long Edited Email");
    }

    //invalid account settings page (edit account) test method - too long edited password / confirm password (75 chars)
    protected void invalidEditedUserAccountTooLongPasswordConfirmTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingsPageTooLongSingularInput accountSettingsPageTooLongSingularInput = new AccountSettingsPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - too short edited password / confirm password (75 chars)
        accountSettingsPageTooLongSingularInput.invalidEditedUserAccountDataTooLongPasswordConfirmGetter();
        //input valid edited first name into first name input field
        accountSettingsPageTooLongSingularInput.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageTooLongSingularInput.inputEditedUserLastNameIntoLastNameInputField();
        //input valid password into current password input field
        accountSettingsPageTooLongSingularInput.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //input too short password into password input field (6 chars)
        accountSettingsPageTooLongSingularInput.inputTooLongEditedUserPasswordIntoPasswordInputField();
        //input too short matching confirm password into confirm password input field (6 chars)
        accountSettingsPageTooLongSingularInput.inputTooLongEditedUserConfirmPasswordIntoConfirmPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - too long edited password / confirm password
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Too Short Edited Password and Confirm Password");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Passwords is too long.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings too long edited password / confirm password input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings too long edited password / confirm password input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Too Long Edited Password and Confirm Password");
    }

    //invalid singular input format

    //invalid account settings page (edit account) test method - invalid edited first name format (special symbols only)
    protected void invalidEditedUserAccountInvalidFirstNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingPageInvalidSingularInputFormat accountSettingsPageInvalidSingularInputFormat = new AccountSettingPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - invalid edited first name format (special symbols only)
        accountSettingsPageInvalidSingularInputFormat.invalidEditedUserAccountDataInvalidFirstNameFormatGetter();
        //input invalid edited first name format into first name input field (special symbols only)
        accountSettingsPageInvalidSingularInputFormat.inputInvalidEditedUserFirstNameFormatIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserLastNameIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageInvalidSingularInputFormat.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input  - invalid edited first name format
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Invalid Edited First Name Format");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("First name cannot consist of special symbols only.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings invalid edited first name input format error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings invalid edited first name input format error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Invalid Edited First Name Format");
    }

    //invalid account settings page (edit account) test method - invalid edited last name format (special symbols only)
    protected void invalidEditedUserAccountInvalidLastNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingPageInvalidSingularInputFormat accountSettingsPageInvalidSingularInputFormat = new AccountSettingPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - invalid edited last name format (special symbols only)
        accountSettingsPageInvalidSingularInputFormat.invalidEditedUserAccountDataInvalidLastNameFormatGetter();
        //input valid edited first name into first name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserFirstNameIntoFirstNameInputField();
        //input invalid edited last name format into last name input field (special symbols only)
        accountSettingsPageInvalidSingularInputFormat.inputInvalidEditedUserLastNameFormatIntoLastNameInputField();
        //input valid edited email into email input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageInvalidSingularInputFormat.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input  - invalid edited last name format
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Invalid Edited Last Name Format");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Last name cannot consist of special symbols only.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings invalid edited last name input format error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings invalid edited last name input format error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Invalid Edited Last Name Format");
    }

    //invalid account settings page (edit account) test method - invalid edited email format (missing '@')
    protected void invalidEditedUserAccountInvalidEmailFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingPageInvalidSingularInputFormat accountSettingsPageInvalidSingularInputFormat = new AccountSettingPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - invalid edited email format (missing '@')
        accountSettingsPageInvalidSingularInputFormat.invalidEditedUserAccountDataInvalidEmailFormatGetter();
        //input valid edited first name into first name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserLastNameIntoLastNameInputField();
        //input invalid edited email format into email input field
        accountSettingsPageInvalidSingularInputFormat.inputInvalidEditedUserEmailFormatIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageInvalidSingularInputFormat.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input  - invalid edited email format
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Invalid Edited Email Format");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("You must enter a valid email.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings invalid edited email input format error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings invalid edited email input format error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Invalid Edited Email Format");
    }

    //invalid account settings page (edit account) test method - pre-existing email format (used beforehand in manual testing)
    protected void invalidEditedUserAccountExistingEmailFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingPageInvalidSingularInputFormat accountSettingsPageInvalidSingularInputFormat = new AccountSettingPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - pre-existing email format (used beforehand in manual testing)
        accountSettingsPageInvalidSingularInputFormat.invalidEditedUserAccountDataExistingEmailGetter();
        //input valid edited first name into first name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserLastNameIntoLastNameInputField();
        //input pre-existing email format into email input field  (used beforehand in manual testing)
        accountSettingsPageInvalidSingularInputFormat.inputExistingEditedUserEmailIntoEmailInputField();
        //input valid password into current password input field
        accountSettingsPageInvalidSingularInputFormat.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - pre-existing email
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Existing Email");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Entered email is invalid or already in use", accountSettingsPage.getAccountSettingsPageSingularInputErrorBoxText(), "The account settings existing edited email input error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings existing edited email input error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Existing Email");
    }

    //invalid account settings page (edit account) test method - invalid edited new password / confirm password format (strings only)
    protected void invalidEditedUserAccountInvalidPasswordConfirmFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        AccountSettingPageInvalidSingularInputFormat accountSettingsPageInvalidSingularInputFormat = new AccountSettingPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Account settings' link
        accountDashboardPage.clickAccountSettingsLink();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the account settings page before edited data input
        captureScreenshot(driver, "Account Settings Page Display Before Edited Data Input");
        //invalid edited user account data getter - invalid edited new password / confirm password format (strings only)
        accountSettingsPageInvalidSingularInputFormat.invalidEditedUserAccountDataInvalidPasswordConfirmFormatGetter();
        //input valid edited first name into first name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserFirstNameIntoFirstNameInputField();
        //input valid edited last name into last name input field
        accountSettingsPageInvalidSingularInputFormat.inputEditedUserLastNameIntoLastNameInputField();
        //input valid password into current password input field
        accountSettingsPageInvalidSingularInputFormat.inputCurrentUserPasswordIntoCurrentPasswordInputField();
        //input invalid new password format into password input field (strings only)
        accountSettingsPageInvalidSingularInputFormat.inputInvalidEditedUserPasswordFormatIntoPasswordInputField();
        //input invalid matching confirm password format into confirm password input field (strings only)
        accountSettingsPageInvalidSingularInputFormat.inputInvalidEditedUserConfirmPasswordFormatIntoConfirmPasswordInputField();
        //capture screenshot of the account settings page after invalid edited data input - invalid edited new password / confirm password format
        captureScreenshot(driver, "Account Settings Page Display After Invalid Edited Data Input - Invalid Edited New Password and Confirm Password Format");
        //click 'Update details' button
        accountSettingsPage.clickUpdateDetailsButton();
        //assert the user receives the expected error message, log the issue otherwise
        try {
            assertEquals("Passwords must be at least 7 characters and contain both alphabetic and numeric characters.", accountSettingsPage.getAccountSettingsPageSingularInputError(), "The account settings invalid edited password / confirm password input format error message doesn't match expectations or the error message wasn't triggered.");
        } catch (Exception e) {
            logger.error("The account settings invalid edited password / confirm password input format error message wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Edit User Account Data Test Result - Invalid Edited New Password and Confirm Password Format");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid second user address addition test

    //valid user second address addition test method (since the user already has an address already after account creation)
    protected void validSecondUserAddressAdditionTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //valid user address getter
        addAddressPage.validUserAddressDataGetter();
        //input valid address first name into first name input field
        addAddressPage.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPage.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPage.inputValidUserAddressIntoAddress1InputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //input valid address city into city input field
        addAddressPage.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPage.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPage.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the add address page display after valid data input
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //log address dashboard page data(to verify the address has been added)
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid User Second Address Addition Test Result");
    }

    //invalid second user address addition tests

    //no singular input

    //invalid user second address addition test method - no user country
    protected void invalidSecondUserAddressAdditionNoCountryTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //valid user address getter
        addAddressPage.validUserAddressDataGetter();
        //click "Country" dropdown menu
        addAddressPage.clickCountryDropdownMenu();
        //select "Choose a country" option
        addAddressPage.selectCountryOption();
        //input valid address first name into first name input field
        addAddressPage.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPage.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPage.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPage.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPage.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPage.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the add address page display after invalid data input - no user country
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No Country");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Country field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing country input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No Country");
    }

    //invalid user second address addition test method - no user first name
    protected void invalidSecondUserAddressAdditionNoFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - no user first name
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoFirstNameGetter();
        //don't input address first name into first name input field
        addAddressPageNoSingularInput.inputNoUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageNoSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - no user first name
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No First Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("First Name field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing first name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No First Name");
    }

    //invalid user second address addition test method - no user last name
    protected void invalidSecondUserAddressAdditionNoLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - no user last name
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoLastNameGetter();
        //input valid address first name into first name input field
        addAddressPageNoSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //don't input address last name into last name input field
        addAddressPageNoSingularInput.inputNoUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - no user last name
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No Last Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Last Name field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing last name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No Last Name");
    }

    //invalid user second address addition test method - no user address
    protected void invalidSecondUserAddressAdditionNoAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - no user address
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoAddressGetter();
        //input valid address first name into first name input field
        addAddressPageNoSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageNoSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //don't input address into address 1 input field
        addAddressPageNoSingularInput.inputNoUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - no user address
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No Address");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Address Line 1 field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing address input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No Address");
    }

    //invalid user second address addition test method - no user city
    protected void invalidSecondUserAddressAdditionNoCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - no user city
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoCityGetter();
        //input valid address first name into first name input field
        addAddressPageNoSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageNoSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //don't input address city into city input field
        addAddressPageNoSingularInput.inputNoUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - no user city
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No City");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Suburb/City field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing city input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No City");
    }

    //invalid user second address addition test method - no user state
    protected void invalidSecondUserAddressAdditionNoStateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //valid user address getter
        addAddressPage.validUserAddressDataGetter();
        //input valid address first name into first name input field
        addAddressPage.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPage.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPage.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPage.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPage.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPage.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Select a state' option
        addAddressPage.selectStateOption();
        //capture screenshot of the add address page display after invalid data input - no user state
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No State");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("State/Province field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing state input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No State");
    }

    //invalid user second address addition test method - no user post code
    protected void invalidSecondUserAddressAdditionNoPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - no user post code
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoPostCodeGetter();
        //input valid address first name into first name input field
        addAddressPageNoSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageNoSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //don't input address post code into post code input field
        addAddressPageNoSingularInput.inputNoUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - no user post code
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No Post Code");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Zip/Postcode field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing post code input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No Post Code");
    }

    //invalid user second address addition test method - no user phone
    protected void invalidSecondUserAddressAdditionNoPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - no user phone
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoPhoneGetter();
        //input valid address first name into first name input field
        addAddressPageNoSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageNoSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //don't input address phone into phone input field
        addAddressPageNoSingularInput.inputNoUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - no user phone
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - No Phone");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Phone Number field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page missing phone input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - No Phone");
    }

    //too short singular input

    //invalid user second address addition test method - too short user first name (1 char)
    protected void invalidSecondUserAddressAdditionTooShortFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too short user first name (1 char)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortFirstNameGetter();
        //input too short address first name into first name input field (1 char)
        addAddressPageTooShortSingularInput.inputTooShortUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooShortSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too short user first name
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Short First Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too short address first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short add address first name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Short First Name");
    }

    //invalid user second address addition test method - too short user last name (1 char)
    protected void invalidSecondUserAddressAdditionTooShortLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too short user last name (1 char)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortLastNameGetter();
        //input valid address first name into first name input field
        addAddressPageTooShortSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input too short address last name into last name input field (1 char)
        addAddressPageTooShortSingularInput.inputTooShortUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too short user last name
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Short Last Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too short address last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short add address last name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Short Last Name");
    }

    //invalid user second address addition test method - too short user address (3 chars)
    protected void invalidSecondUserAddressAdditionTooShortAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too short user address (3 chars)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortAddressGetter();
        //input valid address first name into first name input field
        addAddressPageTooShortSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooShortSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input too short address into address 1 input field (3 chars)
        addAddressPageTooShortSingularInput.inputTooShortUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too short user address
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Short Address");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too short address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short add address input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Short Address");
    }

    //invalid user second address addition test method - too short user city (1 char)
    protected void invalidSecondUserAddressAdditionTooShortCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too short user city (1 char)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortCityGetter();
        //input valid address first name into first name input field
        addAddressPageTooShortSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooShortSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input too short address city into city input field (1 char)
        addAddressPageTooShortSingularInput.inputTooShortUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too short user city
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Short City");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too short address city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short add address city input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Short City");
    }

    //invalid user second address addition test method - too short user post code (4 digits)
    protected void invalidSecondUserAddressAdditionTooShortPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too short user post code (4 digits)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortPostCodeGetter();
        //input valid address first name into first name input field
        addAddressPageTooShortSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooShortSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input too short address post code into post code input field (4 digits)
        addAddressPageTooShortSingularInput.inputTooShortUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too short user post code
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Short Post Code");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Post code is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too short address post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short add address post code input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Short Post Code");
    }

    //invalid user second address addition test method - too short user phone (2 digits)
    protected void invalidSecondUserAddressAdditionTooShortPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too short user phone (2 digits)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortPhoneGetter();
        //input valid address first name into first name input field
        addAddressPageTooShortSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooShortSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input too short address phone into phone input field (2 digits)
        addAddressPageTooShortSingularInput.inputTooShortUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too short user phone
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Short Phone");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too short address phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short add address phone input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Short Phone");
    }

    //too long singular input

    //invalid user second address addition test method - too long user first name (100 chars)
    protected void invalidSecondUserAddressAdditionTooLongFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too long user first name (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongFirstNameGetter();
        //input too long address first name into first name input field (100 chars)
        addAddressPageTooLongSingularInput.inputTooLongUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooLongSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too long user first name
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Long First Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too long address first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long add address first name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Long First Name");
    }

    //invalid user second address addition test method - too long user last name (100 chars)
    protected void invalidSecondUserAddressAdditionTooLongLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too long user last name (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongLastNameGetter();
        //input valid address first name into first name input field
        addAddressPageTooLongSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input too long address last name into last name input field (100 chars)
        addAddressPageTooLongSingularInput.inputTooLongUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too long user last name
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Long Last Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too long address last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long add address last name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Long Last Name");
    }

    //invalid user second address addition test method - too long user address (100 chars)
    protected void invalidSecondUserAddressAdditionTooLongAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too long user address (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongAddressGetter();
        //input valid address first name into first name input field
        addAddressPageTooLongSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooLongSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input too short address into address 1 input field (100 chars)
        addAddressPageTooLongSingularInput.inputTooLongUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too long user address
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Long Address");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too long address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long add address input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Long Address");
    }

    //invalid user second address addition test method - too long user city (100 chars)
    protected void invalidSecondUserAddressAdditionTooLongCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too long user city (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongCityGetter();
        //input valid address first name into first name input field
        addAddressPageTooLongSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooLongSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input too long address city into city input field
        addAddressPageTooLongSingularInput.inputTooLongUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too long user city
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Long City");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too long address city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long add address city input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Long City");
    }

    //invalid user second address addition test method - too long user post code (6 digits)
    protected void invalidSecondUserAddressAdditionTooLongPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too long user post code (6 digits)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongPostCodeGetter();
        //input valid address first name into first name input field
        addAddressPageTooLongSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooLongSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input too long address post code into post code input field (6 digits)
        addAddressPageTooLongSingularInput.inputTooLongUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too long user post code
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Long Post Code");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Post code is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too long address post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long add address post code input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Long Post Code");
    }

    //invalid user second address addition test method - too long user phone (30 digits)
    protected void invalidSecondUserAddressAdditionTooLongPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - too long user phone (30 digits)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongPhoneGetter();
        //input valid address first name into first name input field
        addAddressPageTooLongSingularInput.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageTooLongSingularInput.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input too long address phone into phone input field (30 digits)
        addAddressPageTooLongSingularInput.inputTooLongUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - too long user phone
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Too Long Phone");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page too long address phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long add address phone input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Too Long Phone");
    }

    //invalid singular input format

    //invalid user second address addition test method - invalid user first name format (special symbols only)
    protected void invalidSecondUserAddressAdditionInvalidFirstNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - invalid user first name format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidFirstNameFormatGetter();
        //input invalid address first name format into first name input field (special symbols only)
        addAddressPageInvalidSingularInputFormat.inputInvalidUserFirstNameFormatIntoFirstNameInputField();
        //input valid address last name into last name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - invalid user first name format
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Invalid First Name Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page invalid address first name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid add address first name input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Invalid First Name Format");
    }

    //invalid user second address addition test method - invalid user last name format (special symbols only)
    protected void invalidSecondUserAddressAdditionInvalidLastNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - invalid user last name format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidLastNameFormatGetter();
        //input valid address first name into first name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserFirstNameIntoFirstNameInputField();
        //input invalid address last name format into last name input field
        addAddressPageInvalidSingularInputFormat.inputInvalidUserLastNameFormatIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - invalid user last name format
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Invalid Last Name Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page invalid address last name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid add address last name input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Invalid Last Name Format");
    }

    //invalid user second address addition test method - invalid user address format (special symbols only)
    protected void invalidSecondUserAddressAdditionInvalidAddressFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - invalid user address format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidAddressFormatGetter();
        //input valid address first name into first name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name format into last name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserLastNameIntoLastNameInputField();
        //input invalid address format into address 1 input field (special symbols only)
        addAddressPageInvalidSingularInputFormat.inputInvalidUserAddressFormatIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - invalid user address format
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Invalid Address Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page invalid address input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid address input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Invalid Address Format");
    }

    //invalid user second address addition test method - invalid user city format (special symbols only)
    protected void invalidSecondUserAddressAdditionInvalidCityFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - invalid user city format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidCityFormatGetter();
        //input valid address first name into first name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name format into last name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input invalid address city format into city input field
        addAddressPageInvalidSingularInputFormat.inputInvalidUserCityFormatIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - invalid user city format
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Invalid City Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page invalid address city input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid add address city input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Invalid City Format");
    }

    //invalid user second address addition test method - invalid user post code format (special symbols only)
    protected void invalidSecondUserAddressAdditionInvalidPostCodeFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - invalid user post code format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidPostCodeFormatGetter();
        //input valid address first name into first name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name format into last name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input invalid address post code format into post code input field
        addAddressPageInvalidSingularInputFormat.inputInvalidUserPostCodeFormatIntoPostCodeInputField();
        //input valid address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - invalid user post code format
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Invalid Post Code Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Post code cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page invalid address post code input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid add address post code input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Invalid Post Code Format");
    }

    //invalid user second address addition test method - invalid user phone format (special symbols only)
    protected void invalidSecondUserAddressAdditionInvalidPhoneFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'New address' link
        addressDashboardPage.clickNewAddressLink();
        //add address page web element assert
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //add address page text element assert
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of the add address page display before data input
        captureScreenshot(driver, "Add Address Page Display Before Data Input");
        //invalid user address getter - invalid user phone format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidPhoneFormatGetter();
        //input valid address first name into first name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserFirstNameIntoFirstNameInputField();
        //input valid address last name format into last name input field
        addAddressPageInvalidSingularInputFormat.inputValidUserLastNameIntoLastNameInputField();
        //input valid address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input invalid address phone format into phone input field
        addAddressPageInvalidSingularInputFormat.inputInvalidUserPhoneFormatIntoPhoneInputField();
        //click 'State dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select 'Illinois' option
        addAddressPage.selectIllinoisOption();
        //capture screenshot of the add address page display after invalid data input - invalid user phone format
        captureScreenshot(driver, "Add Address Page Display After Valid Data Input - Invalid Phone Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The add address page invalid address phone input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid add address phone input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Second Address Addition Test Result - Invalid Phone Format");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid edit user address test (the page is the same as AddAddressPage, therefore, its structure is being used to avoid redundancy)

    //valid edit user address test method
    protected void validEditUserAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The add address page title doesn't match expectations.");
        //capture screenshot of the add address page display before edited data input
        captureScreenshot(driver, "Add Address Page Display Before Edited Data Input");
        //valid edited user address getter
        addAddressPage.validUserEditedAddressDataGetter();
        //input valid edited address into address 1 input field
        addAddressPage.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPage.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPage.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPage.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the add address page display after valid data input
        captureScreenshot(driver, "Add Address Page Display After Valid Edited Data Input");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //log address dashboard page data(to verify the address has been edited)
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid Edit User Address Test Result");
    }

    //invalid edit user address tests

    //no singular input

    //invalid edit user address test method - no country
    protected void invalidEditUserAddressNoCountryTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //valid edited user address getter
        addAddressPage.validUserEditedAddressDataGetter();
        //click "Country" dropdown menu
        addAddressPage.clickCountryDropdownMenu();
        //select "Choose a country" option
        addAddressPage.selectCountryOption();
        //input valid edited address into address 1 input field
        addAddressPage.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPage.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPage.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPage.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - no country
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No Country");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Country field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing country input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No Country");
    }

    //invalid update user address test method - no user first name
    protected void invalidEditUserAddressNoFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - no user first name
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoFirstNameGetter();
        //don't input address first name into first name input field
        addAddressPageNoSingularInput.inputNoUserFirstNameIntoFirstNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - no first name
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No First Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("First Name field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing first name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No First Name");
    }

    //invalid update user address test method - no user last name
    protected void invalidEditUserAddressNoLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - no user last name
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoLastNameGetter();
        //don't input address last name into last name input field
        addAddressPageNoSingularInput.inputNoUserLastNameIntoLastNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - no user last name
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No Last Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Last Name field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing last name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No Last Name");
    }

    //invalid update user address test method - no user address
    protected void invalidEditUserAddressNoAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - no user address
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoAddressGetter();
        //don't input edited address into address 1 input field
        addAddressPageNoSingularInput.inputNoUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - no user address
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No Address");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Address Line 1 field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing address input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No Address");
    }

    //invalid update user address test method - no user city
    protected void invalidEditUserAddressNoCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - no user city
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoCityGetter();
        //input valid edited address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //don't input edited address city into city input field
        addAddressPageNoSingularInput.inputNoUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - no user city
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No City");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Suburb/City field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing city input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No City");
    }

    //invalid edit user address test method - no state
    protected void invalidEditUserAddressNoStateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //valid edited user address getter
        addAddressPage.validUserEditedAddressDataGetter();
        //input valid edited address into address 1 input field
        addAddressPage.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPage.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPage.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPage.inputValidUserPhoneIntoPhoneInputField();
        //click "State" dropdown menu
        addAddressPage.clickStateDropdownMenu();
        //select "Choose a state" option
        addAddressPage.selectStateOption();
        //capture screenshot of the update address page display after invalid data input - no state
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No State");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("State/Province field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing state input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No State");
    }

    //invalid update user address test method - no user post code
    protected void invalidEditUserAddressNoPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - no user post code
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoPostCodeGetter();
        //input valid edited address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //don't input edited address post code into post code input field
        addAddressPageNoSingularInput.inputNoUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageNoSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - no user post code
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No Post Code");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Zip/Postcode field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing post code input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No Post Code");
    }

    //invalid update user address test method - no user phone
    protected void invalidEditUserAddressNoPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageNoSingularInput addAddressPageNoSingularInput = new AddAddressPageNoSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - no user phone
        addAddressPageNoSingularInput.invalidUserEditedAddressDataNoPhoneGetter();
        //input valid edited address into address 1 input field
        addAddressPageNoSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageNoSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageNoSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //don't input edited address phone into phone input field
        addAddressPageNoSingularInput.inputNoUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - no user phone
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - No Phone");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error
        assertEquals("Phone Number field cannot be blank.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page missing phone input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - No Phone");
    }

    //too short singular input

    //invalid update user address test method - too short user first name (1 char)
    protected void invalidEditUserAddressTooShortFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too short user first name (1 char)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortFirstNameGetter();
        //input too short address first name into first name input field (1 char)
        addAddressPageTooShortSingularInput.inputTooShortUserFirstNameIntoFirstNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too short first name
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Short First Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too short first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short update address first name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Short First Name");
    }

    //invalid update user address test method - too short user last name (1 char)
    protected void invalidEditUserAddressTooShortLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too short user last name (1 char)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortLastNameGetter();
        //input too short address last name into last name input field (1 char)
        addAddressPageTooShortSingularInput.inputTooShortUserLastNameIntoLastNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too short last name
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Short Last Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too short last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short update address last name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Short Last Name");
    }

    //invalid update user address test method - too short user address (3 chars)
    protected void invalidEditUserAddressTooShortAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too short user address (3 chars)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortAddressGetter();
        //input too short edited address into address 1 input field (3 chars)
        addAddressPageTooShortSingularInput.inputTooShortUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too short address
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Short Address");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too short address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short update address address input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Short Address");
    }

    //invalid update user address test method - too short user city (1 char)
    protected void invalidEditUserAddressTooShortCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too short user city (1 char)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortCityGetter();
        //input valid edited address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input too short edited address city into city input field (1 char)
        addAddressPageTooShortSingularInput.inputTooShortUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too short city
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Short City");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too short city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short update address city input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Short City");
    }

    //invalid update user address test method - too short user post code (4 digits)
    protected void invalidEditUserAddressTooShortPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too short user post code (4 digits)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortPostCodeGetter();
        //input valid edited address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input too short edited address post code into post code input field (4 digits)
        addAddressPageTooShortSingularInput.inputTooShortUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooShortSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too short post code
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Short Post Code");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Post code is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too short post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short update address post code input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Short Post Code");
    }

    //invalid update user address test method - too short user phone (2 digits)
    protected void invalidEditUserAddressTooShortPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooShortSingularInput addAddressPageTooShortSingularInput = new AddAddressPageTooShortSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too short user phone (2 digits)
        addAddressPageTooShortSingularInput.invalidUserEditedAddressDataTooShortPhoneGetter();
        //input valid edited address into address 1 input field
        addAddressPageTooShortSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooShortSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooShortSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input too short edited address phone into phone input field (2 digits)
        addAddressPageTooShortSingularInput.inputTooShortUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too short phone
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Short Phone");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone is too short.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too short phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short update address phone input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Short Phone");
    }

    //too long singular input

    //invalid update user address test method - too long user first name (100 chars)
    protected void invalidEditUserAddressTooLongFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too long user first name (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongFirstNameGetter();
        //input too long address first name into first name input field (100 chars)
        addAddressPageTooLongSingularInput.inputTooLongUserFirstNameIntoFirstNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too long first name
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Long First Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too long first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long update address first name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Long First Name");
    }

    //invalid update user address test method - too long user last name (100 chars)
    protected void invalidEditUserAddressTooLongLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too long user last name (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongLastNameGetter();
        //input too long address last name into last name input field (100 chars)
        addAddressPageTooLongSingularInput.inputTooLongUserLastNameIntoLastNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too long last name
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Long Last Name");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too long last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long update address last name input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Long Last Name");
    }

    //invalid update user address test method - too long user address (100 chars)
    protected void invalidEditUserAddressTooLongAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too long user address (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongAddressGetter();
        //input too long edited address into address 1 input field (100 chars)
        addAddressPageTooLongSingularInput.inputTooLongUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too long address
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Long Address");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too long address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long update address address input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Long Address");
    }

    //invalid update user address test method - too long user city (100 chars)
    protected void invalidEditUserAddressTooLongCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too long user city (100 chars)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongCityGetter();
        //input valid edited address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input too long edited address city into city input field (100 chars)
        addAddressPageTooLongSingularInput.inputTooLongUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too long city
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Long City");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too long city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long update address city input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Long City");
    }

    //invalid update user address test method - too long user post code (6 digits)
    protected void invalidEditUserAddressTooLongPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too long user post code (6 digits)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongPostCodeGetter();
        //input valid edited address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input too long edited address post code into post code input field (6 digits)
        addAddressPageTooLongSingularInput.inputTooLongUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageTooLongSingularInput.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too long post code
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Long Post Code");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Post code is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too long post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long update address post code input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Long Post Code");
    }

    //invalid update user address test method - too long user phone (30 digits)
    protected void invalidEditUserAddressTooLongPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageTooLongSingularInput addAddressPageTooLongSingularInput = new AddAddressPageTooLongSingularInput(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - too long user phone (30 digits)
        addAddressPageTooLongSingularInput.invalidUserEditedAddressDataTooLongPhoneGetter();
        //input valid edited address into address 1 input field
        addAddressPageTooLongSingularInput.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageTooLongSingularInput.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageTooLongSingularInput.inputValidUserPostCodeIntoPostCodeInputField();
        //input too long edited address phone into phone input field
        addAddressPageTooLongSingularInput.inputTooLongUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - too long phone
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Too Long Phone");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone is too long.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page too long phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long update address phone input error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Too Long Phone");
    }

    //invalid singular input format

    //invalid update user address test method - invalid user first name format (special symbols only)
    protected void invalidEditUserAddressInvalidFirstNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - invalid user first name format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidFirstNameFormatGetter();
        //input invalid address first name format into first name input field (special symbols only)
        addAddressPageInvalidSingularInputFormat.inputInvalidUserFirstNameFormatIntoFirstNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - invalid first name format
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Invalid First Name Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page invalid first name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid update address first name input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Invalid First Name Format");
    }

    //invalid update user address test method - invalid user last name format (special symbols only)
    protected void invalidEditUserAddressInvalidLastNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - invalid user last name format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidLastNameFormatGetter();
        //input invalid address last name format into last name input field (special symbols only)
        addAddressPageInvalidSingularInputFormat.inputInvalidUserLastNameFormatIntoLastNameInputField();
        //input valid edited address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - invalid last name format
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Invalid Last Name Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page invalid last name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid update address last name input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Invalid Last Name Format");
    }

    //invalid update user address test method - invalid user address format (special symbols only)
    protected void invalidEditUserAddressInvalidAddressFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - invalid user address format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidAddressFormatGetter();
        //input invalid edited address format into address 1 input field (special symbols only)
        addAddressPageInvalidSingularInputFormat.inputInvalidUserAddressFormatIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - invalid address format
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Invalid Address Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page invalid address input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid update address input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Invalid Address Format");
    }

    //invalid update user address test method - invalid user city format (special symbols only)
    protected void invalidEditUserAddressInvalidCityFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - invalid user city format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidCityFormatGetter();
        //input valid edited address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input invalid edited address city format into city input field
        addAddressPageInvalidSingularInputFormat.inputInvalidUserCityFormatIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - invalid city format
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Invalid City Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page invalid address city input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid update address city input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Invalid City Format");
    }

    //invalid update user address test method - invalid user post code format (special symbols only)
    protected void invalidEditUserAddressInvalidPostCodeFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - invalid user post code format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidPostCodeFormatGetter();
        //input valid edited address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input invalid edited address post code format into post code input field
        addAddressPageInvalidSingularInputFormat.inputInvalidUserPostCodeFormatIntoPostCodeInputField();
        //input valid edited address phone into phone input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPhoneIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - invalid post code format
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Invalid Post Code Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Post code cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page invalid address post code input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid update address post code input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Invalid Post Code Format");
    }

    //invalid update user address test method - invalid user phone format (special symbols only)
    protected void invalidEditUserAddressInvalidPhoneFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        AddAddressPage addAddressPage = new AddAddressPage(driver);
        AddAddressPageInvalidSingularInputFormat addAddressPageInvalidSingularInputFormat = new AddAddressPageInvalidSingularInputFormat(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Edit' address button
        addressDashboardPage.clickEditAddressButton(0);
        //edit address page web element assert (same elements as for add address page)
        isAddAddressPageWebElementDisplayed(addAddressPage);
        //edit address page text element assert (same elements as for add address page)
        isAddAddressPageTextElementAsExpected(addAddressPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert edit address page title is as expected (same element as for add address page)
        assertEquals("Update Address", addAddressPage.getAddAddressPageTitle(), "The update address page title doesn't match expectations.");
        //capture screenshot of the update address page display before edited data input
        captureScreenshot(driver, "Update Address Page Display Before Edited Data Input");
        //invalid edited user address getter - invalid user phone format (special symbols only)
        addAddressPageInvalidSingularInputFormat.invalidUserEditedAddressDataInvalidPhoneFormatGetter();
        //input valid edited address into address 1 input field
        addAddressPageInvalidSingularInputFormat.inputValidUserAddressIntoAddress1InputField();
        //input valid edited address city into city input field
        addAddressPageInvalidSingularInputFormat.inputValidUserCityIntoCityInputField();
        //input valid edited address post code into post code input field
        addAddressPageInvalidSingularInputFormat.inputValidUserPostCodeIntoPostCodeInputField();
        //input invalid edited address phone format into phone input field
        addAddressPageInvalidSingularInputFormat.inputInvalidUserPhoneFormatIntoPhoneInputField();
        //capture screenshot of the update address page display after invalid data input - invalid phone format
        captureScreenshot(driver, "Update Address Page Display After Invalid Edited Data Input - Invalid Phone Format");
        //click 'Save address' button
        addAddressPage.clickSaveAddressButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone cannot consist of special symbols only.", addAddressPage.getAddAddressPageSingularInputError(), "The update address page invalid address phone input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid update address phone input format error wasn't triggered, test has failed.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Update User Address Test Result - Invalid Phone Format");
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid user address removal test

    //valid user address removal test method
    protected void validUserAddressRemovalTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        AddressDashboardPage addressDashboardPage = new AddressDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //account dashboard page web element assert
        isAccountDashboardPageWebElementDisplayed(accountDashboardPage);
        //account dashboard page text element assert
        isAccountDashboardPageTextElementAsExpected(accountDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the orders page display(since the user gets here after clicking 'Account' link)
        captureScreenshot(driver, "Orders Page Display");
        //click 'Addresses' link
        accountDashboardPage.clickAddressesLink();
        //address dashboard page web element assert
        isAddressDashboardPageWebElementDisplayed(addressDashboardPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //assert address dashboard page title is a expected
        assertEquals("Addresses", addressDashboardPage.getAddressDashboardPageTitle(), "The address dashboard page title doesn't match expectations.");
        //log address dashboard page data
        logAddressDashboardPageData(addressDashboardPage);
        //capture screenshot of the address dashboard page display
        captureScreenshot(driver, "Address Dashboard Page Display");
        //click 'Delete' address button
        addressDashboardPage.clickDeleteAddressButton(0);
        //confirm user address removal
        addressDashboardPage.confirmUserAddressRemoval();
        //assert account dashboard page user address removal confirmation message is as expected
        assertEquals("You currently have no addresses added to your profile", accountDashboardPage.getAccountDashboardPageOrdersNotPlacedBoxText(), "The account dashboard page user address removal confirmation message doesn't match expectations.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid User Address Removal Test Result");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid user logout test

    //valid user logout test method
    protected void validUserLogoutTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //log home page product data
        logHomePageProductData(homePage);
        //click 'Sign out' link
        generalPage.clickSignOutLink();
        //login register dashboard page web element assert (since the user gets here after logout)
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert (since the user gets here after logout)
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //assert the user logout success message is as expected
        assertEquals("You've been logged out of your account successfully.", loginRegisterDashboardPage.getLogoutSuccessMessageText(), "The logout success message doesn't match expectations or the user logout process has failed.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid User Logout Test Result");
    }

    //valid user login tests

    //valid user login test method
    protected void validUserLoginTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //login register dashboard page web element assert
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //valid user login data getter
        loginRegisterDashboardPage.validUserLoginDataGetter();
        //capture screenshot of the login dashboard page before login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display Before Login Data Input");
        //input valid user login email into email input field
        loginRegisterDashboardPage.inputLoginEmailIntoEmailInputField();
        //input valid user login password into password input field
        loginRegisterDashboardPage.inputLoginPasswordIntoPasswordInputField();
        //capture screenshot of the login dashboard page after valid login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display After Valid Login Data Input");
        //click 'Sign in' button
        loginRegisterDashboardPage.clickSignInButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Sign in' button)
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid User Login Test Result");
    }

    //valid user login with edited login email test method
    protected void validUserEditedLoginEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //login register dashboard page web element assert
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //valid user login data (with edited login email) getter
        loginRegisterDashboardPage.validUserEditedLoginEmailGetter(registerPage);
        //capture screenshot of the login dashboard page before login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display Before Login Data Input");
        //input valid edited user login email into email input field
        loginRegisterDashboardPage.inputEditedLoginEmailIntoEmailInputField();
        //input valid user login password into password input field
        loginRegisterDashboardPage.inputLoginPasswordIntoPasswordInputField();
        //capture screenshot of the login dashboard page after valid edited login data input - edited login email
        captureScreenshot(driver, "Login Register Dashboard Page Display After Valid Edited Login Data Input - Edited Login Email");
        //click 'Sign in' button
        loginRegisterDashboardPage.clickSignInButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Sign in' button)
        isOrdersPageNoOrderTextElementsAsExpected(accountDashboardPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid User Edited Login Email Test Result");
    }

    //valid user login with edited login password test method
    protected void validUserEditedLoginPasswordTest() {
        GeneralPage generalPage = new GeneralPage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        AccountSettingsPage accountSettingsPage = new AccountSettingsPage(driver);
        RegisterPage registerPage = new RegisterPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //login register dashboard page web element assert
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //valid user login data (with edited login password) getter
        loginRegisterDashboardPage.validUserEditedLoginPasswordGetter(registerPage);
        //capture screenshot of the login dashboard page before login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display Before Login Data Input");
        //input valid user login email into email input field
        loginRegisterDashboardPage.inputLoginEmailIntoEmailInputField();
        //input valid edited user login password into password input field
        loginRegisterDashboardPage.inputEditedLoginPasswordIntoPasswordInputField();
        //capture screenshot of the login dashboard page after valid edited login data input - edited login password
        captureScreenshot(driver, "Login Register Dashboard Page Display After Valid Edited Login Data Input - Edited Login Password");
        //click 'Sign in' button
        loginRegisterDashboardPage.clickSignInButton();
        //wait for elements to load (somehow it drops back onto 'Account settings' page)
        generalPage.waitForElementsToLoad();
        //account settings page web element assert
        isAccountSettingsPageWebElementDisplayed(accountSettingsPage);
        //account settings page text element assert
        isAccountSettingsPageTextElementAsExpected(accountSettingsPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid User Edited Login Password Test Result");
    }

    //invalid user login tests

    //no singular input

    //invalid user login test method - no login email
    protected void invalidUserLoginNoEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        LoginRegisterDashboardPageInvalidScenarios loginRegisterDashboardPageInvalidScenarios = new LoginRegisterDashboardPageInvalidScenarios(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //login register dashboard page web element assert
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //invalid user login data getter - no login email
        loginRegisterDashboardPageInvalidScenarios.invalidUserLoginDataNoLoginEmailGetter();
        //capture screenshot of the login dashboard page before login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display Before Login Data Input");
        //don't input user login email into email input field
        loginRegisterDashboardPageInvalidScenarios.inputNoLoginEmailIntoEmailInputField();
        //input valid user login password into password input field
        loginRegisterDashboardPageInvalidScenarios.inputLoginPasswordIntoPasswordInputField();
        //capture screenshot of the login dashboard page after valid login data input - no login email
        captureScreenshot(driver, "Login Register Dashboard Page Display After Invalid Login Data Input - No Login Email");
        //click 'Sign in' button
        loginRegisterDashboardPage.clickSignInButton();
        //assert the user gets an expected error
        assertEquals("Please use a valid email address, such as user@example.com.", loginRegisterDashboardPage.getLoginRegDashPageSingularInputError(), "The login dashboard page page missing login email input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Login Test Result - No Login Email");
    }

    //invalid user login test method - no login password
    protected void invalidUserLoginNoPasswordTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        LoginRegisterDashboardPageInvalidScenarios loginRegisterDashboardPageInvalidScenarios = new LoginRegisterDashboardPageInvalidScenarios(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //login register dashboard page web element assert
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //invalid user login data getter - no login password
        loginRegisterDashboardPageInvalidScenarios.invalidUserLoginDataNoLoginPasswordGetter();
        //capture screenshot of the login dashboard page before login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display Before Login Data Input");
        //input valid user login email into email input field
        loginRegisterDashboardPageInvalidScenarios.inputLoginEmailIntoEmailInputField();
        //don't input user login password into password input field
        loginRegisterDashboardPageInvalidScenarios.inputNoLoginPasswordIntoPasswordInputField();
        //capture screenshot of the login dashboard page after valid login data input - no login password
        captureScreenshot(driver, "Login Register Dashboard Page Display After Invalid Login Data Input - No Login Password");
        //click 'Sign in' button
        loginRegisterDashboardPage.clickSignInButton();
        //assert the user gets an expected error
        assertEquals("You must enter a password.", loginRegisterDashboardPage.getLoginRegDashPageSingularInputError(), "The login dashboard page page missing login password input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Login Test Result - No Login Password");
    }

    //invalid singular input

    //invalid user login test method - invalid login email
    protected void invalidUserLoginInvalidEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        LoginRegisterDashboardPageInvalidScenarios loginRegisterDashboardPageInvalidScenarios = new LoginRegisterDashboardPageInvalidScenarios(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //login register dashboard page web element assert
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //invalid user login data getter - invalid login email
        loginRegisterDashboardPageInvalidScenarios.invalidUserLoginDataInvalidLoginEmailGetter();
        //capture screenshot of the login dashboard page before login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display Before Login Data Input");
        //input invalid user login email into email input field
        loginRegisterDashboardPageInvalidScenarios.inputInvalidLoginEmailIntoEmailInputField();
        //input valid user login password into password input field
        loginRegisterDashboardPageInvalidScenarios.inputLoginPasswordIntoPasswordInputField();
        //capture screenshot of the login dashboard page after valid login data input - invalid login email
        captureScreenshot(driver, "Login Register Dashboard Page Display After Invalid Login Data Input - Invalid Login Email");
        //click 'Sign in' button
        loginRegisterDashboardPage.clickSignInButton();
        //assert the user gets an expected error
        assertEquals("Your email address or password is incorrect. Please try again. If you've forgotten your sign in details, just click the 'Forgot your password?' link below.", loginRegisterDashboardPage.getLoginRegDashPageSingularInputErrorBoxText(), "The login dashboard page page invalid login email input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Login Test Result - Invalid Login Email");
    }

    //invalid user login test method - invalid login password
    protected void invalidUserLoginInvalidPasswordTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        LoginRegisterDashboardPage loginRegisterDashboardPage = new LoginRegisterDashboardPage(driver);
        LoginRegisterDashboardPageInvalidScenarios loginRegisterDashboardPageInvalidScenarios = new LoginRegisterDashboardPageInvalidScenarios(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //login register dashboard page web element assert
        isLoginRegisterDashboardPageWebElementDisplayed(loginRegisterDashboardPage);
        //login register dashboard page text element assert
        isLoginRegisterDashboardTextElementAsExpected(loginRegisterDashboardPage);
        //account dashboard page breadcrumb web elements assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //invalid user login data getter - invalid login password
        loginRegisterDashboardPageInvalidScenarios.invalidUserLoginDataInvalidLoginPasswordGetter();
        //capture screenshot of the login dashboard page before login data input
        captureScreenshot(driver, "Login Register Dashboard Page Display Before Login Data Input");
        //input valid user login email into email input field
        loginRegisterDashboardPageInvalidScenarios.inputLoginEmailIntoEmailInputField();
        //input invalid user login password into password input field
        loginRegisterDashboardPageInvalidScenarios.inputInvalidLoginPasswordIntoPasswordInputField();
        //capture screenshot of the login dashboard page after valid login data input - invalid login password
        captureScreenshot(driver, "Login Register Dashboard Page Display After Invalid Login Data Input - Invalid Login Password");
        //click 'Sign in' button
        loginRegisterDashboardPage.clickSignInButton();
        //assert the user gets an expected error
        assertEquals("Your email address or password is incorrect. Please try again. If you've forgotten your sign in details, just click the 'Forgot your password?' link below.", loginRegisterDashboardPage.getLoginRegDashPageSingularInputErrorBoxText(), "The login dashboard page page invalid login password input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid User Login Test Result - Invalid Login Password");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //most popular product/products addition to cart tests

    //single most popular product ("Tiered Wire Basket") addition to cart test method (as a guest)
    protected void addSingleMostPopularProductToCartGuestTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //hover over set 'Most popular product' ("Tiered Wire Basket") image
        homePage.hoverOverMostPopularProductImg(1);
        //click 'Add to cart' ("Tiered Wire Basket") button
        homePage.clickMostPopularProductAddToCartButton(1);
        //capture screenshot of the test result
        captureScreenshot(driver, "Single Most Popular Product ('Tiered Wire Basket') Addition To Cart Test Result");
    }

    //single most popular product ("Oak Cheese Grater") addition to cart test method (as a registered user)
    protected void addSingleMostPopularProductToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //hover over set 'Most popular product' ("Oak Cheese Grater") image
        homePage.hoverOverMostPopularProductImg(3);
        //click 'Add to cart' ("Oak Cheese Grater") button
        homePage.clickMostPopularProductAddToCartButton(3);
        //capture screenshot of the test result
        captureScreenshot(driver, "Single Most Popular Product ('Oak Cheese Grater') Addition To Cart Test Result");
    }

    //multiple most popular products ("Tiered Wire Basket") addition to cart test method (as a guest)
    protected void addMultipleMostPopularProductsToCartGuestTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //click set most popular ("Tiered Wire Basket") name link
        homePage.clickMostPopularProductNameLink(1);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(5);
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Multiple Most Popular Products ('Tiered Wire Basket') Addition to Cart Test Result");
    }

    //multiple most popular products ("Oak Cheese Grater") addition to cart test method (as a registered user)
    protected void addMultipleMostPopularProductsToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click 'Add to cart' ("Oak Cheese Grater") button
        homePage.clickMostPopularProductNameLink(3);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(5);
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Multiple Most Popular Products ('Oak Cheese Grater') Addition To Cart Test Result");
    }

    //new product/products addition to cart tests

    //single new product ("Smith Journal 13") addition to cart test method (as a guest)
    protected void addSingleNewProductToCartGuestTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //hover over set 'New product' ("Smith Journal 13") image
        homePage.hoverOverNewProductImg(0);
        //click 'Add to cart' ("Smith Journal 13") button
        homePage.clickNewProductAddToCartButton(0);
        //capture screenshot of the test result
        captureScreenshot(driver, "Single New Product ('Smith Journal 13') Addition To Cart Test Result");
    }

    //single new product ("Kinfolk Issue 16") addition to cart test method (as a registered user)
    protected void addSingleNewProductToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //hover over set 'New product' ("Kinfolk Issue 16") image
        homePage.hoverOverMostPopularProductImg(2);
        //click 'Add to cart' ("Kinfolk Issue 16") button
        homePage.clickNewProductAddToCartButton(2);
        //capture screenshot of the test result
        captureScreenshot(driver, "Single New Product ('Kinfolk Issue 16') Addition To Cart Test Result");
    }

    //multiple new products ("Smith Journal 13") addition to cart test method (as a guest)
    protected void addMultipleNewProductsToCartGuestTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //click set 'New product' ("Smith Journal 13") name link
        homePage.clickNewProductNameLinkButton(0);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(5);
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Multiple New Products ('Smith Journal 13') Addition To Cart Test Result");
    }

    //multiple new products ("Kinfolk Issue 16") addition to cart test method (as a registered user)
    protected void addMultipleNewProductsToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click set 'New product' ("Kinfolk Issue 16") name link
        homePage.clickNewProductNameLinkButton(2);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(5);
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Multiple New Products ('Kinfolk Issue 16') Addition To Cart Test Result");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //single category dashboard page tests

    //add single "Utility" category product ("Canvas Laundry Cart") to cart test method (as a guest)
    protected void addSingleUtilityLaundryCartProductToCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header lower navbar "Utility" category link
        generalPage.clickHeaderLowerNavUtilityLink();
        //click "Other" dropdown button
        singleCategoryDashboardPage.clickOtherDropdownButton();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //log single category dashboard page subtext (these are dynamic, depending on the category)
        logSingleCategoryDashboardPageSubtext(singleCategoryDashboardPage);
        //log single category dashboard page product data
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Single Category Dashboard Page Display");
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by" newest option
        singleCategoryDashboardPage.selectSortByNewestOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (newest) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Newest' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by bestselling" option
        singleCategoryDashboardPage.selectSortByBestSellingOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (bestselling) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Bestselling' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name A to Z" option
        singleCategoryDashboardPage.selectSortByAToZOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name A to Z) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name A to Z' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name Z to A" option
        singleCategoryDashboardPage.selectSortByZToAOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name Z to A) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name Z to A' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by review" option
        singleCategoryDashboardPage.selectSortByReviewOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (review) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Review' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price ascending" option
        singleCategoryDashboardPage.selectSortByPriceAscOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price ascending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Price Ascending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price descending" option
        singleCategoryDashboardPage.selectSortByPriceDescOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price descending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Price Descending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by featured" (default sort) option
        singleCategoryDashboardPage.selectSortByFeaturedOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (featured -> default) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Featured (Default)' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //hover over set product ("Canvas Laundry Cart") image
        singleCategoryDashboardPage.hoverOverSetProductImg(3);
        //click set product ("Canvas Laundry Cart") 'Add to cart' button
        singleCategoryDashboardPage.clickSetProductAddToCartButton(3);
        //capture screenshot of the test result
        captureScreenshot(driver, "Add Single Category Dashboard Page Set Single (Canvas Laundry Cart (Utility)) Product To Cart Test Result (as a guest)");
    }

    //add single "Publications" category product ("Gather Journal Issue 7") to cart test method (as a registered user)
    protected void addSinglePublicationsGatherJournalProductToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header lower navbar "Publications" category link
        generalPage.clickHeaderLowerNavPublicationsLink();
        //click "Other" dropdown button
        singleCategoryDashboardPage.clickOtherDropdownButton();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //log single category dashboard page subtext (these are dynamic, depending on the category)
        logSingleCategoryDashboardPageSubtext(singleCategoryDashboardPage);
        //log single category dashboard page product data
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Single Category Dashboard Page Display");
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by" newest option
        singleCategoryDashboardPage.selectSortByNewestOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (newest) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Newest' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by bestselling" option
        singleCategoryDashboardPage.selectSortByBestSellingOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (bestselling) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Bestselling' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name A to Z" option
        singleCategoryDashboardPage.selectSortByAToZOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name A to Z) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name A to Z' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name Z to A" option
        singleCategoryDashboardPage.selectSortByZToAOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name Z to A) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name Z to A' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by review" option
        singleCategoryDashboardPage.selectSortByReviewOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (review) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Review' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price ascending" option
        singleCategoryDashboardPage.selectSortByPriceAscOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price ascending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Price Ascending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price descending" option
        singleCategoryDashboardPage.selectSortByPriceDescOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price descending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Price Descending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by featured" (default sort) option
        singleCategoryDashboardPage.selectSortByFeaturedOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (featured -> default) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Featured (Default)' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Freshbrand" checkbox
        singleCategoryDashboardPage.clickSetProductBrandCheckbox(0);
        //capture screenshot of the single category dashboard page display after selected set brand checkbox
        captureScreenshot(driver, "Single Category Dashboard Page Display After Clicking 'Featurebrand' Checkbox");
        //single category dashboard page refined by section web element
        isSingleCategoryDashboardPageRefinedBySectionWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page brand section web element assert
        isSingleCategoryDashboardPageBrandSectionWebElementDisplayed(singleCategoryDashboardPage);
        //hover over set product ("Gather Journal Issue 7") image
        singleCategoryDashboardPage.hoverOverSetProductImg(3);
        //click set product ("Gather Journal Issue 7") 'Add to cart' button
        singleCategoryDashboardPage.clickSetProductAddToCartButton(3);
        //capture screenshot of the test result
        captureScreenshot(driver, "Add Single Category Dashboard Page Set Single (Gather Journal Issue 7 (Publications)) Product To Cart Test Result (as a registered user)");
    }

    //add multiple "Utility" category product ("Floor Cleaner") to cart test method (as a guest)
    protected void addMultipleUtilityLaundryCartProductToCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header lower navbar "Utility" category link
        generalPage.clickHeaderLowerNavUtilityLink();
        //click "Other" dropdown button
        singleCategoryDashboardPage.clickOtherDropdownButton();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //log single category dashboard page subtext (these are dynamic, depending on the category)
        logSingleCategoryDashboardPageSubtext(singleCategoryDashboardPage);
        //log single category dashboard page product data
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Single Category Dashboard Page Display");
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by" newest option
        singleCategoryDashboardPage.selectSortByNewestOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (newest) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Newest' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by bestselling" option
        singleCategoryDashboardPage.selectSortByBestSellingOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (bestselling) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Bestselling' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name A to Z" option
        singleCategoryDashboardPage.selectSortByAToZOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name A to Z) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name A to Z' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name Z to A" option
        singleCategoryDashboardPage.selectSortByZToAOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name Z to A) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name Z to A' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by review" option
        singleCategoryDashboardPage.selectSortByReviewOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (review) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Review' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price ascending" option
        singleCategoryDashboardPage.selectSortByPriceAscOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price ascending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Price Ascending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price descending" option
        singleCategoryDashboardPage.selectSortByPriceDescOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price descending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Price Descending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by featured" (default sort) option
        singleCategoryDashboardPage.selectSortByFeaturedOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (featured -> default) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Featured (Default)' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click set product ("Floor Cleaner") name link
        singleCategoryDashboardPage.clickSetProductNameLink(8);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(3);
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Add Single Category Dashboard Page Set Single (Floor Cleaner (Utility)) Product To Cart Test Result (as a guest)");
    }

    //add multiple "Publications" category products ("Openhouse No.3") to cart test method (as a registered user)
    protected void addMultiplePublicationOpenHouseProductToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header lower navbar "Publications" category link
        generalPage.clickHeaderLowerNavPublicationsLink();
        //click "Other" dropdown button
        singleCategoryDashboardPage.clickOtherDropdownButton();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //log single category dashboard page subtext (these are dynamic, depending on the category)
        logSingleCategoryDashboardPageSubtext(singleCategoryDashboardPage);
        //log single category dashboard page product data
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Single Category Dashboard Page Display");
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by" newest option
        singleCategoryDashboardPage.selectSortByNewestOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (newest) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Newest' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by bestselling" option
        singleCategoryDashboardPage.selectSortByBestSellingOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (bestselling) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Bestselling' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name A to Z" option
        singleCategoryDashboardPage.selectSortByAToZOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name A to Z) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name A to Z' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name Z to A" option
        singleCategoryDashboardPage.selectSortByZToAOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name Z to A) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name Z to A' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by review" option
        singleCategoryDashboardPage.selectSortByReviewOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (review) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Review' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price ascending" option
        singleCategoryDashboardPage.selectSortByPriceAscOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price ascending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Price Ascending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by price descending" option
        singleCategoryDashboardPage.selectSortByPriceDescOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (price descending) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Price Descending' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by featured" (default sort) option
        singleCategoryDashboardPage.selectSortByFeaturedOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (featured -> default) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Featured (Default)' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Freshbrand" checkbox
        singleCategoryDashboardPage.clickSetProductBrandCheckbox(0);
        //capture screenshot of the single category dashboard page display after selected set brand checkbox
        captureScreenshot(driver, "Single Category Dashboard Page Display After Clicking 'Featurebrand' Checkbox");
        //single category dashboard page refined by section web element
        isSingleCategoryDashboardPageRefinedBySectionWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page brand section web element assert
        isSingleCategoryDashboardPageBrandSectionWebElementDisplayed(singleCategoryDashboardPage);
        //click set product ("Openhouse No.3") name link
        singleCategoryDashboardPage.clickSetProductNameLink(1);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(2);
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Add Single Category Dashboard Page Set Multiple (Openhouse No.3 (Publications)) Product To Cart Test Result (as a registered user)");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //add single searched product to cart tests

    //add single searched product ("Living With Plants") to cart test method (as a guest)
    protected void addSingleSearchedPlantPictureProductToCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header upper navbar 'Search' link
        generalPage.clickHeaderUpperNavSearchDropdownLink();
        //input set search query ("Living With Plants") into search input field
        generalPage.inputPlantPictureSearchQueryIntoSearchBarInputField();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //single category dashboard search section web element assert
        isSingleCategoryDashboardPageSearchSectionWebElementDisplayed(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Searched Product Dashboard Page Display");
        //click set product ("Living With Plants") name link
        singleCategoryDashboardPage.clickSetProductNameLink(0);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //capture screenshot of the single product page after set product quantity input
        captureScreenshot(driver, "Single Searched Product (Plant) Page Display After Set Quantity Input");
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Single Search Product Addition To Cart Test Result (as a guest)");
    }

    //add single searched product ("Dustpan & Brush") to cart test method (as a registered user)
    protected void addSingleSearchedDustpanProductToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header upper navbar 'Search' link
        generalPage.clickHeaderUpperNavSearchDropdownLink();
        //input set search query ("Dustpan & Brush") into search input field
        generalPage.inputDustpanSearchQueryIntoSearchBarInputField();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //single category dashboard search section web element assert
        //isSingleCategoryDashboardPageSearchSectionWebElementDisplayed(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Searched Product Dashboard Page Display");
        //click set product ("Dustpan & Brush") name link
        singleCategoryDashboardPage.clickSetProductNameLink(0);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //capture screenshot of the single product page after set product quantity input
        captureScreenshot(driver, "Single Searched Product (Dustpan) Page Display After Set Quantity Input");
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Single Searched Product Addition To Cart Test Result (as a registered user)");
    }

    //add multiple searched product ("Orbit Terrarium (Large)") to cart test method (as a guest)
    protected void addMultipleSearchedLargeTerrariumProductToCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header upper navbar 'Search' link
        generalPage.clickHeaderUpperNavSearchDropdownLink();
        //input set search query ("Orbit Terrarium (Large)") into search input field
        generalPage.inputLargeTerrariumSearchQueryIntoSearchBarInputField();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //single category dashboard search section web element assert
        isSingleCategoryDashboardPageSearchSectionWebElementDisplayed(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Searched Product Dashboard Page Display");
        //click set product ("Orbit Terrarium (Large)") name link
        singleCategoryDashboardPage.clickSetProductNameLink(0);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(4);
        //capture screenshot of the single product page after set product quantity input
        captureScreenshot(driver, "Single Searched Product (Terrarium) Page Display After Set Quantity Input");
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Multiple Searched Products Addition To Cart Test Result (as a guest)");
    }

    //add multiple searched products ("1L Le Parfait Jar") to cart test method (as a registered user)
    protected void addMultipleSearchedJarProductToCartRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo link
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header upper navbar 'Search' link
        generalPage.clickHeaderUpperNavSearchDropdownLink();
        //input set search query ("1L Le Parfait Jar") into search input field
        generalPage.inputJarSearchQueryIntoSearchBarInputField();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //single category dashboard search section web element assert
        //isSingleCategoryDashboardPageSearchSectionWebElementDisplayed(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Searched Product Dashboard Page Display");
        //click set product ("Dustpan & Brush") name link
        singleCategoryDashboardPage.clickSetProductNameLink(0);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //capture screenshot of the single product page display
        captureScreenshot(driver, "Single Product Page Display");
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //input set product quantity into product quantity input field
        singleProductPage.inputSetProductQtyIntoQtyInputField(3);
        //capture screenshot of the single product page after set product quantity input
        captureScreenshot(driver, "Single Searched Product (Jar) Page Display After Set Quantity Input");
        //click 'add to cart' button
        singleProductPage.clickAddToCartButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //shopping cart modal web element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalWebElementDisplayed(singleProductPage);
        //shopping cart modal text element assert (Selenium can't seem to find elements with VALID selectors)
        //isShoppingCartModalTextElementAsExpected(singleProductPage);
        //capture screenshot of the shopping cart modal display
        captureScreenshot(driver, "Shopping Cart Modal Display");
        //log shopping cart modal product data
        logShoppingCartModalProductData(singleProductPage);
        //click shopping cart modal 'View or edit cart' button
        singleProductPage.clickViewOrEditCartButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Multiple Searched Products Addition To Cart Test Result (as a registered user)");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //add to compare list tests

    //add products to compare list test method (as a guest)
    protected void addProductsToCompareListTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        AddToCompareListPage addToCompareListPage = new AddToCompareListPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Accept cookies' button
        generalPage.clickAcceptCookiesButton();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header lower navbar "Utility" category link
        generalPage.clickHeaderLowerNavUtilityLink();
        //click "Other" dropdown button
        singleCategoryDashboardPage.clickOtherDropdownButton();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //account dashboard page breadcrumb web elements assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //log single category dashboard page subtext (these are dynamic, depending on the category)
        logSingleCategoryDashboardPageSubtext(singleCategoryDashboardPage);
        //log single category dashboard page product data
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Single Category Dashboard Page Display");
        //hover over set product ("S Shaped Scrub Brush") image
        singleCategoryDashboardPage.hoverOverSetProductImg(2);
        //click "Compare" checkbox button
        singleCategoryDashboardPage.clickSetProductCompareCheckbox(2);
        //hover over set product ("Dish Detergent") image
        singleCategoryDashboardPage.hoverOverSetProductImg(5);
        //click "Compare" checkbox button
        singleCategoryDashboardPage.clickSetProductCompareCheckbox(5);
        //hover over set product ("Feather Duster") image
        singleCategoryDashboardPage.hoverOverSetProductImg(1);
        //click "Compare" checkbox button
        singleCategoryDashboardPage.clickSetProductCompareCheckbox(1);
        //click header upper navbar "Compare" link
        generalPage.clickCompareLink();
        //add to compare list page web element assert
        isAddToCompareListPageWebElementDisplayed(addToCompareListPage);
        //add to compare list page text element assert
        isAddToCompareListPageTextElementAsExpected(addToCompareListPage);
        //account dashboard page breadcrumb web elements assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //log add to compare list page product data
        logAddToCompareListProductData(addToCompareListPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Products Addition To Compare List Page Test Result (as a guest)");
    }

    //add products to compare list test method (as a registered user)
    protected void addProductsToCompareListRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        AddToCompareListPage addToCompareListPage = new AddToCompareListPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click header home page logo
        generalPage.clickHeaderHomePageLogoLink();
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header lower navbar "Publications" category link
        generalPage.clickHeaderLowerNavPublicationsLink();
        //click "Other" dropdown button
        singleCategoryDashboardPage.clickOtherDropdownButton();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //account dashboard page breadcrumb web elements assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //log single category dashboard page subtext (these are dynamic, depending on the category)
        logSingleCategoryDashboardPageSubtext(singleCategoryDashboardPage);
        //log single category dashboard page product data
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Single Category Dashboard Page Display");
        //hover over set product ("Gather Journal Issue 7") image
        singleCategoryDashboardPage.hoverOverSetProductImg(3);
        //click "Compare" checkbox button
        singleCategoryDashboardPage.clickSetProductCompareCheckbox(3);
        //hover over set product ("The Kinfolk Table") image
        singleCategoryDashboardPage.hoverOverSetProductImg(4);
        //click "Compare" checkbox button
        singleCategoryDashboardPage.clickSetProductCompareCheckbox(4);
        //hover over set product ("Living With Plants") image
        singleCategoryDashboardPage.hoverOverSetProductImg(5);
        //click "Compare" checkbox button
        singleCategoryDashboardPage.clickSetProductCompareCheckbox(5);
        //click header upper navbar "Compare" link
        generalPage.clickCompareLink();
        //add to compare list page web element assert
        isAddToCompareListPageWebElementDisplayed(addToCompareListPage);
        //add to compare list page text element assert
        isAddToCompareListPageTextElementAsExpected(addToCompareListPage);
        //account dashboard page breadcrumb web elements assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //log add to compare list page product data
        logAddToCompareListProductData(addToCompareListPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Products Addition To Compare List Page Test Result (as a guest)");
    }

    //add products from compare list to cart test (both registered user and guest have the same method)

    //add products from compare list to cart test method
    protected void addProductsFromCompareListToCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AddToCompareListPage addToCompareListPage = new AddToCompareListPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //add to compare list page web element assert
        isAddToCompareListPageWebElementDisplayed(addToCompareListPage);
        //add to compare list page text element assert
        isAddToCompareListPageTextElementAsExpected(addToCompareListPage);
        //account dashboard page breadcrumb web elements assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //click 'Add to cart' button (first product)
        addToCompareListPage.clickSetAddToCartButton(0);
        //capture screenshot of the first product addition from compare list to cart
        captureScreenshot(driver, "First Product Addition From Compare List To Cart");
        //go back to compare list page
        driver.navigate().back();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click 'Add to cart' button (second product)
        addToCompareListPage.clickSetAddToCartButton(1);
        //capture screenshot of the second product addition from compare list to cart
        captureScreenshot(driver, "Second Product Addition From Compare List To Cart");
        //go back to compare list page
        driver.navigate().back();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click 'Add to cart' button (third product)
        addToCompareListPage.clickSetAddToCartButton(2);
        //capture screenshot of the test result
        captureScreenshot(driver, "Products Addition From Compare List To Cart Test Result");
    }

    //remove product from compare list test (both registered user and guest have the same method) => the compare list MUST have two products

    //remove products from compare list test method
    protected void removeProductsFromCompareListTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AddToCompareListPage addToCompareListPage = new AddToCompareListPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        //add to compare list page web element assert
        isAddToCompareListPageWebElementDisplayed(addToCompareListPage);
        //add to compare list page text element assert
        isAddToCompareListPageTextElementAsExpected(addToCompareListPage);
        //account dashboard page breadcrumb web elements assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //click set 'Remove' button
        addToCompareListPage.clickSetRemoveButton(0);
        //capture screenshot of the set product addition from compare list
        captureScreenshot(driver, "Set Product Removal From Compare List");
        //click set 'Remove' button
        addToCompareListPage.clickSetRemoveButton(1);
        //assert any of the two products can't be removed and the user receives an expected message
        assertEquals("At least 2 products are needed to make a valid comparison.", addToCompareListPage.getAddToCompareListPageProductRemovalFailureMessage(), "The product removal from compare list failure message doesn't match expectations.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Products Removal From Compare List To Cart Test Result");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //shopping cart page tests (both registered user and guest share these methods)

    //add product(products) from shopping cart to check out test method
    protected void addProductToCheckoutTest() {
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after valid data input
        captureScreenshot(driver, "Shipping Method Section Display After Valid Data Input (shopping cart)");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //click "Flat rate" shipping radio button
        shoppingCartPage.clickFlatRateShippingRadioButton();
        //click "Update shipping cost" button
        shoppingCartPage.clickUpdateShippingCostButton();
        //log shopping cart data (after shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //expected url
        String expectedURL = "https://cornerstone-light-demo.mybigcommerce.com/checkout";
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //if the click fails to redirect the user to next page, perform the click again
        if(!Objects.equals(driver.getCurrentUrl(), expectedURL)) {
            //click "Checkout" button (during automation single click method doesn't seem to work)
            shoppingCartPage.clickCheckoutButton();
            logger.error("The 'Checkout' button had to be clicked once again during automation run, manual run doesn't have this issue.");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Add Product (Products) To Checkout Test Result");
    }

    //update product (products) quantity in shopping cart test method
    protected void updateProductQtyShopCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after valid data input
        captureScreenshot(driver, "Shipping Method Section Display After Valid Data Input (shopping cart)");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //click "Flat rate" shipping radio button
        shoppingCartPage.clickFlatRateShippingRadioButton();
        //click "Update shipping cost" button
        shoppingCartPage.clickUpdateShippingCostButton();
        //log shopping cart data (after shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //input set quantity into product quantity input field
        shoppingCartPage.inputSetProductQuantityIntoProductQtyInputField(0, 6);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //log shopping cart data (to verify the product quantity has been updated)
        logShoppingCartPageProductData(shoppingCartPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Update Products Quantity In Checkout Page Test Result (quantity input)");
    }

    //update product (products) quantity (with increase button) in shopping cart test method
    protected void updateProductQtyIncreaseBtnShopCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after valid data input
        captureScreenshot(driver, "Shipping Method Section Display After Valid Data Input (shopping cart)");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //click "Flat rate" shipping radio button
        shoppingCartPage.clickFlatRateShippingRadioButton();
        //click "Update shipping cost" button
        shoppingCartPage.clickUpdateShippingCostButton();
        //log shopping cart data (after shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click 'Increase' quantity button
        shoppingCartPage.clickIncreaseQtyButton(1);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //log shopping cart data (to verify the product quantity has been updated)
        logShoppingCartPageProductData(shoppingCartPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Update Products Quantity In Checkout Page Test Result (increase button)");
    }

    //update product (products) quantity (with decrease button) in shopping cart test method
    protected void updateProductQtyDecreaseBtnShopCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after valid data input
        captureScreenshot(driver, "Shipping Method Section Display After Valid Data Input (shopping cart)");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //click "Flat rate" shipping radio button
        shoppingCartPage.clickFlatRateShippingRadioButton();
        //click "Update shipping cost" button
        shoppingCartPage.clickUpdateShippingCostButton();
        //log shopping cart data (after shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click 'Decrease' quantity button
        shoppingCartPage.clickDecreaseQtyButton(0);
        //click 'Decrease' quantity button
        shoppingCartPage.clickDecreaseQtyButton(0);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //log shopping cart data (to verify the product quantity has been updated)
        logShoppingCartPageProductData(shoppingCartPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Update Products Quantity In Checkout Page Test Result (decrease button)");
    }

    //product removal from shopping cart test

    //product removal from shopping cart test method
    protected void productRemovalFromShoppingCartTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after valid data input
        captureScreenshot(driver, "Shipping Method Section Display After Valid Data Input (shopping cart)");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //click "Flat rate" shipping radio button
        shoppingCartPage.clickFlatRateShippingRadioButton();
        //click "Update shipping cost" button
        shoppingCartPage.clickUpdateShippingCostButton();
        //log shopping cart data (after shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click "Remove" product button
        shoppingCartPage.clickSetProductRemoveButton(0);
        //assert the user gets the expected modal message (Selenium fails to find this element with VALID selector)
        //assertEquals("Are you sure you want to delete this item?", shoppingCartPage.getShoppingCartPopupModalWarningMsg(), "The shopping cart page popup modal warning message doesn't match expectations or the popup modal wasn't triggered.");
        //click "OK" modal button
        shoppingCartPage.clickShopCartPopupModalOKButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Product Removal From Shopping Cart Test Result");
    }

    //invalid product(s) addition to check out (invalid shipping data) tests

    //no singular input

    //add product(products) from shopping cart to check out test method - no shipping country
    protected void invalidAddProductToCheckoutNoShipCountryTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "Select a country" option
        shoppingCartPage.selectCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //assert the user gets expected error message
        assertEquals("The 'Country' field cannot be blank.", shoppingCartPage.getShopCartPageShipSingularInputError(), "The shopping cart page missing shipping country input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of shopping cart page shipping section display after invalid data input - no shipping country
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - No Shipping Country");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //click "Checkout" button (during automation single click method doesn't seem to work)
        //shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - No Shipping Country");
    }

    //add product(products) from shopping cart to check out test method - no shipping state
    protected void invalidAddProductToCheckoutNoShipStateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select state option
        shoppingCartPage.selectStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - no shipping state
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - No Shipping State");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message
        assertEquals("The 'State/Province' field cannot be blank.", shoppingCartPage.getShopCartPageShipSingularInputError(), "The shopping cart page missing shipping state input error doesn't match expectations or the error wasn't triggered.");
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - No Shipping State");
    }

    //add product(products) from shopping cart to check out test method - no shipping city
    protected void invalidAddProductToCheckoutNoShipCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //don't input shipping city into shipping city input field
        shoppingCartPageInvalidScenarios.inputNoShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - no shipping city
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - No Shipping City");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Please enter a valid city.", shoppingCartPage.getShopCartPageShipSingularInputAlert(), "The shopping cart page missing shipping city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The missing shipping city error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - No Shipping City");
    }

    //add product(products) from shopping cart to check out test method - no shipping post code
    protected void invalidAddProductToCheckoutNoShipPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //don't input shipping post code into shipping post code input field
        shoppingCartPageInvalidScenarios.inputNoShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - no shipping post code
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - No Shipping Post Code");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Please enter a valid zip code/postcode or state.", shoppingCartPage.getShopCartPageShipSingularInputAlert(), "The shopping cart page missing shipping post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The missing shipping post code error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - No Shipping Post Code");
    }

    //too short singular input

    //add product(products) from shopping cart to check out test method - too short shipping city (1 char)
    protected void invalidAddProductToCheckoutTooShortShipCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input too short shipping city into shipping city input field (1 char)
        shoppingCartPageInvalidScenarios.inputTooShortShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - too short shipping city
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - Too Short Shipping City");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("City is too short.", shoppingCartPage.getShopCartPageShipSingularInputError(), "The shopping cart page too short shipping city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short shipping city error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - Too Short Shipping City");
    }

    //add product(products) from shopping cart to check out test method - too short shipping post code (4 digits)
    protected void invalidAddProductToCheckoutTooShortShipPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input too short shipping post code into shipping post code input field (4 digits)
        shoppingCartPageInvalidScenarios.inputTooShortShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - too short shipping post code
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - Too Short Shipping Post Code");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Please enter a valid zip code/postcode.", shoppingCartPage.getShopCartPageShipSingularInputAlert(), "The shopping cart page too short shipping post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too short shipping post code error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - Too Short Shipping Post Code");
    }

    //too long singular input

    //add product(products) from shopping cart to check out test method - too long shipping city (100 chars)
    protected void invalidAddProductToCheckoutTooLongShipCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input too long shipping city into shipping city input field (100 chars)
        shoppingCartPageInvalidScenarios.inputTooLongShippingCityIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - too long shipping city
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - Too Long Shipping City");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("City is too long.", shoppingCartPage.getShopCartPageShipSingularInputError(), "The shopping cart page too long shipping city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long shipping city error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - Too Long Shipping City");
    }

    //add product(products) from shopping cart to check out test method - too long shipping post code (6 digits)
    protected void invalidAddProductToCheckoutTooLongShipPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input too long shipping post code into shipping post code input field (6 digits)
        shoppingCartPageInvalidScenarios.inputTooLongShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - too long shipping post code
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - Too Long Shipping Post Code");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Please enter a valid zip code/postcode.", shoppingCartPage.getShopCartPageShipSingularInputAlert(), "The shopping cart page too long shipping post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The too long shipping post code error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - Too Long Shipping Post Code");
    }

    //invalid singular input format

    //add product(products) from shopping cart to check out test method - invalid shipping city format (special symbols only)
    protected void invalidAddProductToCheckoutInvalidShipCityFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input invalid shipping city format into shipping city input field (special symbols only)
        shoppingCartPageInvalidScenarios.inputInvalidShippingCityFormatIntoShippingCityInputField();
        //input valid shipping post code into shipping post code input field
        shoppingCartPage.inputValidShippingPostCodeIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - invalid shipping city format
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - Invalid Shipping City Format");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("City cannot consist of special symbols only.", shoppingCartPage.getShopCartPageShipSingularInputError(), "The shopping cart page invalid shipping city input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid shipping city input format error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - Invalid Shipping City Format");
    }

    //add product(products) from shopping cart to check out test method - invalid shipping post code format (special symbols only)
    protected void invalidAddProductToCheckoutInvalidShipPostCodeFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        ShoppingCartPage shoppingCartPage = new ShoppingCartPage(driver);
        ShoppingCartPageInvalidScenarios shoppingCartPageInvalidScenarios = new ShoppingCartPageInvalidScenarios(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //shopping cart page web element assert
        isShoppingCartPageWebElementDisplayed(shoppingCartPage);
        //shopping cart page text element assert
        isShoppingCartPageTextElementAsExpected(shoppingCartPage);
        //account dashboard page breadcrumb web element assert
        isAccountDashboardPageBreadcrumbWebElementDisplayed(accountDashboardPage);
        //capture screenshot of shopping cart page display
        captureScreenshot(driver, "Shopping Cart Page Display");
        //log shopping cart data (before shipping application)
        logShoppingCartPageProductData(shoppingCartPage);
        //click shipping "Add info" link
        shoppingCartPage.clickAddInfoLink();
        //capture screenshot of shopping cart page shipping section display before data input
        captureScreenshot(driver, "Shipping Method Section Display Before Data Input (shopping cart)");
        //shopping cart page shipping section web element assert
        isShoppingCartPageShipSectionWebElementDisplayed(shoppingCartPage);
        //shopping cart page shipping section text element assert
        isShoppingCartShipSectionTextElementAsExpected(shoppingCartPage);
        //click shipping country dropdown menu
        shoppingCartPage.clickCountryDropdownMenu();
        //select "United States" option
        shoppingCartPage.selectUSCountryOption();
        //input valid shipping city into shipping city input field
        shoppingCartPage.inputValidShippingCityIntoShippingCityInputField();
        //input invalid shipping post code format into shipping post code input field (special symbol only)
        shoppingCartPageInvalidScenarios.inputInvalidShippingPostCodeFormatIntoShippingPostCodeInputField();
        //click shipping state dropdown menu
        shoppingCartPage.clickStateDropdownMenu();
        //select "Illinois" state option
        shoppingCartPage.selectIllinoisStateOption();
        //capture screenshot of shopping cart page shipping section display after invalid data input - invalid shipping post code
        captureScreenshot(driver, "Shipping Method Section Display After Invalid Data Input (shopping cart) - Invalid Shipping Post Code Format");
        //click "Estimate shipping" button
        shoppingCartPage.clickEstimateShippingButton();
        //assert the user gets expected error message, log the issue otherwise
        try {
            assertEquals("Please enter a valid zip code/postcode.", shoppingCartPage.getShopCartPageShipSingularInputAlert(), "The shopping cart page invalid shipping post code input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The invalid shipping post code input format error wasn't triggered, test has failed.");
        }
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //click "Checkout" button
        shoppingCartPage.clickCheckoutButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Add Product (Products) To Checkout Test Result - Invalid Shipping Post Code Format");
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid checkout tests

    //valid guest checkout test method (both single and multiple products will share the same method)
    protected void validGuestProductOrderCheckoutTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //valid guest payment section input data getter
        checkoutPageGuestValidCheckout.validGuestPaymentInputDataGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestValidCheckout.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestValidCheckout.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestValidCheckout.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestValidCheckout.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Valid Guest Data Input");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //checkout page order confirmation section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageConfirmationSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout confirmation section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageConfirmationSectionTextElementAsExpected(checkoutPage);
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid Guest Product Order Checkout Confirmation Test");
    }

    //valid registered user checkout test method (both single and multiple products will share the same method) => (during automation run, the webpage doesn't keep any address input data during account creation so it has to be re-input, while during manual testing, the webpage saves the input address data)
    protected void validRegUserProductOrderCheckoutTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageRegUserValidCheckout checkoutPageRegUserValidCheckout = new CheckoutPageRegUserValidCheckout(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input (registered user)");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid registered user shipping address input data getter
        checkoutPageRegUserValidCheckout.validRegUserShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input (registered user)");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid registered user shipping address first name into first name input field
        checkoutPageRegUserValidCheckout.inputValidRegUserShipAddressFirstNameIntoFirstNameInputField();
        //input valid registered user shipping address last name into last name input field
        checkoutPageRegUserValidCheckout.inputValidRegUserShipAddressLastNameIntoLastNameInputField();
        //input valid registered user shipping address into shipping address input field
        checkoutPageRegUserValidCheckout.inputValidRegUserShipAddressIntoAddressInputField();
        //input valid registered user shipping address phone into phone input field
        checkoutPageRegUserValidCheckout.inputValidRegUserShipPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Registered User Data Input");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input (registered user)");
        //valid registered user payment section input data getter
        checkoutPageRegUserValidCheckout.validRegUserPaymentSectionInputDataGetter();
        //input valid registered user credit card number into credit card number input field (only a set test number works)
        checkoutPageGuestValidCheckout.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid registered user credit card expiration date into credit card expiration date input field
        checkoutPageRegUserValidCheckout.inputValidRegUserCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid registered user credit card name into credit card name input field
        checkoutPageRegUserValidCheckout.inputValidRegUserCreditCardNameIntoCreditCardNameInputField();
        //input valid registered user credit card CVV number into credit card CVV number input field
        checkoutPageRegUserValidCheckout.inputValidRegUserCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Valid Registered User Data Input");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //wait for element to load
        generalPage.waitForElementsToLoad();
        //checkout page order confirmation section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageConfirmationSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout confirmation section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageConfirmationSectionTextElementAsExpected(checkoutPage);
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Valid Registered User Product Order Checkout Confirmation Test");
    }

    //invalid guest checkout tests (registered user will have the same output, so only guest branch is being tested to avoid redundancy)

    //no singular input

    //invalid guest checkout test method - no guest email
    protected void invalidGuestProductOrderCheckoutNoGuestEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //invalid guest email input data getter - no guest email
        checkoutPageGuestNoSingularInput.invalidGuestNoEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //don't input guest email into checkout email input field
        checkoutPageGuestNoSingularInput.inputNoGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after invalid data input - no guest email
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Invalid Guest Data Input - No Guest Email");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //assert the user gets an expected error
        assertEquals("Email address is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page checkout section missing guest email input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Email");
    }

    //invalid guest checkout test method - no guest shipping address country
    protected void invalidGuestProductOrderCheckoutNoGuestCountryTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "Select a country" shipping country option
        checkoutPage.selectShipSelectCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping country
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No Shipping Country");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("Country is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing first name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping Country");
    }

    //invalid guest checkout test method - no guest shipping address first name
    protected void invalidGuestProductOrderCheckoutNoGuestFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - no guest shipping first name
        checkoutPageGuestNoSingularInput.invalidGuestShipAddressInputDataNoFirstNameGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //don't input guest shipping address first name into first name input field
        checkoutPageGuestNoSingularInput.inputNoShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping first name
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No First Name");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("First Name is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing first name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping First Name");
    }

    //invalid guest checkout test method - no guest shipping address last name
    protected void invalidGuestProductOrderCheckoutNoGuestLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - no guest shipping last name
        checkoutPageGuestNoSingularInput.invalidGuestShipAddressInputDataNoLastNameGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //don't input guest shipping address last name into last name input field
        checkoutPageGuestNoSingularInput.inputNoShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping last name
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No Last Name");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("Last Name is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing last name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping Last Name");
    }

    //invalid guest checkout test method - no guest shipping address
    protected void invalidGuestProductOrderCheckoutNoGuestAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - no guest shipping address
        checkoutPageGuestNoSingularInput.invalidGuestShipAddressInputDataNoAddressGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //don't input guest shipping address into shipping address input field
        checkoutPageGuestNoSingularInput.inputNoShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping address
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No Address");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("Address is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing address input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping Address");
    }

    //invalid guest checkout test method - no guest shipping address city
    protected void invalidGuestProductOrderCheckoutNoGuestCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - no guest shipping city
        checkoutPageGuestNoSingularInput.invalidGuestShipAddressInputDataNoCityGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //don't input valid guest shipping city into shipping city input field
        checkoutPageGuestNoSingularInput.inputNoShippingGuestCityIntoCityInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping city
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No City");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section missing city input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping City");
    }

    //invalid guest checkout test method - no guest shipping address post code
    protected void invalidGuestProductOrderCheckoutNoGuestPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - no guest shipping post code
        checkoutPageGuestNoSingularInput.invalidGuestShipAddressInputDataNoPostCodeGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //don't input valid guest shipping post code into shipping city input field
        checkoutPageGuestNoSingularInput.inputNoShippingGuestPostCodeIntoPostCodeInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping post code
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No Post Code");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section missing post code input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping Post Code");
    }

    //invalid guest checkout test method - no guest shipping address phone
    protected void invalidGuestProductOrderCheckoutNoGuestPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - no guest shipping phone
        checkoutPageGuestNoSingularInput.invalidGuestShipAddressInputDataNoPhoneGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //don't input guest shipping address phone into phone input field
        checkoutPageGuestNoSingularInput.inputNoShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping phone
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No Phone");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section missing phone input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping Phone");
    }

    //invalid guest checkout test method - no guest shipping address state
    protected void invalidGuestProductOrderCheckoutNoGuestStateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section state dropdown menu
        checkoutPage.clickShipAddressSectionStateDropdownMenu();
        //select "Select a state" shipping state option
        checkoutPage.selectShipSelectStateOption();
        //capture screenshot of the checkout page shipping address section display after invalid data input - no guest shipping state
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - No Shipping State");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("State/Province is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section missing state input error doesn't match expectations or the error wasn't triggered.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section missing state input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Shipping State");
    }

    //invalid guest checkout test method - no guest billing address country
    protected void invalidGuestProductOrderCheckoutNoBillGuestCountryTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "Select a country" billing country option
        checkoutPage.selectBillSelectCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing country
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing Country");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("Country is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing country input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing Country");
    }

    //invalid guest checkout test method - no guest billing address first name
    protected void invalidGuestProductOrderCheckoutNoBillGuestFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - no guest billing first name
        checkoutPageGuestNoSingularInput.invalidGuestBillAddressInputDataNoFirstNameGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //don't input guest billing address first name into first name input field
        checkoutPageGuestNoSingularInput.inputNoBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing first name
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing First Name");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("First Name is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing first name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing First Name");
    }

    //invalid guest checkout test method - no guest billing address last name
    protected void invalidGuestProductOrderCheckoutNoBillGuestLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - no guest billing last name
        checkoutPageGuestNoSingularInput.invalidGuestBillAddressInputDataNoLastNameGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //don't input guest billing address last name into last name input field
        checkoutPageGuestNoSingularInput.inputNoBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing last name
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing Last Name");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("Last Name is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing last name input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing Last Name");
    }

    //invalid guest checkout test method - no guest billing address
    protected void invalidGuestProductOrderCheckoutNoBillGuestAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - no guest billing address
        checkoutPageGuestNoSingularInput.invalidGuestBillAddressInputDataNoAddressGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //don't input guest billing address into shipping address input field
        checkoutPageGuestNoSingularInput.inputNoBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing address
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing Address");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("Address is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing address input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing Address");
    }

    //invalid guest checkout test method - no guest billing city
    protected void invalidGuestProductOrderCheckoutNoBillGuestCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - no guest billing city
        checkoutPageGuestNoSingularInput.invalidGuestBillAddressInputDataNoCityGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //don't input guest billing address city into city input field
        checkoutPageGuestNoSingularInput.inputNoBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing city
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing City");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section missing city input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing City");
    }

    //invalid guest checkout test method - no guest billing post code
    protected void invalidGuestProductOrderCheckoutNoBillGuestPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - no guest billing post code
        checkoutPageGuestNoSingularInput.invalidGuestBillAddressInputDataNoPostCodeGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //don't input guest billing address post code into post code input field
        checkoutPageGuestNoSingularInput.inputNoBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing post code
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing Post Code");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Postal Code is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section missing post code input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing Post Code");
    }

    //invalid guest checkout test method - no guest billing phone
    protected void invalidGuestProductOrderCheckoutNoBillGuestPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - no guest billing phone
        checkoutPageGuestNoSingularInput.invalidGuestBillAddressInputDataNoPhoneGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestNoSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //don't input guest billing address phone into phone input field
        checkoutPageGuestNoSingularInput.inputNoBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing phone
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing Phone");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section missing phone input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing Phone");
    }

    //invalid guest checkout test method - no guest billing address state
    protected void invalidGuestProductOrderCheckoutNoBillGuestStateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "Select a country" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //click billing address section state dropdown menu
        checkoutPage.clickBillAddressSectionStateDropdownMenu();
        //select "Select a state" billing state option
        checkoutPage.selectBillSelectStateOption();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no guest billing state
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - No Billing State");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error
        assertEquals("State/Province is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section missing state input error doesn't match expectations or the error wasn't triggered.");
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Billing State");
    }

    //invalid guest checkout test method - no guest payment credit card number
    protected void invalidGuestProductOrderCheckoutNoPayGuestCredCardNumberTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - no test credit card number
        checkoutPageGuestNoSingularInput.invalidGuestPaymentInputDataNoCredCardNumberGetter();
        //don't input valid guest credit card number into credit card number input field
        checkoutPageGuestNoSingularInput.inputNoPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no credit card number
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - No Credit Card Number");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit Card Number is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section missing credit card number input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section missing credit card number input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Credit Card Number");
    }

    //invalid guest checkout test method - no guest payment credit card expiration date
    protected void invalidGuestProductOrderCheckoutNoPayGuestCredCardExpDateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - no credit card expiration date
        checkoutPageGuestNoSingularInput.invalidGuestPaymentInputDataNoCredCardExpDateGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestNoSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //don't input guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestNoSingularInput.inputNoPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no credit card expiration date
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - No Credit Card Exp Date");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Expiration Date is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section missing credit card expiration date input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section missing credit card expiration date input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Credit Card Exp Date");
    }

    //invalid guest checkout test method - no guest payment credit card name
    protected void invalidGuestProductOrderCheckoutNoPayGuestCredCardNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - no credit card name
        checkoutPageGuestNoSingularInput.invalidGuestPaymentInputDataNoCreditCardNameGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestNoSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //don't input guest credit card name into credit card name input field
        checkoutPageGuestNoSingularInput.inputNoPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no credit card name
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - No Credit Card Name");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Full name is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section missing credit card name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section missing credit card name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Credit Card Name");
    }

    //invalid guest checkout test method - no guest payment credit card CVV number
    protected void invalidGuestProductOrderCheckoutNoPayGuestCredCardCVVTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestNoSingularInput checkoutPageGuestNoSingularInput = new CheckoutPageGuestNoSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - no credit card CVV number
        checkoutPageGuestNoSingularInput.invalidGuestPaymentInputDataNoCVVGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestNoSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestNoSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //don't input guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestNoSingularInput.inputNoPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - no credit card CVV number
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - No Credit Card CVV Number");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("CVV number is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section missing credit card CVV number input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section missing credit card CVV number input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - No Guest Credit Card CVV Number");
    }

    //too short singular input

    //invalid guest checkout test method - too short guest email (1 char -> name, domain)
    protected void invalidGuestProductOrderCheckoutTooShortGuestEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //invalid guest email input data getter - too short guest email (1 char -> name, domain)
        checkoutPageGuestTooShortSingularInput.invalidGuestTooShortEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input too short guest email into checkout email input field (1 char -> name, domain)
        checkoutPageGuestTooShortSingularInput.inputTooShortGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after invalid data input - too short guest email
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Invalid Guest Data Input - Too Short Guest Email");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Email address is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page checkout section too short email input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page checkout section too short email input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Email");
    }

    //invalid guest checkout test method - too short guest shipping address first name (1 char)
    protected void invalidGuestProductOrderCheckoutTooShortGuestShipFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too short guest shipping first name (1 char)
        checkoutPageGuestTooShortSingularInput.invalidGuestShipAddressInputDataTooShortFirstNameGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input too short guest shipping address first name into first name input field (1 char)
        checkoutPageGuestTooShortSingularInput.inputTooShortShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too short guest shipping first name
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Short First Name");
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too short first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too short first name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Shipping First Name");
    }

    //invalid guest checkout test method - too short guest shipping address last name (1 char)
    protected void invalidGuestProductOrderCheckoutTooShortGuestShipLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too short guest shipping last name (1 char)
        checkoutPageGuestTooShortSingularInput.invalidGuestShipAddressInputDataTooShortLastNameGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input too short guest shipping address last name into last name input field (1 char)
        checkoutPageGuestTooShortSingularInput.inputTooShortShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too short guest shipping last name
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Short Last Name");
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too short last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too short last name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Shipping Last Name");
    }

    //invalid guest checkout test method - too short guest shipping address (3 chars)
    protected void invalidGuestProductOrderCheckoutTooShortGuestShipAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too short guest shipping address (3 chars)
        checkoutPageGuestTooShortSingularInput.invalidGuestShipAddressInputDataTooShortAddressGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input too short guest shipping address into shipping address input field (3 chars)
        checkoutPageGuestTooShortSingularInput.inputTooShortShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too short guest shipping address
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Short Address");
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too short address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too short address input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Shipping Address");
    }

    //invalid guest checkout test method - too short guest shipping city (1 char)
    protected void invalidGuestProductOrderCheckoutTooShortGuestShipCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too short guest shipping city (1 char)
        checkoutPageGuestTooShortSingularInput.invalidGuestShipAddressInputDataTooShortCityGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input too short guest shipping city into shipping city input field (1 char)
        checkoutPageGuestTooShortSingularInput.inputTooShortShippingGuestCityIntoCityInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too short guest shipping city
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Short City");
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too short city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too short city input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Shipping City");
    }

    //invalid guest checkout test method - too short guest shipping post code (4 digits)
    protected void invalidGuestProductOrderCheckoutTooShortGuestShipPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too short guest shipping post code (4 digits)
        checkoutPageGuestTooShortSingularInput.invalidGuestShipAddressInputDataTooShortPostCodeGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input too short guest shipping post code into shipping post code input field (4 digits)
        checkoutPageGuestTooShortSingularInput.inputTooShortShippingGuestPostCodeIntoPostCodeInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too short guest shipping post code
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Short Post Code");
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Zip/Postcode is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too short post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too short post code input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Shipping Post Code");
    }

    //invalid guest checkout test method - too short guest shipping phone (2 digits)
    protected void invalidGuestProductOrderCheckoutTooShortGuestShipPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too short guest shipping post code (2 digits)
        checkoutPageGuestTooShortSingularInput.invalidGuestShipAddressInputDataTooShortPhoneGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input too short guest shipping address phone into phone input field (2 digits)
        checkoutPageGuestTooShortSingularInput.inputTooShortShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too short guest shipping phone
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Short Phone");
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too short phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too short phone input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Shipping Phone");
    }

    //invalid guest checkout test method - too short guest billing address first name (1 char)
    protected void invalidGuestProductOrderCheckoutTooShortBillGuestFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too short guest billing first name (1 char)
        checkoutPageGuestTooShortSingularInput.invalidGuestBillAddressInputDataTooShortFirstNameGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input too short guest billing address first name into first name input field (1 char)
        checkoutPageGuestTooShortSingularInput.inputTooShortBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short guest billing first name
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Short Billing First Name");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First Name is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too short first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too short first name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Billing First Name");
    }

    //invalid guest checkout test method - too short guest billing address last name (1 char)
    protected void invalidGuestProductOrderCheckoutTooShortBillGuestLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too short guest billing last name (1 char)
        checkoutPageGuestTooShortSingularInput.invalidGuestBillAddressInputDataTooShortLastNameGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input too short guest billing address last name into last name input field (1 char)
        checkoutPageGuestTooShortSingularInput.inputTooShortBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short guest billing last name
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Short Billing Last Name");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last Name is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too short last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too short last name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Billing Last Name");
    }

    //invalid guest checkout test method - too short guest billing address (3 chars)
    protected void invalidGuestProductOrderCheckoutTooShortBillGuestAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too short guest billing address (3 chars)
        checkoutPageGuestTooShortSingularInput.invalidGuestBillAddressInputDataTooShortAddressGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input too short guest billing address into shipping address input field (3 chars)
        checkoutPageGuestTooShortSingularInput.inputTooShortBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short guest billing address
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Short Billing Address");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too short address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too short address input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Billing Address");
    }

    //invalid guest checkout test method - too short guest billing city (1 char)
    protected void invalidGuestProductOrderCheckoutTooShortBillGuestCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too short guest billing city (1 char)
        checkoutPageGuestTooShortSingularInput.invalidGuestBillAddressInputDataTooShortCityGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input too short guest billing address city into city input field (1 char)
        checkoutPageGuestTooShortSingularInput.inputTooShortBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short guest billing city
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Short Billing City");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too short city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too short city input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Billing City");
    }

    //invalid guest checkout test method - too short guest billing post code (4 digits)
    protected void invalidGuestProductOrderCheckoutTooShortBillGuestPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too short guest billing post code (4 digits)
        checkoutPageGuestTooShortSingularInput.invalidGuestBillAddressInputDataTooShortPostCodeGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input too short guest billing address post code into post code input field (4 digits)
        checkoutPageGuestTooShortSingularInput.inputTooShortBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short guest billing post code
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Short Billing Post Code");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Zip/Post code is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too short post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too short post code input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Billing Post Code");
    }

    //invalid guest checkout test method - too short guest billing phone (2 digits)
    protected void invalidGuestProductOrderCheckoutTooShortBillGuestPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too short guest billing phone (2 digits)
        checkoutPageGuestTooShortSingularInput.invalidGuestBillAddressInputDataTooShortPhoneGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooShortSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input too short guest billing address phone into phone input field (2 digits)
        checkoutPageGuestTooShortSingularInput.inputTooShortBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short guest billing phone
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Short Billing Phone");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too short phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too short phone input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Billing Phone");
    }

    //invalid guest checkout test method - too short guest payment credit card number (15 digits)
    protected void invalidGuestProductOrderCheckoutTooShortPayGuestCredCardNumberTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too short test credit card number (15 digits)
        checkoutPageGuestTooShortSingularInput.invalidGuestPaymentInputDataTooShortCredCardNumberGetter();
        //input too short guest credit card number into credit card number input field (15 digits)
        checkoutPageGuestTooShortSingularInput.inputTooShortPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short credit card number (15 digits)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Short Credit Card Number");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit Card Number must be valid", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too short credit card number input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too short credit card number input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Credit Card Number");
    }

    //invalid guest checkout test method - too short guest payment credit card expiration date (3 digits)
    protected void invalidGuestProductOrderCheckoutTooShortPayGuestCredCardExpDateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too short test credit card expiration date (3 digits)
        checkoutPageGuestTooShortSingularInput.invalidGuestPaymentInputDataTooShortCredCardExpDateGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input too short guest credit card expiration date into credit card expiration date input field (3 digits)
        checkoutPageGuestTooShortSingularInput.inputTooShortPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short credit card expiration date (3 digits)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Short Credit Card Exp Date");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Expiration date must be a valid future date in MM / YY format", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too short credit card expiration date input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too short credit card expiration date input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Credit Card Expiration Date");
    }

    //invalid guest checkout test method - too short guest payment credit card name (1 char)
    protected void invalidGuestProductOrderCheckoutTooShortPayGuestCredCardNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too short test credit card name (1 char)
        checkoutPageGuestTooShortSingularInput.invalidGuestPaymentInputDataTooShortCreditCardNameGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input too short guest credit card name into credit card name input field (1 char)
        checkoutPageGuestTooShortSingularInput.inputTooShortPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short credit card name (1 char)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Short Credit Card Name");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit card name is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too short credit card name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too short credit card name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Credit Card Name");
    }

    //invalid guest checkout test method - too short guest payment credit card CVV number (2 digits)
    protected void invalidGuestProductOrderCheckoutTooShortPayGuestCredCardCVVTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooShortSingularInput checkoutPageGuestTooShortSingularInput = new CheckoutPageGuestTooShortSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too short test credit card CVV number (2 digits)
        checkoutPageGuestTooShortSingularInput.invalidGuestPaymentInputDataTooShortCVVGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestTooShortSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input too short guest credit card CVV number into credit card CVV number input field (2 digits)
        checkoutPageGuestTooShortSingularInput.inputTooShortPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too short credit card CVV number (2 digits)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Short Credit Card CVV Number");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit card CVV number is too short.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too short credit card CVV number input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too short credit card CVV number input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Short Guest Credit Card CVV Number");
    }

    //too long singular input

    //invalid guest checkout test method - too long guest email (100 chars -> name, domain)
    protected void invalidGuestProductOrderCheckoutTooLongGuestEmailTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //invalid guest email input data getter - too long guest email (100 chars -> name, domain)
        checkoutPageGuestTooLongSingularInput.invalidGuestTooLongEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input too long guest email into checkout email input field (100 chars -> name, domain)
        checkoutPageGuestTooLongSingularInput.inputTooLongGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after invalid data input - too long guest email
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Invalid Guest Data Input - Too Long Guest Email");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Email address is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page checkout section too long email input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page checkout section too long email input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Email");
    }

    //invalid guest checkout test method - too long guest shipping address first name (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongGuestShipFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too long guest shipping first name (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestShipAddressInputDataTooLongFirstNameGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input too long guest shipping address first name into first name input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too long guest shipping first name
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Long First Name");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too long first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too long first name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Shipping First Name");
    }

    //invalid guest checkout test method - too long guest shipping address last name (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongGuestShipLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too long guest shipping last name (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestShipAddressInputDataTooLongLastNameGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input too long guest shipping address last name into last name input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too long guest shipping last name
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Long Last Name");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too long last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too long last name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Shipping Last Name");
    }

    //invalid guest checkout test method - too long guest shipping address (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongGuestShipAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too long guest shipping address (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestShipAddressInputDataTooLongAddressGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input too long guest shipping address into shipping address input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too long guest shipping address
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Long Address");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too long address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too long address input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Shipping Address");
    }

    //invalid guest checkout test method - too long guest shipping city (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongGuestShipCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too long guest shipping city (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestShipAddressInputDataTooLongCityGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input too long guest shipping city into shipping city input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongShippingGuestCityIntoCityInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too long guest shipping city
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Long City");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too long city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too long city input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Shipping City");
    }

    //invalid guest checkout test method - too long guest shipping post code (6 digits)
    protected void invalidGuestProductOrderCheckoutTooLongGuestShipPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too long guest shipping post code (6 digits)
        checkoutPageGuestTooLongSingularInput.invalidGuestShipAddressInputDataTooLongPostCodeGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input too long guest shipping post code into shipping post code input field (6 digits)
        checkoutPageGuestTooLongSingularInput.inputTooLongShippingGuestPostCodeIntoPostCodeInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too long guest shipping post code
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Long Post Code");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Zip/Postcode is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too long post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too long post code input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Shipping Post Code");
    }

    //invalid guest checkout test method - too long guest shipping phone (30 digits)
    protected void invalidGuestProductOrderCheckoutTooLongGuestShipPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - too long guest shipping phone (30 digits)
        checkoutPageGuestTooLongSingularInput.invalidGuestShipAddressInputDataTooLongPhoneGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidShippingGuestAddressIntoAddressInputField();
        //input too long guest shipping address phone into phone input field (30 digits)
        checkoutPageGuestTooLongSingularInput.inputTooLongShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - too long guest shipping phone
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Too Long Phone");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section too long phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section too long phone input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Shipping Phone");
    }

    //invalid guest checkout test method - too long guest billing address first name (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongBillGuestFirstNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too long guest billing first name (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestBillAddressInputDataTooLongFirstNameGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input too long guest billing address first name into first name input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long guest billing first name
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Long Billing First Name");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First Name is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too long first name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too long first name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Billing First Name");
    }

    //invalid guest checkout test method - too long guest billing address last name (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongBillGuestLastNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too long guest billing last name (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestBillAddressInputDataTooLongLastNameGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input too long guest billing address last name into last name input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long guest billing last name
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Long Billing Last Name");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last Name is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too long last name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too long last name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Billing Last Name");
    }

    //invalid guest checkout test method - too long guest billing address (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongBillGuestAddressTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too long guest billing address (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestBillAddressInputDataTooLongAddressGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input too long guest billing address into shipping address input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long guest billing address
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Long Billing Address");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too long address input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too long address input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Billing Address");
    }

    protected void invalidGuestProductOrderCheckoutTooLongBillGuestCityTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too long guest billing city (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestBillAddressInputDataTooLongCityGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input too long guest billing address city into city input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long guest billing city
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Long Billing City");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too long city input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too long city input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Billing City");
    }

    //invalid guest checkout test method - too long guest billing post code (6 digits)
    protected void invalidGuestProductOrderCheckoutTooLongBillGuestPostCodeTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too long guest billing post code (6 digits)
        checkoutPageGuestTooLongSingularInput.invalidGuestBillAddressInputDataTooLongPostCodeGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input too long guest billing address post code into post code input field (6 digits)
        checkoutPageGuestTooLongSingularInput.inputTooLongBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long guest billing post code
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Long Billing Post Code");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Zip/Postcode is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too long post code input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too long post code input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Billing Post Code");
    }

    //invalid guest checkout test method - too long guest billing phone (30 digits)
    protected void invalidGuestProductOrderCheckoutTooLongBillGuestPhoneTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - too long guest billing phone (300 digits)
        checkoutPageGuestTooLongSingularInput.invalidGuestBillAddressInputDataTooLongPhoneGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestTooLongSingularInput.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input too long guest billing address phone into phone input field (300 digits)
        checkoutPageGuestTooLongSingularInput.inputTooLongBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long guest billing phone
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Too Long Billing Phone");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number is too long.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section too long phone input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section too long phone input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Billing Phone");
    }

    //invalid guest checkout test method - too long guest payment credit card number (17 digits)
    protected void invalidGuestProductOrderCheckoutTooLongPayGuestCredCardNumberTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too long test credit card number (17 digits)
        checkoutPageGuestTooLongSingularInput.invalidGuestPaymentInputDataTooLongCredCardNumberGetter();
        //input too long guest credit card number into credit card number input field (17 digits)
        checkoutPageGuestTooLongSingularInput.inputTooLongPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long credit card number (17 digits)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Long Credit Card Number");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit Card Number must be valid", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too long credit card number input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too long credit card number input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Credit Card Number");
    }

    //invalid guest checkout test method - too long guest payment credit card expiration date (5 digits)
    protected void invalidGuestProductOrderCheckoutTooLongPayGuestCredCardExpDateTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too long test credit card expiration date (5 digits)
        checkoutPageGuestTooLongSingularInput.invalidGuestPaymentInputDataTooLongCredCardExpDateGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input too long guest credit card expiration date into credit card expiration date input field (5 digits)
        checkoutPageGuestTooLongSingularInput.inputTooLongPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long credit card expiration date (5 digits)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Long Credit Card Exp Date");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Expiration date must be a valid future date in MM / YY format", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too long credit card expiration date input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too long credit card expiration date input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Credit Card Exp Date");
    }

    //invalid guest checkout test method - too long guest payment credit card name (100 chars)
    protected void invalidGuestProductOrderCheckoutTooLongPayGuestCredCardNameTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too long test credit card expiration date (100 chars)
        checkoutPageGuestTooLongSingularInput.invalidGuestPaymentInputDataTooLongCreditCardNameGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input too long guest credit card name into credit card name input field (100 chars)
        checkoutPageGuestTooLongSingularInput.inputTooLongPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long credit card name (100 chars)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Long Credit Card Name");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit card name is too long", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too long credit card name input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too long credit card name input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Credit Card Name");
    }

    //invalid guest checkout test method - too long guest payment credit card CVV number (4 digits)
    protected void invalidGuestProductOrderCheckoutTooLongPayGuestCredCardCVVTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestTooLongSingularInput checkoutPageGuestTooLongSingularInput = new CheckoutPageGuestTooLongSingularInput(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - too long test credit card CVV number (4 digits)
        checkoutPageGuestTooLongSingularInput.invalidGuestPaymentInputDataTooLongCVVGetter();
        //input valid guest credit card number into credit card number input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestTooLongSingularInput.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input too long guest credit card CVV number into credit card CVV number input field (4 digits)
        checkoutPageGuestTooLongSingularInput.inputTooLongPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - too long credit card CVV number (4 digits)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Too Long Credit Card CVV Number");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit card CVV number is too long", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section too long credit card CVV number input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section too long credit card CVV number input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Too Long Guest Credit Card CVV Number");
    }

    //invalid singular input format

    //invalid guest checkout test method - invalid guest email format (missing '@')
    protected void invalidGuestProductOrderCheckoutInvalidGuestEmailFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //invalid guest email input data getter - invalid guest email format (missing '@')
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestInputDataInvalidEmailFormatGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input invalid guest email format into checkout email input field (missing '@')
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidGuestEmailFormatIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after invalid data input - invalid guest email format
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Invalid Guest Data Input - Invalid Guest Email Format");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Email address must be valid", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page checkout section invalid email input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page checkout section invalid email format input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Email Format");
    }

    //invalid guest checkout test method - invalid guest shipping address first name format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidGuestShipFirstNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - invalid guest shipping first name format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestShipAddressInputDataInvalidFirstNameFormatGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input invalid guest shipping address first name format into first name input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidShippingGuestFirstNameFormatIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - invalid guest shipping first name format
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Invalid First Name Format");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First name cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section invalid first name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section invalid first name input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Shipping First Name Format");
    }

    //invalid guest checkout test method - invalid guest shipping address last name format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidGuestShipLastNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - invalid guest shipping last name format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestShipAddressInputDataInvalidLastNameFormatGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input invalid guest shipping address last name format into last name input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidShippingGuestLastNameFormatIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - invalid guest shipping last name format
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Invalid Last Name Format");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last name cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section invalid last name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section invalid last name input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Shipping Last Name Format");
    }

    //invalid guest checkout test method - invalid guest shipping address format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidGuestShipAddressFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - invalid guest shipping address format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestShipAddressInputDataInvalidAddressFormatGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input invalid guest shipping address format into shipping address input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidShippingGuestAddressFormatIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - invalid guest shipping address format
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Invalid Address Format");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section invalid address input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section invalid address input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Shipping Address Format");
    }

    //invalid guest checkout test method - invalid guest shipping city format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidGuestShipCityFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - invalid guest shipping city format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestShipAddressInputDataInvalidCityFormatGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestAddressIntoAddressInputField();
        //input invalid guest shipping city format into shipping city input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidShippingGuestCityFormatIntoCityInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - invalid guest shipping city format
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Invalid City Format");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section invalid city input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section invalid city input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Shipping City Format");
    }

    //invalid guest checkout test method - invalid guest shipping post code format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidGuestShipPostCodeFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - invalid guest shipping post code format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestShipAddressInputDataInvalidPostCodeFormatGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestAddressIntoAddressInputField();
        //input invalid guest shipping post code format into shipping post code input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidShippingGuestPostCodeFormatIntoPostCodeInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - invalid guest shipping post code format
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Invalid Post Code Format");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Zip/Postcode cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section invalid post code input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section invalid post code input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Shipping Post Code Format");
    }

    //invalid guest checkout test method - invalid guest shipping phone format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidGuestShipPhoneFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //invalid guest shipping address input data getter - invalid guest shipping phone format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestShipAddressInputDataInvalidPhoneFormatGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidShippingGuestAddressIntoAddressInputField();
        //input invalid guest shipping address phone format into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidShippingGuestPhoneFormatIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after invalid data input - invalid guest shipping phone format
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Invalid Guest Data Input - Invalid Phone Format");
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click "Shipping and Billing address are same" checkbox (to prevent the billing address to be matched with shipping address)
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page shipping address section invalid phone input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page shipping address section invalid phone input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Shipping Phone Format");
    }

    //invalid guest checkout test method - invalid guest billing address first name format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidBillGuestFirstNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - invalid guest billing first name format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestBillAddressInputDataInvalidFirstNameFormatGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input invalid guest billing address first name format into first name input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidBillingGuestFirstNameFormatIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid guest billing first name format
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Invalid Billing First Name Format");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("First Name cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section invalid first name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section invalid first name input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Billing First Name Format");
    }

    //invalid guest checkout test method - invalid guest billing address last name format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidBillGuestLastNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - invalid guest billing last name format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestBillAddressInputDataInvalidLastNameFormatGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input invalid guest billing address last name format into last name input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidBillingGuestLastNameFormatIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid guest billing last name format
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Invalid Billing Last Name Format");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Last Name cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section invalid last name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section invalid last name input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Billing Last Name Format");
    }

    //invalid guest checkout test method - invalid guest billing address format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidBillGuestAddressFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - invalid guest billing address format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestBillAddressInputDataInvalidAddressFormatGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input invalid guest billing address format into shipping address input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidBillingGuestAddressFormatIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid guest billing address format
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Invalid Billing Address Format");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Address cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section invalid address input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section invalid address input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Billing Address Format");
    }

    //invalid guest checkout test method - invalid guest billing city format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidBillGuestCityFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - invalid guest billing city format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestBillAddressInputDataInvalidCityFormatGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestAddressIntoAddressInputField();
        //input invalid guest billing address city format into city input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidBillingGuestCityFormatIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid guest billing city format
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Invalid Billing City Format");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("City cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section invalid city input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section invalid city input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Billing City Format");
    }

    //invalid guest checkout test method - invalid guest billing post code format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidBillGuestPostCodeFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - invalid guest billing post code format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestBillAddressInputDataInvalidPostCodeFormatGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestCityIntoCityInputField();
        //input invalid guest billing address post code format into post code input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidBillingGuestPostCodeFormatIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid guest billing post code format
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Invalid Billing Post Code Format");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Zip/Postcode cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section invalid post code input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section invalid post code input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Billing Post Code Format");
    }

    //invalid guest checkout test method - invalid guest billing phone format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidBillGuestPhoneFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //invalid guest billing address input data getter - invalid guest billing phone format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestBillAddressInputDataInvalidPhoneFormatGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input invalid guest billing address phone format into phone input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidBillingGuestPhoneFormatIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid guest billing phone format
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Invalid Guest Data Input - Invalid Billing Phone Format");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Phone Number cannot consist of special symbols only.", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page billing address section invalid phone input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page billing address section invalid phone input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Billing Phone Format");
    }

    //invalid guest checkout test method - invalid guest payment credit card number (any other than test number)
    protected void invalidGuestProductOrderCheckoutInvalidPayGuestCredCardNumberTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - invalid test credit card number (any other than test number)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestPaymentInputDataInvalidCredCardNumberGetter();
        //input invalid guest credit card number into credit card number input field (any other than test number)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid credit card number format (any other than test number)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Invalid Credit Card Number");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit Card Number must be valid", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section invalid credit card number input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section invalid credit card number format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Credit Card Number");
    }

    //invalid guest checkout test method - invalid guest payment credit card number format (chars only)
    protected void invalidGuestProductOrderCheckoutInvalidPayGuestCredCardNumberFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - invalid test credit card number format (chars only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestPaymentInputDataInvalidCredCardNumberFormatGetter();
        //input invalid guest credit card number format into credit card number input field (chars only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidPaymentTestCreditCardNumberFormatIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid credit card number format (chars only)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Invalid Credit Card Number Format");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit Card Number is required", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section invalid credit card number input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section invalid credit card number input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Credit Card Number Format");
    }

    //invalid guest checkout test method - invalid guest payment credit card expiration date format (chars only)
    protected void invalidGuestProductOrderCheckoutInvalidPayGuestCredCardExpDateFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - invalid test credit card expiration date format (chars only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestPaymentInputDataInvalidCredCardExpDateFormatGetter();
        //input valid guest credit card number format into credit card number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input invalid guest credit card expiration date format into credit card expiration date input field (chars only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidPaymentGuestCreditCardExpDateFormatIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid credit card expiration date format (chars only)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Invalid Credit Card Exp Date Format");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Expiration date must be a valid future date in MM / YY format", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section invalid credit card expiration date input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section invalid credit card expiration date input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Credit Card Exp Date Format");
    }

    //invalid guest checkout test method - reversed guest payment credit card expiration date format
    protected void invalidGuestProductOrderCheckoutReversedPayGuestCredCardExpDateFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - reversed test credit card expiration date format
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestPaymentInputDataReversedCredCardExpDateFormatGetter();
        //input valid guest credit card number format into credit card number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input invalid guest credit card expiration date format into credit card expiration date input field
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidPaymentGuestCreditCardReversedExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - reversed credit card expiration date format
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Reversed Credit Card Exp Date Format");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Expiration date must be a valid future date in MM / YY format", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section reversed credit card expiration date input error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section reversed credit card expiration date input error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Reversed Guest Credit Card Exp Date Format");
    }

    //invalid guest checkout test method - invalid guest payment credit card name format (special symbols only)
    protected void invalidGuestProductOrderCheckoutInvalidPayGuestCredCardNameFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - invalid test credit card name format (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestPaymentInputDataInvalidCreditCardNameFormatGetter();
        //input valid guest credit card number format into credit card number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input invalid guest credit card name format into credit card name input field (special symbols only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidPaymentGuestCreditCardNameFormatIntoCreditCardNameInputField();
        //input valid guest credit card CVV number into credit card CVV number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardCVVIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid credit card name format (special symbols only)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Invalid Credit Card Name Format");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit Card name cannot consist of special symbols only", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section invalid credit card name input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section invalid credit card name input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Credit Card Name Format");
    }

    //invalid guest checkout test method - invalid guest payment credit card CVV number format (chars only)
    protected void invalidGuestProductOrderCheckoutInvalidPayGuestCVVFormatTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        CheckoutPageGuestValidCheckout checkoutPageGuestValidCheckout = new CheckoutPageGuestValidCheckout(driver);
        CheckoutPageGuestInvalidSingularInputFormat checkoutPageGuestInvalidSingularInputFormat = new CheckoutPageGuestInvalidSingularInputFormat(driver);
        //checkout page checkout section web element assert (guest)
        isCheckoutPageCheckoutSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout section text element assert (guest)
        isCheckoutPageCheckoutSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page display before data input
        captureScreenshot(driver, "Checkout Page Display Before Data Input");
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //log order summary data
        logCheckoutPageOrderSummaryProductData(checkoutPage);
        //valid guest email input data getter
        checkoutPageGuestValidCheckout.validGuestEmailInputDataGetter();
        //click 'Privacy policy' checkbox
        checkoutPage.clickCheckoutSectionPrivacyPolicyCheckbox();
        //input valid guest email into checkout email input field
        checkoutPageGuestValidCheckout.inputValidGuestEmailIntoEmailInputField();
        //capture screenshot of the checkout page checkout section display after valid data input
        captureScreenshot(driver, "Checkout Page Checkout Section Display After Valid Guest Data Input");
        //click checkout section "Continue" button
        checkoutPage.clickCheckoutSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page shipping address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page shipping address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageShippingAddressSectionTextElementAsExpected(checkoutPage);
        //valid guest shipping address input data getter
        checkoutPageGuestValidCheckout.validGuestShipAddressInputDataGetter();
        //capture screenshot of the checkout page shipping address section display before data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display Before Data Input");
        //click shipping address section country dropdown menu
        checkoutPage.clickShipAddressSectionCountryDropdownMenu();
        //select "United States" shipping country option
        checkoutPage.selectShipUSCountryOption();
        //input valid guest shipping address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestFirstNameIntoFirstNameInputField();
        //input valid guest shipping address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestLastNameIntoLastNameInputField();
        //input valid guest shipping address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestAddressIntoAddressInputField();
        //input valid guest shipping address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidShippingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page shipping address section display after valid data input
        captureScreenshot(driver, "Checkout Page Shipping Address Section Display After Valid Guest Data Input");
        //click "Shipping and Billing address are same" checkbox
        checkoutPage.clickShipAddressSectionShipBillAddressSameCheckbox();
        //shipping address shipping method section web element assert
        isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(checkoutPage);
        //shipping address shipping method section text element assert
        isCheckoutPageShippingMethodSectionTextElementAsExpected(checkoutPage);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //click shipping address section "Continue" button
        checkoutPage.clickShipAddressSectionContinueButton();
        //checkout page billing address section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionWebElementDisplayed(checkoutPage);
        //checkout page billing address section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageBillingAddressSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page billing address section display before data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display Before Data Input");;
        //valid guest billing address input data getter
        checkoutPageGuestValidCheckout.validGuestBillAddressInputDataGetter();
        //click billing address section country dropdown menu
        checkoutPage.clickBillAddressSectionCountryDropdownMenu();
        //select "United States" billing country option
        checkoutPage.selectBillUSCountryOption();
        //input valid guest billing address first name into first name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestFirstNameIntoFirstNameInputField();
        //input valid guest billing address last name into last name input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestLastNameIntoLastNameInputField();
        //input valid guest billing address into shipping address input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestAddressIntoAddressInputField();
        //input valid guest billing address city into city input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestCityIntoCityInputField();
        //input valid guest billing address post code into post code input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPostCodeIntoPostCodeInputField();
        //input valid guest billing address phone into phone input field
        checkoutPageGuestValidCheckout.inputValidBillingGuestPhoneIntoPhoneInputField();
        //capture screenshot of the checkout page billing address section display after valid data input
        captureScreenshot(driver, "Checkout Page Billing Address Section Display After Valid Guest Data Input");
        //click billing address section "Continue" button
        checkoutPage.clickBillAddressSectionContinueButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page payment section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentSectionWebElementDisplayed(checkoutPage);
        //checkout page payment section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPagePaymentMethodSectionTextElementAsExpected(checkoutPage);
        //capture screenshot of the checkout page payment section display before data input
        captureScreenshot(driver, "Checkout Page Payment Section Display Before Data Input");
        //invalid guest payment section input data getter - invalid test credit card CVV number format (chars only)
        checkoutPageGuestInvalidSingularInputFormat.invalidGuestPaymentInputDataInvalidCVVFormatGetter();
        //input valid guest credit card number format into credit card number input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentTestCreditCardNumberIntoCreditCardNumberInputField();
        //input valid guest credit card expiration date into credit card expiration date input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardExpDateIntoCreditCardExpDateInputField();
        //input valid guest credit card name into credit card name input field
        checkoutPageGuestInvalidSingularInputFormat.inputValidPaymentGuestCreditCardNameIntoCreditCardNameInputField();
        //input invalid guest credit card CVV number format into credit card CVV number input field (chars only)
        checkoutPageGuestInvalidSingularInputFormat.inputInvalidPaymentGuestCreditCardCVVFormatIntoCreditCardCVVInputField();
        //capture screenshot of the checkout page billing address section display after invalid data input - invalid credit card CVV number format (chars only)
        captureScreenshot(driver, "Checkout Page Payment Method Section Display After Invalid Guest Data Input - Invalid Credit Card CVV Number Format");
        //click "Place Order" button
        checkoutPage.clickPaymentSectionPlaceOrderButton();
        //assert the user gets an expected error, log the issue otherwise
        try {
            assertEquals("Credit Card CVV number cannot consist of special symbols only", checkoutPage.getCheckoutPageSingularInputError(), "The checkout page payment section invalid credit card CVV number input format error doesn't match expectations.");
        } catch (Exception e) {
            logger.error("The checkout page payment section invalid credit card CVV number input format error wasn't triggered, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Invalid Guest Product Order Checkout Confirmation Test - Invalid Guest Credit Card CVV Number Format");
    }

 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //order invoice page test (for order submission confirmation => only registered user has this feature since it requires an account)

    //navigate back to homepage (since header home link nor button do appear to work during automation run)
    protected void navigateToHomePageTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        CheckoutPage checkoutPage = new CheckoutPage(driver);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //checkout page order confirmation section web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageConfirmationSectionWebElementDisplayed(checkoutPage);
        //checkout page checkout confirmation section text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isCheckoutPageConfirmationSectionTextElementAsExpected(checkoutPage);
        //checkout page order summary section web element assert
        isCheckoutPageOrderSummarySectionWebElementDisplayed(checkoutPage);
        //checkout page order summary section text element assert
        isCheckoutPageOrderSummarySectionTextElementAsExpected(checkoutPage);
        //click "Continue shopping" button (the header home link nor "Continue shopping" button seem to be working during automation run(manually, everything works))
        checkoutPage.clickConfirmationSectionContinueShoppingButton();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //navigate back to home page (with driver)
        String baseURL = "https://cornerstone-light-demo.mybigcommerce.com/";
        driver.get(baseURL);
        //execute the driver if it doesn't get executed by any reason
        if (!Objects.equals(driver.getCurrentUrl(), baseURL)) {
            driver.get(baseURL);
        }
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //capture screenshot of the home page display (after the user returns to it with driver)
        captureScreenshot(driver, "Home Page Display After Navigating Back with Driver");
    }

    //order invoice page test method
    protected void orderInvoicePageOrderConfirmationTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        AccountDashboardPage accountDashboardPage = new AccountDashboardPage(driver);
        OrderInvoicePage orderInvoicePage = new OrderInvoicePage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //click 'Account' navbar link
        generalPage.clickAccountLink();
        //capture screenshot of the account dashboard page display (by default it's set on "Orders")
        captureScreenshot(driver, "Account Dashboard Page Display After Order Placement");
        //account dashboard page orders section web elements assert
        isAccountDashboardPageOrdersSectionWebElementDisplayed(accountDashboardPage);
        //account dashboard page orders section text elements assert
        isOrdersPageAfterOrderTextElementsAsExpected(accountDashboardPage);
        //log order summary product data (displayed on "Orders" section page of the account dashboard page)
        logAccountDashboardOrdersDisplayedData(accountDashboardPage);
        //click set order number link
        accountDashboardPage.clickSetOrderNumberLink(0);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //order invoice page web element assert
        isOrderInvoicePageWebElementDisplayed(orderInvoicePage);
        //order invoice page text element assert
        isOrderInvoicePageTextElementAsExpected(orderInvoicePage);
        //capture screenshot of the order invoice page display
        captureScreenshot(driver, "Order Invoice Page Display");
        //log order invoice page order data
        logOrderInvoicePageOrderData(orderInvoicePage);
        //capture screenshot of the test result
        captureScreenshot(driver, "Order Submission Confirmation Test Result");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //valid add product review tests (this works only after product purchase)

    //valid add product ("Oak Cheese Grater") review test method (as a registered user)
    protected void addOakGraterProductReviewRegUserTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        AddReviewModalPage addReviewModalPage = new AddReviewModalPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click set product ("Tiered Wire Basket") name link
        homePage.clickMostPopularProductNameLink(3);
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //click 'Write a Review' link
        singleProductPage.clickWriteAReviewLink();
        //add review modal page web element assert (Selenium can't seem to find the elements with VALID selectors)
        //isAddReviewModalPageWebElementDisplayed(addReviewModalPage);
        //add review modal page text element assert (Selenium can't seem to find the elements with VALID selectors)
        //isAddReviewModalPageTextElementAsExpected(addReviewModalPage);
        //capture screenshot of the add review modal page display before guest data input
        captureScreenshot(driver, "Add Review Modal Page Display Before Review Data Input");
        //click "Rating" dropdown menu
        addReviewModalPage.clickRatingDropdownMenu();
        //select set rating review stars
        addReviewModalPage.selectSetReviewRatingStarOption(4);
        //valid guest review input data
        addReviewModalPage.validRegUserReviewInputDataGetter();
        //input valid review title into review subject input field
        addReviewModalPage.inputValidReviewTitleIntoReviewSubjectInputField();
        //input valid review into comments textarea
        addReviewModalPage.inputValidReviewIntoCommentsTextArea();
        //capture screenshot of the add review modal page display after valid guest data input
        captureScreenshot(driver, "Add Review Modal Page Display After Valid Guest Data Input");
        //click 'Submit review' button
        addReviewModalPage.clickSubmitReviewButton();
        //log the issue if the warning message appears //Only customers who have purchased this item can review it.
        if(singleProductPage.getSingleProductPageErrorBoxMessage().equals("Only customers who have purchased this item can review it.")){
            logger.error("The register user cannot leave review onto a purchased item, test has failed");
        }
        //capture screenshot of the test result
        captureScreenshot(driver, "Add Single Category Dashboard Page Set Single (Canvas Laundry Cart (Utility)) Product To Cart Test Result (as a guest)");
    }

    //valid add product ("Canvas Laundry Cart") review test method (as a guest)
    protected void addUtilityLaundryCartProductReviewTest(){
        GeneralPage generalPage = new GeneralPage(driver);
        HomePage homePage = new HomePage(driver);
        SingleCategoryDashboardPage singleCategoryDashboardPage = new SingleCategoryDashboardPage(driver);
        SingleProductPage singleProductPage = new SingleProductPage(driver);
        AddReviewModalPage addReviewModalPage = new AddReviewModalPage(driver);
        //general page web element assert (elements that all pages have)
        isGeneralPageWebElementDisplayed(generalPage);
        //general page text element assert (elements that all pages have)
        isGeneralPageTextElementAsExpected(generalPage);
        //home page web element assert
        isHomePageWebElementDisplayed(homePage);
        //home page text element assert
        isHomePageTextElementAsExpected(homePage);
        //capture screenshot of the home page display
        captureScreenshot(driver, "Home Page Display");
        //log home page product data
        logHomePageProductData(homePage);
        //click header lower navbar "Utility" category link
        generalPage.clickHeaderLowerNavUtilityLink();
        //click "Other" dropdown button
        singleCategoryDashboardPage.clickOtherDropdownButton();
        //single category dashboard page web element assert
        isSingleProductCategoryDashboardPageWebElementDisplayed(singleCategoryDashboardPage);
        //single category dashboard page text element assert
        isSingleCategoryDashboardPageTextElementAsExpected(singleCategoryDashboardPage);
        //log single category dashboard page subtext (these are dynamic, depending on the category)
        logSingleCategoryDashboardPageSubtext(singleCategoryDashboardPage);
        //log single category dashboard page product data
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //capture screenshot of the single category dashboard page display
        captureScreenshot(driver, "Single Category Dashboard Page Display");
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by" newest option
        singleCategoryDashboardPage.selectSortByNewestOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (newest) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Newest' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by bestselling" option
        singleCategoryDashboardPage.selectSortByBestSellingOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (bestselling) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Bestselling' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click "Sort by" dropdown menu
        singleCategoryDashboardPage.clickSortByDropdownMenu();
        //select "Sort by name A to Z" option
        singleCategoryDashboardPage.selectSortByAToZOption();
        //capture screenshot of the single category dashboard page display after selected set sort by (name A to Z) option
        captureScreenshot(driver, "Single Category Dashboard Page Display After Selecting 'Sort By Name A to Z' Option");
        //log single category dashboard page product data (to verify the product list has been sorted)
        logSingleCategoryDashboardPageProductData(singleCategoryDashboardPage);
        //click set product ("Canvas Laundry Cart") name link
        singleCategoryDashboardPage.clickSetProductNameLink(1);
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //single product page web element assert
        isSingleProductPageWebElementDisplayed(singleProductPage);
        //single product page text element assert
        isSingleProductPageTextElementAsExpected(singleProductPage);
        //log single product page data
        logSingleProductPageData(singleProductPage);
        //click 'Write a Review' link
        singleProductPage.clickWriteAReviewLink();
        //wait for elements to load
        generalPage.waitForElementsToLoad();
        //add review modal page web element assert (Selenium can't find these element with VALID selectors -> guest side)
        //isAddReviewModalPageWebElementDisplayed(addReviewModalPage);
        //add review modal page text element assert (Selenium can't find these element with VALID selectors -> guest side)
        //isAddReviewModalPageTextElementAsExpected(addReviewModalPage);
        //capture screenshot of the add review modal page display before guest data input
        captureScreenshot(driver, "Add Review Modal Page Display Before Guest Data Input");
        //click "Rating" dropdown menu
        addReviewModalPage.clickRatingDropdownMenu();
        //select set rating review stars
        addReviewModalPage.selectSetReviewRatingStarOption(4);
        //valid guest review input data
        addReviewModalPage.validGuestReviewInputDataGetter();
        //input valid guest name into name input field
        addReviewModalPage.inputValidUserNameIntoNameInputField();
        //input valid guest email into email input field
        addReviewModalPage.inputValidUserEmailIntoEmailInputField();
        //input valid review title into review subject input field
        addReviewModalPage.inputValidReviewTitleIntoReviewSubjectInputField();
        //input valid review into comments textarea
        addReviewModalPage.inputValidReviewIntoCommentsTextArea();
        //capture screenshot of the add review modal page display after valid guest data input
        captureScreenshot(driver, "Add Review Modal Page Display After Valid Guest Data Input");
        //click 'Submit review' button
        addReviewModalPage.clickSubmitReviewButton();
        //capture screenshot of the test result
        captureScreenshot(driver, "Add Single Category Dashboard Page Set Single (Canvas Laundry Cart (Utility)) Product To Cart Test Result (as a guest)");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //general page web element assert test method (elements that all pages share -> header / footer)
    protected void isGeneralPageWebElementDisplayed(GeneralPage generalPage){
        //header -> upper navbar
        //assert header upper navbar search dropdown link is displayed
        //assertTrue(generalPage.isHeaderUpperNavSearchDropdownLinkDisplayed(), "The header upper navbar search dropdown link isn't displayed");
        //assert header upper navbar gift certificates link is displayed
        assertTrue(generalPage.isHeaderUpperNavGiftCertificatesLinkDisplayed(), "The header upper navbar gift certificates link isn't displayed");
        //assert header upper navbar cart link is displayed
        assertTrue(generalPage.isHeaderUpperNavCartLinkDisplayed(), "The header upper navbar cart link isn't displayed");
        //assert header home page logo link is displayed (not all pages have this element)
        //assertTrue(generalPage.isHeaderHomePageLogoLinkDisplayed(), "The header home page logo link isn't displayed");
        //header -> lower navbar
        //assert header lower navbar garden dropdown link is displayed
        assertTrue(generalPage.isHeaderLowerNavGardenDropdownLinkDisplayed(), "The header lower navbar garden dropdown menu link isn't displayed");
        //assert header lower navbar shop all link is displayed
        assertTrue(generalPage.isHeaderLowerNavShopAllLinkDisplayed(), "The header lower navbar shop all link isn't displayed");
        //assert header lower navbar kitchen link is displayed
        assertTrue(generalPage.isHeaderLowerNavKitchenLinkDisplayed(), "The header lower navbar kitchen link isn't displayed");
        //assert header lower navbar publications link is displayed
        assertTrue(generalPage.isHeaderLowerNavPublicationsLinkDisplayed(), "The header lower navbar publications all link isn't displayed");
        //assert header lower navbar utility link is displayed
        assertTrue(generalPage.isHeaderLowerNavUtilityLinkDisplayed(), "The header lower navbar utility link isn't displayed");
        //assert header lower navbar journal link is displayed
        assertTrue(generalPage.isHeaderLowerNavJournalLinkDisplayed(), "The header lower navbar journal link isn't displayed");
        //assert header lower navbar our story link is displayed
        assertTrue(generalPage.isHeaderLowerNavOurStoryLinkDisplayed(), "The header lower navbar our story link isn't displayed");
        //assert header lower navbar contact us link is displayed
        assertTrue(generalPage.isHeaderLowerNavContactUsLinkDisplayed(), "The header lower navbar contact us link isn't displayed");
        //assert header lower navbar shipping and returns link is displayed
        assertTrue(generalPage.isHeaderLowerNavShippingAndReturnsLinkDisplayed(), "The header lower navbar shipping and returns link isn't displayed");
        //footer section
        //navigate column
        //assert footer navigate section title is displayed
        assertTrue(generalPage.isFooterNavigateSectionTitleDisplayed(), "The footer navigate section title isn't displayed");
        //assert footer navigate section journal link is displayed
        assertTrue(generalPage.isFooterJournalLinkDisplayed(), "The footer navigate section journal link isn't displayed");
        //assert footer navigate section our story link is displayed
        assertTrue(generalPage.isFooterOurStoryLinkDisplayed(), "The footer navigate section our story link isn't displayed");
        //assert footer navigate section contact us link is displayed
        assertTrue(generalPage.isFooterContactUsLinkDisplayed(), "The footer navigate section contact us link isn't displayed");
        //assert footer navigate section shipping and returns link is displayed
        assertTrue(generalPage.isFooterShippingAndReturnsLinkDisplayed(), "The footer navigate section shipping and returns us link isn't displayed");
        //assert footer navigate section sitemap link is displayed
        assertTrue(generalPage.isFooterSitemapLinkDisplayed(), "The footer navigate section sitemap link isn't displayed");
        //categories column
        //assert footer categories section title is displayed
        assertTrue(generalPage.isFooterCategoriesSectionTitleDisplayed(), "The footer categories section title isn't displayed");
        //assert footer categories section garden link is displayed
        assertTrue(generalPage.isFooterGardenLinkDisplayed(), "The footer categories section garden link isn't displayed");
        //assert footer categories section shop all link is displayed
        assertTrue(generalPage.isFooterShopAllLinkDisplayed(), "The footer categories section shop all link isn't displayed");
        //assert footer categories section kitchen link is displayed
        assertTrue(generalPage.isFooterKitchenLinkDisplayed(), "The footer categories section kitchen link isn't displayed");
        //assert footer categories section publications link is displayed
        assertTrue(generalPage.isFooterPublicationsLinkDisplayed(), "The footer categories section publications link isn't displayed");
        //assert footer categories section utility link is displayed
        assertTrue(generalPage.isFooterUtilityLinkDisplayed(), "The footer categories section utility link isn't displayed");
        //popular brands column
        //assert footer popular brands section title is displayed
        assertTrue(generalPage.isFooterPopularBrandsSectionTitleDisplayed(), "The footer popular brands section title isn't displayed");
        //assert footer popular brands section fresh brand link is displayed
        assertTrue(generalPage.isFooterFreshBrandLinkDisplayed(), "The footer popular brands section fresh brand link isn't displayed");
        //assert footer popular brands section OFS link is displayed
        assertTrue(generalPage.isFooterOFSLinkDisplayed(), "The footer popular brands section OFS link isn't displayed");
        //assert footer popular brands section view all link is displayed
        assertTrue(generalPage.isFooterViewAllLinkDisplayed(), "The footer popular brands section view all link isn't displayed");
        //information section
        //assert footer information section title is displayed
        assertTrue(generalPage.isFooterInfoSectionTitleDisplayed(), "The footer information section title isn't displayed");
        //assert footer information section address text is displayed
        assertTrue(generalPage.isFooterAddressTextDisplayed(), "The footer information section address text isn't displayed");
        //assert footer information section call us text is displayed
        assertTrue(generalPage.isFooterCallUsTextDisplayed(), "The footer information section call us text isn't displayed");
        //subscribe to newsletter column
        //assert footer subscribe to newsletter section title is displayed
        assertTrue(generalPage.isFooterSubscribeToNewsletterSectionTitleDisplayed(), "The footer subscribe to newsletter section title isn't displayed");
        //assert footer subscribe to newsletter section subtext is displayed
        assertTrue(generalPage.isFooterSubscribeToNewsletterSectionSubtextDisplayed(), "The footer subscribe to newsletter section subtext isn't displayed");
        //assert footer subscribe to newsletter email input field is displayed
        assertTrue(generalPage.isFooterSubscribeToNewsletterEmailInputFieldDisplayed(), "The footer subscribe to newsletter email input field isn't displayed");
        //assert footer subscribe button is displayed
        assertTrue(generalPage.isFooterSubscribeButtonDisplayed(), "The footer subscribe button isn't displayed");
        //copyright section
        //assert footer powered by text is displayed
        assertTrue(generalPage.isFooterPoweredByTextDisplayed(), "The footer powered by text isn't displayed");
        //assert footer copyright text is displayed
        assertTrue(generalPage.isFooterCopyrightTextDisplayed(), "The footer copyright text isn't displayed");
    }

    //home page web element assert test method
    protected void isHomePageWebElementDisplayed(HomePage homePage){
        //carousel section
        //assert home page carousel images are displayed (as a list) (Selenium can't seem to find this element block with VALID selector)
        //assertTrue(homePage.isHomePageCarouselImgDisplayed(), "The home page carousel images aren't displayed");
        //assert home page carousel previous button is displayed
        assertTrue(homePage.isHomePageCarouselPrevButtonDisplayed(), "The home page carousel previous button isn't displayed");
        //assert home page carousel next button is displayed
        assertTrue(homePage.isHomePageCarouselNextButtonDisplayed(), "The home page carousel next button isn't displayed");
        //assert home page carousel pause button is displayed
        assertTrue(homePage.isHomePageCarouselPauseButtonDisplayed(), "The home page carousel pause button isn't displayed");
        //assert home page carousel image title is displayed (Selenium can't seem to find this element with VALID selector)
        //assertTrue(homePage.isHomePageCarouselImgTitleDisplayed(), "The home page carousel image title isn't displayed");
        //assert home page carousel image subtitle is displayed (Selenium can't seem to find this element with VALID selector)
        //assertTrue(homePage.isHomePageCarouselImgSubtitleDisplayed(), "The home page carousel image subtitle isn't displayed");
        //assert home page carousel shop now button is displayed (Selenium can't seem to find this element with VALID selector)
        //assertTrue(homePage.isHomePageCarouselShopNowButtonDisplayed(), "The home page carousel shop now button isn't displayed");
        //most popular products section
        //assert home page most popular products section title is displayed
        assertTrue(homePage.isHomePageMostPopularSectionTitleDisplayed(), "The home page most popular products section title isn't displayed");
        //list elements
        //assert home page most popular product images are displayed (as a list)
        assertTrue(homePage.isHomePageMostPopularProductImgDisplayed(), "The home page most popular product images aren't displayed");
        //assert home page most popular product category tags are displayed (as a list)
        assertTrue(homePage.isHomePageMostPopularProductCategoryTagDisplayed(), "The home page most popular product category tags aren't displayed");
        //assert home page most popular product name links are displayed (as a list)
        assertTrue(homePage.isHomePageMostPopularProductNameLinkDisplayed(), "The home page most popular product name links aren't displayed");
        //assert home page most popular product unit prices are displayed (as a list)
        assertTrue(homePage.isHomePageMostPopularProductUnitPriceDisplayed(), "The home page most popular product unit prices aren't displayed");
        //new products section
        //assert home page new products section title is displayed
        assertTrue(homePage.isHomePageNewProductsSectionTitleDisplayed(), "The home page new products section title isn't displayed");
        //assert home page new products section previous button is displayed
        assertTrue(homePage.isHomePageNewProductsPrevButtonDisplayed(), "The home page new products section previous button isn't displayed");
        //assert home page new products section next button is displayed
        assertTrue(homePage.isHomePageNewProductsNextButtonDisplayed(), "The home page new products section next button isn't displayed");
        //assert home page new products section page one button is displayed
        assertTrue(homePage.isHomePageNewProductsPageOneButtonDisplayed(), "The home page new products section page one button isn't displayed");
        //assert home page new products section page two button is displayed
        assertTrue(homePage.isHomePageNewProductsPageTwoButtonDisplayed(), "The home page new products section page two button isn't displayed");
        //list elements
        //assert home page new product images are displayed (as a list) (Selenium can't seem to find this element block with VALID selector)
        //assertTrue(homePage.isHomePageNewProductImgDisplayed(), "The home page new product images aren't displayed");
        //assert home page new product category tags are displayed (as a list) (Selenium can't seem to find this element block with VALID selector)
        //assertTrue(homePage.isHomePageNewProductCategoryTagDisplayed(), "The home page new product category tags aren't displayed");
        //assert home page new product name links are displayed (as a list) (Selenium can't seem to find this element block with VALID selector)
        //assertTrue(homePage.isHomePageNewProductNameLinkDisplayed(), "The home page new product name links aren't displayed");
        //assert home page new product unit price are displayed (as a list) (Selenium can't seem to find this element block with VALID selector)
        //assertTrue(homePage.isHomePageNewProductUnitPriceDisplayed(), "The home page new product unit prices aren't displayed");
        //assert home page banner link is displayed
        assertTrue(homePage.isHomePageBannerLinkDisplayed(), "The home page banner link isn't displayed");
    }

    //register page web element assert test method
    protected void isRegisterPageWebElementDisplayed(RegisterPage registerPage){
        //assert register page title is displayed
        assertTrue(registerPage.isRegisterPageTitleDisplayed(), "The register page title isn't displayed");
        //assert register page email subtext is displayed
        assertTrue(registerPage.isRegisterPageEmailSubtextDisplayed(), "The register page email subtext isn't displayed");
        //assert register page email input field is displayed
        assertTrue(registerPage.isRegisterPageEmailInputFieldDisplayed(), "The register page email input field isn't displayed");
        //assert register page password subtext is displayed
        assertTrue(registerPage.isRegisterPagePasswordSubtextDisplayed(), "The register page password subtext isn't displayed");
        //assert register page password input field is displayed
        assertTrue(registerPage.isRegisterPagePasswordInputFieldDisplayed(), "The register page password input field isn't displayed");
        //assert register page confirm password subtext is displayed
        assertTrue(registerPage.isRegisterPageConfirmPasswordSubtextDisplayed(), "The register page confirm password subtext isn't displayed");
        //assert register page confirm password input field is displayed
        assertTrue(registerPage.isRegisterPageConfirmPasswordInputFieldDisplayed(), "The register page confirm password input field isn't displayed");
        //assert register page country subtext is displayed
        assertTrue(registerPage.isRegisterPageCountrySubtextDisplayed(), "The register page country subtext isn't displayed");
        //assert register page country dropdown menu is displayed
        assertTrue(registerPage.isRegisterPageCountryDropdownMenuDisplayed(), "The register page country dropdown menu isn't displayed");
        //assert register page first name subtext is displayed
        assertTrue(registerPage.isRegisterPageFirstNameSubtextDisplayed(), "The register page first name subtext isn't displayed");
        //assert register page first name input field is displayed
        assertTrue(registerPage.isRegisterPageFirstNameInputFieldDisplayed(), "The register page first name input field isn't displayed");
        //assert register page last name subtext is displayed
        assertTrue(registerPage.isRegisterPageLastNameSubtextDisplayed(), "The register page last name subtext isn't displayed");
        //assert register page last name input field is displayed
        assertTrue(registerPage.isRegisterPageLastNameInputFieldDisplayed(), "The register page last name input field isn't displayed");
        //assert register page address 1 subtext is displayed
        assertTrue(registerPage.isRegisterPageAddress1SubtextDisplayed(), "The register page address 1 subtext isn't displayed");
        //assert register page address 1 input field is displayed
        assertTrue(registerPage.isRegisterPageAddress1InputFieldDisplayed(), "The register page address 1 input field isn't displayed");
        //assert register page address 2 subtext is displayed
        assertTrue(registerPage.isRegisterPageAddress2SubtextDisplayed(), "The register page address 2 subtext isn't displayed");
        //assert register page address 2 input field is displayed
        assertTrue(registerPage.isRegisterPageAddress2InputFieldDisplayed(), "The register page address 2 input field isn't displayed");
        //assert register page company subtext is displayed
        assertTrue(registerPage.isRegisterPageCompanySubtextDisplayed(), "The register page company subtext isn't displayed");
        //assert register page company input field is displayed
        assertTrue(registerPage.isRegisterPageCompanyInputFieldDisplayed(), "The register page company input field isn't displayed");
        //assert register page city subtext is displayed
        assertTrue(registerPage.isRegisterPageCitySubtextDisplayed(), "The register page city subtext isn't displayed");
        //assert register page city input field is displayed
        assertTrue(registerPage.isRegisterPageCityInputFieldDisplayed(), "The register page city input field isn't displayed");
        //assert register page state subtext is displayed
        assertTrue(registerPage.isRegisterPageStateSubtextDisplayed(), "The register page state subtext isn't displayed");
        //assert register page state dropdown menu is displayed
        assertTrue(registerPage.isRegisterPageStateDropdownMenuDisplayed(), "The register page state dropdown menu isn't displayed");
        //assert register page post code subtext is displayed
        assertTrue(registerPage.isRegisterPagePostCodeSubtextDisplayed(), "The register page post code subtext isn't displayed");
        //assert register page post code input field is displayed
        assertTrue(registerPage.isRegisterPagePostCodeInputFieldDisplayed(), "The register page post code input field isn't displayed");
        //assert register page phone subtext is displayed
        assertTrue(registerPage.isRegisterPagePhoneSubtextDisplayed(), "The register page phone subtext isn't displayed");
        //assert register page phone input field is displayed
        assertTrue(registerPage.isRegisterPagePhoneInputFieldDisplayed(), "The register page phone input field isn't displayed");
        //assert register page create account is displayed
        assertTrue(registerPage.isRegisterPageCreateAccountButtonDisplayed(), "The register page create account button isn't displayed");
        //assert register page required tags are displayed (as a list)
        assertTrue(registerPage.isRegisterPageRequiredTagDisplayed(), "The register page required tags aren't displayed");
    }

    //account dashboard page web element assert test method
    protected void isAccountDashboardPageWebElementDisplayed(AccountDashboardPage accountDashboardPage) {
        //assert account dashboard page title is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageTitleDisplayed(), "The account dashboard page title isn't displayed");
        //assert account dashboard page navbar orders link is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageNavbarOrdersLinkDisplayed(), "The account dashboard page navbar orders link isn't displayed");
        //assert account dashboard page navbar returns link is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageNavbarReturnsLinkDisplayed(), "The account dashboard page navbar returns link isn't displayed");
        //assert account dashboard page navbar messages link is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageNavbarMessagesLinkDisplayed(), "The account dashboard page navbar messages link isn't displayed");
        //assert account dashboard page navbar addresses link is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageNavbarAddressesLinkDisplayed(), "The account dashboard page navbar addresses link isn't displayed");
        //assert account dashboard page navbar wishlists link is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageNavbarWishlistsLinkDisplayed(), "The account dashboard page navbar wishlists link isn't displayed");
        //assert account dashboard page navbar recently viewed link is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageNavbarRecentlyViewedLinkDisplayed(), "The account dashboard page navbar recently viewed link isn't displayed");
        //assert account dashboard page navbar account settings link is displayed
        assertTrue(accountDashboardPage.isAccountDashboardPageNavbarAccountSettingsLinkDisplayed(), "The account dashboard page navbar account settings link isn't displayed");
    }

    //account dashboard page breadcrumb web element assert test method
    protected void isAccountDashboardPageBreadcrumbWebElementDisplayed(AccountDashboardPage accountDashboardPage) {
        //assert account dashboard page breadcrumb elements are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageBreadcrumbDisplayed(), "The account dashboard page breadcrumb elements aren't displayed");
    }

    //account dashboard page orders section web element assert test method
    protected void isAccountDashboardPageOrdersSectionWebElementDisplayed(AccountDashboardPage accountDashboardPage) {
        //assert account dashboard page order section product images are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageOrdersProductImgElementsDisplayed(), "The account dashboard page order section product images aren't displayed");
        //assert account dashboard page order section number links are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageOrderNumberLinkDisplayed(), "The account dashboard page order section number links aren't displayed");
        //assert account dashboard page order section product count and total costs are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageProductCountTotalCostDisplayed(), "The account dashboard page order section product count and total costs aren't displayed");
        //assert account dashboard page order section order placed subtexts are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageOrdersPlacedSubtextDisplayed(), "The account dashboard page order section order placed subtexts aren't displayed");
        //assert account dashboard page order section order last update subtexts are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageOrdersLastUpdateSubtextDisplayed(), "The account dashboard page order section order last update subtexts aren't displayed");
        //assert account dashboard page order section order awaiting fulfillment tags are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageOrdersAwaitFulfillTagDisplayed(), "The account dashboard page order section order awaiting fulfillment tags aren't displayed");
        //assert account dashboard page order section order placed dates are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageOrderPlacedDateDisplayed(), "The account dashboard page order section order placed dates aren't displayed");
        //assert account dashboard page order section order last update dates are displayed (as a list)
        assertTrue(accountDashboardPage.isAccountDashboardPageOrderLastUpdateDateDisplayed(), "The account dashboard page order section order last update dates aren't displayed");
    }

    //account settings page web element assert test method
    protected void isAccountSettingsPageWebElementDisplayed(AccountSettingsPage accountSettingsPage) {
        //assert account settings page title is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageTitleDisplayed(), "The account settings page title isn't displayed");
        //assert account settings page first name subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageFirstNameSubtextDisplayed(), "The account settings page first name subtext isn't displayed");
        //assert account settings page first name input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageFirstNameInputFieldDisplayed(), "The account settings page first name input field isn't displayed");
        //assert account settings page last name subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageLastNameSubtextDisplayed(), "The account settings page last name subtext isn't displayed");
        //assert account settings page last name input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageLastNameInputFieldDisplayed(), "The account settings page last name input field isn't displayed");
        //assert account settings page company subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageCompanySubtextDisplayed(), "The account settings page company subtext isn't displayed");
        //assert account settings page company input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageCompanyInputFieldDisplayed(), "The account settings page company input field isn't displayed");
        //assert account settings page phone subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPagePhoneSubtextDisplayed(), "The account settings page phone subtext isn't displayed");
        //assert account settings page phone input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPagePhoneInputFieldDisplayed(), "The account settings page phone input field isn't displayed");
        //assert account settings page email subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageEmailSubtextDisplayed(), "The account settings page email subtext isn't displayed");
        //assert account settings page email input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageEmailInputFieldDisplayed(), "The account settings page email input field isn't displayed");
        //assert account settings page current password subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageCurrentPasswordSubtextDisplayed(), "The account settings page current password subtext isn't displayed");
        //assert account settings page current password input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageCurrentPasswordInputFieldDisplayed(), "The account settings page current password input field isn't displayed");
        //assert account settings page new password subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPagePasswordSubtextDisplayed(), "The account settings page new password subtext isn't displayed");
        //assert account settings page new password input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPagePasswordInputFieldDisplayed(), "The account settings page new password input field isn't displayed");
        //assert account settings page confirm password subtext is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageConfirmPasswordSubtextDisplayed(), "The account settings page confirm password subtext isn't displayed");
        //assert account settings page confirm password input field is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageConfirmPasswordInputFieldDisplayed(), "The account settings page confirm password input field isn't displayed");
        //assert account settings page update button is displayed
        assertTrue(accountSettingsPage.isAccountSettingsPageUpdateAccountButtonDisplayed(), "The account settings page update button isn't displayed");
    }

    //address dashboard page web elements assert test method
    protected void isAddressDashboardPageWebElementDisplayed(AddressDashboardPage addressDashboardPage) {
        //assert address dashboard page usernames are displayed (as a list)
        assertTrue(addressDashboardPage.isAddressDashboardPageAddressUserNameDisplayed(), "The address dashboard page address username aren't displayed");
        //assert address dashboard page details are displayed (as a list) (Selenium can't find this element with VALID selector)
        //assertTrue(addressDashboardPage.isAddressDashboardPageAddressDetailsDisplayed(), "The address dashboard page address details aren't displayed");
        //assert address dashboard page phones are displayed (as a list)
        assertTrue(addressDashboardPage.isAddressDashboardPageAddressPhoneDisplayed(), "The address dashboard page address phones aren't displayed");
        //assert address dashboard page edit buttons are displayed (as a list)
        assertTrue(addressDashboardPage.isAddressDashboardPageAddressEditButtonDisplayed(), "The address dashboard page address edit buttons aren't displayed");
        //assert address dashboard page delete buttons are displayed (as a list)
        assertTrue(addressDashboardPage.isAddressDashboardPageAddressDeleteButtonDisplayed(), "The address dashboard page address delete buttons aren't displayed");
    }

    //add address page web element assert test method
    protected void isAddAddressPageWebElementDisplayed(AddAddressPage addAddressPage) {
        //assert add address page title is displayed
        assertTrue(addAddressPage.isAddAddressPageTitleDisplayed(), "The add address page title isn't displayed");
        //assert add address page country subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageCountrySubtextDisplayed(), "The add address page country subtext isn't displayed");
        //assert add address page country dropdown menu is displayed
        assertTrue(addAddressPage.isAddAddressPageCountryDropdownMenuDisplayed(), "The add address page country dropdown menu isn't displayed");
        //assert add address page first name subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageFirstNameSubtextDisplayed(), "The add address page first name subtext isn't displayed");
        //assert add address page first name input field is displayed
        assertTrue(addAddressPage.isAddAddressPageFirstNameInputFieldDisplayed(), "The add address page first name input field isn't displayed");
        //assert add address page last name subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageLastNameSubtextDisplayed(), "The add address page last name subtext isn't displayed");
        //assert add address page last name input field is displayed
        assertTrue(addAddressPage.isAddAddressPageLastNameInputFieldDisplayed(), "The add address page last name input field isn't displayed");
        //assert add address page address 1 subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageAddress1SubtextDisplayed(), "The add address page address 1 subtext isn't displayed");
        //assert add address page address 1 input field is displayed
        assertTrue(addAddressPage.isAddAddressPageAddress1InputFieldDisplayed(), "The add address page address 1 input field isn't displayed");
        //assert add address page address 2 subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageAddress2SubtextDisplayed(), "The add address page address 2 subtext isn't displayed");
        //assert add address page address 2 input field is displayed
        assertTrue(addAddressPage.isAddAddressPageAddress2InputFieldDisplayed(), "The add address page address 2 input field isn't displayed");
        //assert add address page company subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageCompanySubtextDisplayed(), "The add address page company subtext isn't displayed");
        //assert add address page company input field is displayed
        assertTrue(addAddressPage.isAddAddressPageCompanyInputFieldDisplayed(), "The add address page company input field isn't displayed");
        //assert add address page city subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageCitySubtextDisplayed(), "The add address page city subtext isn't displayed");
        //assert add address page city input field is displayed
        assertTrue(addAddressPage.isAddAddressPageCityInputFieldDisplayed(), "The add address page city input field isn't displayed");
        //assert add address page state subtext is displayed
        assertTrue(addAddressPage.isAddAddressPageStateSubtextDisplayed(), "The add address page state subtext isn't displayed");
        //assert add address page state dropdown menu is displayed
        assertTrue(addAddressPage.isAddAddressPageStateDropdownMenuDisplayed(), "The add address page state dropdown menu isn't displayed");
        //assert add address page post code subtext is displayed
        assertTrue(addAddressPage.isAddAddressPagePostCodeSubtextDisplayed(), "The add address page post code subtext isn't displayed");
        //assert add address page post code input field is displayed
        assertTrue(addAddressPage.isAddAddressPagePostCodeInputFieldDisplayed(), "The add address page post code input field isn't displayed");
        //assert add address page phone subtext is displayed
        assertTrue(addAddressPage.isAddAddressPagePhoneSubtextDisplayed(), "The add address page phone subtext isn't displayed");
        //assert add address page phone input field is displayed
        assertTrue(addAddressPage.isAddAddressPagePhoneInputFieldDisplayed(), "The add address page phone input field isn't displayed");
        //assert add address page required tags are displayed (as a list)
        assertTrue(addAddressPage.isAddAddressPageRequiredTagDisplayed(), "The add address page required tags aren't displayed");
        //assert add address page save address button is displayed
        assertTrue(addAddressPage.isAddAddressPageSaveAddressButtonDisplayed(), "The add address page save address button isn't displayed");
        //assert add address page cancel button is displayed
        assertTrue(addAddressPage.isAddAddressPageCancelButtonDisplayed(), "The add address page cancel button isn't displayed");
    }

    //login register dashboard page web element assert test method
    protected void isLoginRegisterDashboardPageWebElementDisplayed(LoginRegisterDashboardPage loginRegisterDashboardPage) {
        //assert login register dashboard page title is displayed
        assertTrue(loginRegisterDashboardPage.isLoginRegisterDashboardPageTitleDisplayed(), "The login register dashboard page title isn't displayed");
        //login section
        //assert login register dashboard email subtext is displayed
        assertTrue(loginRegisterDashboardPage.isLoginSectionEmailSubtextDisplayed(), "The login register dashboard email subtext isn't displayed");
        //assert login register dashboard email input field is displayed
        assertTrue(loginRegisterDashboardPage.isLoginSectionEmailInputFieldDisplayed(), "The login register dashboard email input field isn't displayed");
        //assert login register dashboard password subtext is displayed
        assertTrue(loginRegisterDashboardPage.isLoginSectionPasswordSubtextDisplayed(), "The login register dashboard password subtext isn't displayed");
        //assert login register dashboard password input field is displayed
        assertTrue(loginRegisterDashboardPage.isLoginSectionPasswordInputFieldDisplayed(), "The login register dashboard password input field isn't displayed");
        //assert login register dashboard sign in button is displayed
        assertTrue(loginRegisterDashboardPage.isLoginSectionSignInButtonDisplayed(), "The login register dashboard sign in button isn't displayed");
        //assert login register dashboard forgot password link is displayed
        assertTrue(loginRegisterDashboardPage.isLoginSectionForgotPasswordLinkDisplayed(), "The login register dashboard forgot password link isn't displayed");
        //new customer (register) section
        //assert login register dashboard register section title is displayed
        assertTrue(loginRegisterDashboardPage.isRegisterSectionTitleDisplayed(), "The login register dashboard register section title isn't displayed");
        //assert login register dashboard register section description subtitle is displayed
        assertTrue(loginRegisterDashboardPage.isRegisterSectionDescriptionSubtitleDisplayed(), "The login register dashboard register section description subtitle isn't displayed");
        //assert login register dashboard register section description elements are displayed (as a list)
        assertTrue(loginRegisterDashboardPage.isRegisterSectionDescriptionDisplayed(), "The login register dashboard register section description elements aren't displayed");
        //assert login register dashboard register section create account button is displayed
        assertTrue(loginRegisterDashboardPage.isRegisterSectionCreateAccountButtonDisplayed(), "The login register dashboard register section create account button isn't displayed");
    }

    //single product page web element assert test methods
    protected void isSingleProductPageWebElementDisplayed(SingleProductPage singleProductPage) {
        //assert single product page title is displayed
        assertTrue(singleProductPage.isSingleProductPageTitleDisplayed(), "The single product page title isn't displayed");
        //assert single product page main product image is displayed
        assertTrue(singleProductPage.isSingleProductPageMainProductImgDisplayed(), "The single product page main product image isn't displayed");
        //assert single product page brand link is displayed
        assertTrue(singleProductPage.isSingleProductPageBrandLinkDisplayed(), "The single product page brand link isn't displayed");
        //assert single product page product unit price is displayed
        assertTrue(singleProductPage.isSingleProductPageProductUnitPriceDisplayed(), "The single product page product unit price isn't displayed");
        //assert single product page review count is displayed (not all pages have this element)
        //assertTrue(singleProductPage.isSingleProductPageReviewCountDisplayed(), "The single product page review count isn't displayed");
        //assert single product page write a review is displayed
        assertTrue(singleProductPage.isSingleProductPageWriteAReviewLinkDisplayed(), "The single product page write a review isn't displayed");
        //assert single product page weight subtext is displayed
        assertTrue(singleProductPage.isSingleProductPageWeightSubtextDisplayed(), "The single product page weight subtext isn't displayed");
        //assert single product page product weight is displayed
        assertTrue(singleProductPage.isSingleProductPageProductWeightDisplayed(), "The single product page product weight isn't displayed");
        //assert single product page gift wrapping subtext is displayed
        assertTrue(singleProductPage.isSingleProductPageGiftWrappingSubtextDisplayed(), "The single product page gift wrapping subtext isn't displayed");
        //assert single product page product gift wrapping option is displayed
        assertTrue(singleProductPage.isSingleProductPageProductGiftWrappingOptionDisplayed(), "The single product page product gift wrapping option isn't displayed");
        //assert single product page shipping subtext is displayed
        assertTrue(singleProductPage.isSingleProductPageShippingSubtextDisplayed(), "The single product page shipping subtext isn't displayed");
        //assert single product page product shipping option is displayed
        assertTrue(singleProductPage.isSingleProductPageProductShippingOptionDisplayed(), "The single product page product shipping option isn't displayed");
        //assert single product page product quantity subtext is displayed
        assertTrue(singleProductPage.isSingleProductPageProductQtySubtextDisplayed(), "The single product page product quantity subtext isn't displayed");
        //assert single product page product quantity input field is displayed
        assertTrue(singleProductPage.isSingleProductPageProductQtyInputFieldDisplayed(), "The single product page product quantity input field isn't displayed");
        //assert single product page increase product quantity button is displayed
        assertTrue(singleProductPage.isSingleProductPageIncreaseQtyButtonDisplayed(), "The single product page increase product quantity button isn't displayed");
        //assert single product page decrease product quantity button is displayed
        assertTrue(singleProductPage.isSingleProductPageDecreaseQtyButtonDisplayed(), "The single product page decrease product quantity button isn't displayed");
        //assert single product page add to cart button is displayed
        assertTrue(singleProductPage.isSingleProductPageAddToCartButtonDisplayed(), "The single product page add to cart button isn't displayed");
        //assert single product page add to wishlist button is displayed
        assertTrue(singleProductPage.isSingleProductPageAddToWishlistDropdownMenuDisplayed(), "The single product page add to wishlist dropdown menu isn't displayed");
        //social button elements
        //assert single product page facebook icon button is displayed
        assertTrue(singleProductPage.isSingleProductPageFacebookIconButtonDisplayed(), "The single product page facebook icon button isn't displayed");
        //assert single product page mail icon button is displayed
        assertTrue(singleProductPage.isSingleProductPageMailIconButtonDisplayed(), "The single product page main icon button isn't displayed");
        //assert single product page print icon button is displayed
        assertTrue(singleProductPage.isSingleProductPagePrintIconButtonDisplayed(), "The single product page main print button isn't displayed");
        //assert single product page X icon button is displayed
        assertTrue(singleProductPage.isSingleProductPageXIconButtonDisplayed(), "The single product page X icon button isn't displayed");
        //description section
        //assert single product page description link is displayed
        assertTrue(singleProductPage.isSingleProductPageDescriptionLinkDisplayed(), "The single product page description link isn't displayed");
        //assert single product page product description is displayed
        assertTrue(singleProductPage.isSingleProductPageProductDescriptionDisplayed(), "The single product page product description isn't displayed");
        //list elements
        //assert single product page rating stars are displayed (as a list)
        //assertTrue(singleProductPage.isSingleProductPageRatingStarDisplayed(), "The single product page rating stars aren't displayed");
        //assert single product page product image elements are displayed (as a list)
        assertTrue(singleProductPage.isSingleProductPageProductImgElementsDisplayed(), "The single product page product image elements aren't displayed");
    }

    //shopping cart modal web element assert test method
    protected void isShoppingCartModalWebElementDisplayed(SingleProductPage singleProductPage) {
        //assert shopping cart modal title is displayed
        assertTrue(singleProductPage.isShoppingCartModalTitleDisplayed(), "The shopping cart modal title isn't displayed");
        //assert shopping cart modal close button is displayed
        assertTrue(singleProductPage.isShoppingCartModalCloseButtonDisplayed(), "The shopping cart modal close button isn't displayed");
        //assert shopping cart modal product image is displayed
        assertTrue(singleProductPage.isShoppingCartModalProductImageDisplayed(), "The shopping cart modal product image isn't displayed");
        //assert shopping cart modal proceed to checkout button is displayed
        assertTrue(singleProductPage.isShoppingCartModalProceedToCheckoutButtonDisplayed(), "The shopping cart proceed to checkout button isn't displayed");
        //assert shopping cart modal order subtotal subtext is displayed
        assertTrue(singleProductPage.isShoppingCartModalOrderSubtotalSubtextDisplayed(), "The shopping cart modal order subtotal subtext isn't displayed");
        //assert shopping cart modal order subtotal price is displayed
        assertTrue(singleProductPage.isShoppingCartModalOrderSubtotalPriceDisplayed(), "The shopping cart modal order subtotal price isn't displayed");
        //assert shopping cart modal order product count is displayed
        assertTrue(singleProductPage.isShoppingCartModalProductCountDisplayed(), "The shopping cart modal product count isn't displayed");
        //assert shopping cart modal continue shopping button is displayed
        assertTrue(singleProductPage.isShoppingCartModalContinueShoppingButtonDisplayed(), "The shopping cart modal continue shopping button isn't displayed");
        //assert shopping cart modal view or edit cart button is displayed
        assertTrue(singleProductPage.isShoppingCartModalViewOrEditCartButtonDisplayed(), "The shopping cart modal view or edit cart button isn't displayed");
        //assert shopping cart modal product name is displayed
        assertTrue(singleProductPage.isShoppingCartModalProductNameDisplayed(), "The shopping cart modal product name isn't displayed");
        //assert shopping cart modal product brand is displayed
        assertTrue(singleProductPage.isShoppingCartModalProductBrandDisplayed(), "The shopping cart modal product brand isn't displayed");
        //assert shopping cart modal product unit price and count is displayed
        assertTrue(singleProductPage.isShoppingCartModalProductUnitPriceAndCountDisplayed(), "The shopping cart modal product unit price and count isn't displayed");
    }

    //single product category dashboard page web element test assert method
    protected void isSingleProductCategoryDashboardPageWebElementDisplayed(SingleCategoryDashboardPage singleCategoryDashboardPage) {
        //assert single category dashboard page title is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageTitleDisplayed(), "The single category dashboard page title isn't displayed");
        //aside content
        //assert single category dashboard page refined by subtitle is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageRefineBySubtitleDisplayed(), "The single category dashboard page refined by subtitle isn't displayed");
        //assert single category dashboard page brand subtitle is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageBrandSubtitleDisplayed(), "The single category dashboard page brand subtitle isn't displayed");
        //assert single category dashboard page price subtitle is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPagePriceSubtitleDisplayed(), "The single category dashboard page price subtitle isn't displayed");
        //assert single category dashboard page price min input field is displayed (sometimes it isn't displayed, due to additional div change)
        //assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPagePriceMinInputFieldDisplayed(), "The single category dashboard page price min input field isn't displayed");
        //assert single category dashboard page price max input field is displayed (sometimes it isn't displayed, due to additional div change)
        //assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPagePriceMaxInputFieldDisplayed(), "The single category dashboard page price max input field isn't displayed");
        //assert single category dashboard page price update button is displayed (sometimes it isn't displayed, due to additional div change)
        //assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPagePriceUpdateButtonDisplayed(), "The single category dashboard page price update button isn't displayed");
        //assert single category dashboard page other (category) subtitle is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageOtherSubtitleDisplayed(), "The single category dashboard page other (category) subtitle isn't displayed");
        //list elements
        //assert single category dashboard page brand checkboxes are displayed (as a list) (sometimes it isn't displayed, due to additional div change)
        //assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageBrandCheckboxDisplayed(), "The single category dashboard page brand checkboxes aren't displayed");
        //assert single category dashboard page other (category) checkboxes are displayed (as a list) (sometimes it isn't displayed, due to additional div change)
        //assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageOtherCheckboxDisplayed(), "The single category dashboard page other (category) checkboxes aren't displayed");
        //main content
        //assert single category dashboard page sort by dropdown menu is displayed (sometimes it isn't displayed, due to additional div change)
        //assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageSortByDropdownMenuDisplayed(), "The single category dashboard page sort by dropdown menu isn't displayed");
        //product data list elements
        //assert single category dashboard page product images are displayed (as a list)
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageProductImgDisplayed(), "The single category dashboard page product images aren't displayed");
        //assert single category dashboard page product brands are displayed (as a list)
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageProductBrandDisplayed(), "The single category dashboard page product brands aren't displayed");
        //assert single category dashboard page product name link are displayed (as a list)
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageProductNameLinkDisplayed(), "The single category dashboard page product name links aren't displayed");
        //assert single category dashboard page product unit prices are displayed (as a list)
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageProductUnitPriceDisplayed(), "The single category dashboard page product unit prices aren't displayed");

    }

    //single category dashboard page refined by section web element assert test method
    protected void isSingleCategoryDashboardPageRefinedBySectionWebElementDisplayed(SingleCategoryDashboardPage singleCategoryDashboardPage) {
        //assert single category dashboard page refined by clear all link is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageRefineByClearAllLinkDisplayed(), "The single category dashboard page refined by section clear all link isn't displayed");
        //assert single category dashboard page refined by clear icon links is displayed (as a list)
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageRefineByItemClearIconDisplayed(), "The single category dashboard page refined by section clear icon links aren't displayed");
    }

    //single category dashboard page brand section web element assert test method
    protected void isSingleCategoryDashboardPageBrandSectionWebElementDisplayed(SingleCategoryDashboardPage singleCategoryDashboardPage) {
        //assert single category dashboard page brand section clear all button is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageBrandClearButtonDisplayed(), "The single category dashboard page brand section clear all button isn't displayed");
    }

    //single category dashboard page search section web element assert test method
    protected void isSingleCategoryDashboardPageSearchSectionWebElementDisplayed(SingleCategoryDashboardPage singleCategoryDashboardPage) {
        //assert single category dashboard page search section categories subtext is displayed
        //assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageCategoriesSubtextDisplayed(), "The single category dashboard page search section categories subtext isn't displayed");
        //assert single category dashboard page search section shop all link is displayed
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageShopAllLinkDisplayed(), "The single category dashboard page search section shop all link isn't displayed");
        //assert single category dashboard page search section links are displayed (as a list)
        assertTrue(singleCategoryDashboardPage.isSingleCategoryDashboardPageSearchLinkListDisplayed(), "The single category dashboard page search section links aren't displayed");
    }

    //add to compare list page web element assert test method
    protected void isAddToCompareListPageWebElementDisplayed(AddToCompareListPage addToCompareListPage) {
        //assert add to compare list page title is displayed
        assertTrue(addToCompareListPage.isAddToCompareListPageTitleDisplayed(), "The add to compare page title isn't displayed");
        //assert add to compare list page description subtext is displayed
        assertTrue(addToCompareListPage.isAddToCompareListPageDescriptionSubtextDisplayed(), "The add to compare page description subtext isn't displayed");
        //assert add to compare list page rating subtext is displayed
        assertTrue(addToCompareListPage.isAddToCompareListPageRatingSubtextDisplayed(), "The add to compare page rating subtext isn't displayed");
        //assert add to compare list page availability subtext is displayed
        assertTrue(addToCompareListPage.isAddToCompareListPageAvailabilitySubtextDisplayed(), "The add to compare page availability subtext isn't displayed");
        //assert add to compare list page other details subtext is displayed
        assertTrue(addToCompareListPage.isAddToCompareListPageOtherDetailsSubtextDisplayed(), "The add to compare page other details subtext isn't displayed");
        //list elements
        //assert add to compare list page product remove buttons are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductRemoveButtonDisplayed(), "The add to compare page product remove buttons aren't displayed");
        //assert add to compare list page product images are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductImgDisplayed(), "The add to compare page product images aren't displayed");
        //assert add to compare list page product brand links are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductBrandLinkDisplayed(), "The add to compare page product brand links aren't displayed");
        //assert add to compare list page product name links are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductNameLinkDisplayed(), "The add to compare page product name links aren't displayed");
        //assert add to compare list page product unit prices are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductUnitPriceDisplayed(), "The add to compare page product unit prices aren't displayed");
        //assert add to compare list page product add to cart buttons are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductAddToCartButtonDisplayed(), "The add to compare page product remove buttons aren't displayed");
        //assert add to compare list page product descriptions are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductDescDisplayed(), "The add to compare page product descriptions aren't displayed");
        //assert add to compare list page product ratings are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductRatingDisplayed(), "The add to compare page product ratings aren't displayed");
        //assert add to compare list page product availabilities are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductAvailabilityDisplayed(), "The add to compare page product availabilities aren't displayed");
        //assert add to compare list page product other details are displayed (as a list)
        assertTrue(addToCompareListPage.isAddToCompareListPageProductOtherDetailsDisplayed(), "The add to compare page product other details aren't displayed");
    }

    //shopping cart page web element assert test method
    protected void isShoppingCartPageWebElementDisplayed(ShoppingCartPage shoppingCartPage) {
        //assert shopping cart page title is displayed
        assertTrue(shoppingCartPage.isShoppingCartPageTitleDisplayed(), "The shopping cart page title isn't displayed");
        //shopping cart table
        //assert shopping cart table item subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartTableItemSubtextDisplayed(), "The shopping cart table item subtext isn't displayed");
        //assert shopping cart table price subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartTablePriceSubtextDisplayed(), "The shopping cart table price subtext isn't displayed");
        //assert shopping cart table quantity subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartTableQuantitySubtextDisplayed(), "The shopping cart table quantity subtext isn't displayed");
        //assert shopping cart table total subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartTableTotalSubtextDisplayed(), "The shopping cart table total subtext isn't displayed");
        //list elements
        //assert shopping cart table product images are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductImageDisplayed(), "The shopping cart table product images aren't displayed");
        //assert shopping cart table product brands are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductBrandDisplayed(), "The shopping cart table product brands aren't displayed");
        //assert shopping cart table product name links are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductNameLinkDisplayed(), "The shopping cart table product name links aren't displayed");
        //assert shopping cart table product gift wrap subtexts are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductGiftWrapSubtextDisplayed(), "The shopping cart table product gift wrap subtexts aren't displayed");
        //assert shopping cart table product gift wrap links are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductGiftWrapLinkDisplayed(), "The shopping cart table product gift wrap links aren't displayed");
        //assert shopping cart table product prices are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductPriceDisplayed(), "The shopping cart table product prices aren't displayed");
        //assert shopping cart table product quantity decrease buttons are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductQtyDecreaseButtonDisplayed(), "The shopping cart table product quantity decrease buttons aren't displayed");
        //assert shopping cart table product quantity input fields are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductQtyInputFieldDisplayed(), "The shopping cart table product quantity input fields aren't displayed");
        //assert shopping cart table product quantity increase buttons are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductQtyIncreaseButtonDisplayed(), "The shopping cart table product quantity increase buttons aren't displayed");
        //assert shopping cart table product total prices are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductTotalPriceDisplayed(), "The shopping cart table product total prices aren't displayed");
        //assert shopping cart table product remove buttons are displayed (as a list)
        assertTrue(shoppingCartPage.isShoppingCartTableProductPriceDisplayed(), "The shopping cart table product remove buttons aren't displayed");
        //summary table
        //assert shopping cart summary table subtotal subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableSubtotalSubtextDisplayed(), "The shopping cart summary table subtotal subtext isn't displayed");
        //assert shopping cart summary table subtotal price is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableSubtotalPriceDisplayed(), "The shopping cart summary table subtotal price isn't displayed");
        //assert shopping cart summary table shipping subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableShippingSubtextDisplayed(), "The shopping cart summary table shipping subtext isn't displayed");
        //assert shopping cart summary table shipping add info link is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableShippingAddInfoLinkDisplayed(), "The shopping cart summary table shipping add info link isn't displayed");
        //assert shopping cart summary table coupon code subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableCouponCodeSubtextDisplayed(), "The shopping cart summary table coupon code subtext isn't displayed");
        //assert shopping cart summary table coupon code add coupon link is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableAddCouponCodeLinkDisplayed(), "The shopping cart summary table coupon code add coupon link isn't displayed");
        //assert shopping cart summary table gift certificate subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableGiftCertificateSubtextDisplayed(), "The shopping cart summary table gift certificate subtext isn't displayed");
        //assert shopping cart summary table gift certificate link is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableAddGiftCertificateLinkDisplayed(), "The shopping cart summary table gift certificate link isn't displayed");
        //assert shopping cart summary table grand total subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableGrandTotalSubtextDisplayed(), "The shopping cart summary table grand total subtext isn't displayed");
        //assert shopping cart summary table grand total price is displayed
        assertTrue(shoppingCartPage.isShoppingCartSummaryTableGrandTotalPriceDisplayed(), "The shopping cart summary table grand total price isn't displayed");
        //assert shopping cart page checkout button is displayed
        assertTrue(shoppingCartPage.isShoppingCartPageCheckoutButtonDisplayed(), "The shopping cart page checkout button isn't displayed");
    }

    //shopping cart page shipping section web element assert test method
    protected void isShoppingCartPageShipSectionWebElementDisplayed(ShoppingCartPage shoppingCartPage) {
        //assert shopping cart page shipping section country subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartShippingCountrySubtextDisplayed(), "The shopping cart page shipping section country subtext isn't displayed");
        //assert shopping cart page shipping section country dropdown menu is displayed
        assertTrue(shoppingCartPage.isShoppingCartShippingCountryDropdownMenuDisplayed(), "The shopping cart page shipping section country dropdown menu isn't displayed");
        //assert shopping cart page shipping section state subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartShippingStateSubtextDisplayed(), "The shopping cart page shipping section state subtext isn't displayed");
        //assert shopping cart page shipping section state dropdown menu is displayed (after country selection it becomes a dropdown menu0
        //assertTrue(shoppingCartPage.isShoppingCartShippingStateDropdownMenuDisplayed(), "The shopping cart page shipping section state dropdown menu isn't displayed");
        //assert shopping cart page shipping section city subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartShippingCitySubtextDisplayed(), "The shopping cart page shipping section city subtext isn't displayed");
        //assert shopping cart page shipping section city input field is displayed
        assertTrue(shoppingCartPage.isShoppingCartShippingCityInputFieldDisplayed(), "The shopping cart page shipping section city input field isn't displayed");
        //assert shopping cart page shipping section post code subtext is displayed
        assertTrue(shoppingCartPage.isShoppingCartShippingPostCodeSubtextDisplayed(), "The shopping cart page shipping section post code subtext isn't displayed");
        //assert shopping cart page shipping section post code input field is displayed
        assertTrue(shoppingCartPage.isShoppingCartShippingPostCodeInputFieldDisplayed(), "The shopping cart page shipping section post code input field isn't displayed");
        //assert shopping cart page shipping section estimate shipping button is displayed
        assertTrue(shoppingCartPage.isShoppingCartEstimateShippingButtonDisplayed(), "The shopping cart page shipping section estimate shipping button isn't displayed");
    }

    //checkout page checkout section web element assert test method
    protected void isCheckoutPageCheckoutSectionWebElementDisplayed(CheckoutPage checkoutPage) {
        //assert checkout page checkout section title is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionTitleDisplayed(), "The checkout page checkout section title isn't displayed");
        //assert checkout page checkout section email subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageGuestEmailSubtextDisplayed(), "The checkout page checkout section email subtext isn't displayed");
        //assert checkout page checkout section email input field is displayed
        assertTrue(checkoutPage.isCheckoutPageGuestEmailInputFieldDisplayed(), "The checkout page checkout section email input field isn't displayed");
        //assert checkout page checkout section newsletter subscribe checkbox is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionNewsletterSubCheckboxDisplayed(), "The checkout page checkout section newsletter subscribe checkbox isn't displayed");
        //assert checkout page checkout section newsletter subscribe subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionNewsletterSubSubtextDisplayed(), "The checkout page checkout section newsletter subscribe subtext isn't displayed");
        //assert checkout page checkout section privacy policy checkbox is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionPrivacyPolicyCheckboxDisplayed(), "The checkout page checkout section privacy policy checkbox isn't displayed");
        //assert checkout page checkout section privacy policy subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionPrivacyPolicySubtextDisplayed(), "The checkout page checkout section privacy policy subtext isn't displayed");
        //assert checkout page checkout section privacy policy link is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionPrivacyPolicyLinkDisplayed(), "The checkout page checkout section privacy policy link isn't displayed");
        //assert checkout page checkout section sign in offer checkbox is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionSignInOfferSubtextDisplayed(), "The checkout page checkout section sign in offer isn't displayed");
        //assert checkout page checkout section sign in link is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionSignInLinkDisplayed(), "The checkout page checkout section sign in link isn't displayed");
        //assert checkout page checkout section privacy policy checkbox is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionPrivacyPolicyCheckboxDisplayed(), "The checkout page checkout section privacy policy checkbox isn't displayed");
        //assert checkout page checkout section continue button is displayed
        assertTrue(checkoutPage.isCheckoutPageCheckoutSectionContinueButtonDisplayed(), "The checkout page checkout section continue button isn't displayed");
    }

    //checkout page shipping address section web element assert test method
    protected void isCheckoutPageShippingAddressSectionWebElementDisplayed(CheckoutPage checkoutPage) {
        //assert checkout page shipping address section title is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingSectionTitleDisplayed(), "The checkout page shipping address section title isn't displayed");
        //assert checkout page shipping address section subtext is displayed (Selenium can't find this element with VALID selector)
        //assertTrue(checkoutPage.isCheckoutPageShippingSectionSubtextDisplayed(), "The checkout page shipping address section subtext isn't displayed");
        //assert checkout page shipping address section shipping to multiple addresses link is displayed (Selenium can't find this element with VALID selector)
        //assertTrue(checkoutPage.isCheckoutPageShippingSectionShipMultipleAddressesLinkDisplayed(), "The checkout page shipping address section shipping to multiple addresses link isn't displayed");
        //input form
        //assert checkout page shipping address section country subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingCountrySubtextDisplayed(), "The checkout page shipping address section country subtext isn't displayed");
        //assert checkout page shipping address section country dropdown menu is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingCountryDropdownMenuDisplayed(), "The checkout page shipping address section country dropdown menu isn't displayed");
        //assert checkout page shipping address section first name subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingFirstNameSubtextDisplayed(), "The checkout page shipping address section first name subtext isn't displayed");
        //assert checkout page shipping address section first name input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingFirstNameInputFieldDisplayed(), "The checkout page shipping address section first name input field isn't displayed");
        //assert checkout page shipping address section last name subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingLastNameSubtextDisplayed(), "The checkout page shipping address section last name subtext isn't displayed");
        //assert checkout page shipping address section last name input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingLastNameInputFieldDisplayed(), "The checkout page shipping address section last name input field isn't displayed");
        //assert checkout page shipping address section address subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingAddressSubtextDisplayed(), "The checkout page shipping address section first name subtext isn't displayed");
        //assert checkout page shipping address section address input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingAddressInputFieldDisplayed(), "The checkout page shipping address section first name input field isn't displayed");
        //assert checkout page shipping address section apartment subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingApartmentSubtextDisplayed(), "The checkout page shipping address section apartment subtext isn't displayed");
        //assert checkout page shipping address section apartment input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingApartmentInputFieldDisplayed(), "The checkout page shipping address section apartment input field isn't displayed");
        //assert checkout page shipping address section company subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingCompanySubtextDisplayed(), "The checkout page shipping address section company subtext isn't displayed");
        //assert checkout page shipping address section company input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingCompanyInputFieldDisplayed(), "The checkout page shipping address section company input field isn't displayed");
        //assert checkout page shipping address section city subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingCitySubtextDisplayed(), "The checkout page shipping address section city subtext isn't displayed");
        //assert checkout page shipping address section city input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingCityInputFieldDisplayed(), "The checkout page shipping address section city input field isn't displayed");
        //assert checkout page shipping address section state subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingStateSubtextDisplayed(), "The checkout page shipping address section state subtext isn't displayed");
        //assert checkout page shipping address section state input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingStateInputFieldDisplayed(), "The checkout page shipping address section state input field isn't displayed");
        //assert checkout page shipping address section post code subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingPostCodeSubtextDisplayed(), "The checkout page shipping address section post code subtext isn't displayed");
        //assert checkout page shipping address section post code input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingPostCodeInputFieldDisplayed(), "The checkout page shipping address section post code input field isn't displayed");
        //assert checkout page shipping address section phone subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingPhoneSubtextDisplayed(), "The checkout page shipping address section phone subtext isn't displayed");
        //assert checkout page shipping address section phone input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingPhoneInputFieldDisplayed(), "The checkout page shipping address section phone input field isn't displayed");
        //assert checkout page shipping address shipping abd billing addresses are same subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingAndBillAddressSameSubtextDisplayed(), "The checkout page shipping address section  shipping abd billing addresses are same subtext isn't displayed");
        //assert checkout page shipping address section shipping abd billing addresses are same checkbox is displayed (Selenium can't find this element with VALID selector)
        //assertTrue(checkoutPage.isCheckoutPageShippingAndBillAddressSameCheckboxDisplayed(), "The checkout page shipping address section  shipping abd billing addresses are same checkbox isn't displayed");
        //order comments
        //assert checkout page shipping address section order comments subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingOrderCommentsSubtextDisplayed(), "The checkout page shipping address section order comments subtext isn't displayed");
        //assert checkout page shipping address section order comments input field is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingOrderCommentsInputFieldDisplayed(), "The checkout page shipping address section order comments input field isn't displayed");
        //assert checkout page shipping address section phone subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingPhoneSubtextDisplayed(), "The checkout page shipping address section phone subtext isn't displayed");
        //assert checkout page shipping address continue button is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingContinueButtonDisplayed(), "The checkout page shipping address section continue button isn't displayed");
    }

    //checkout page shipping address section shipping method web element assert test method (appears only after shipping address input)
    protected void isCheckoutPageShippingAddressSectionShipMethodWebElementDisplayed(CheckoutPage checkoutPage) {
        //assert checkout page shipping address section shipping method subtitle is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingMethodSubtitleDisplayed(), "The checkout page shipping address section shipping method subtitle isn't displayed");
        //assert checkout page shipping address shipping method radio button is displayed (usually there's only one) (Selenium can't seem to find this element with VALID selector)
        //assertTrue(checkoutPage.isCheckoutPageShippingMethodRadioButtonDisplayed(), "The checkout page shipping address section shipping method (flat) radio button isn't displayed");
        //assert checkout page shipping address section shipping method (flat) subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingMethodSubtextDisplayed(), "The checkout page shipping address section shipping method (flat) subtext isn't displayed");
        //assert checkout page shipping address shipping method price is displayed
        assertTrue(checkoutPage.isCheckoutPageShippingMethodPriceDisplayed(), "The checkout page shipping address section shipping method price isn't displayed");
    }

    //checkout page billing address section web element assert test method
    protected void isCheckoutPageBillingAddressSectionWebElementDisplayed(CheckoutPage checkoutPage) {
        //assert checkout page billing address section title is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingSectionTitleDisplayed(), "The checkout page billing address section title isn't displayed");
        //assert checkout page billing address section subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingSectionSubtextDisplayed(), "The checkout page billing address section subtext isn't displayed");
        //input form
        //assert checkout page billing address section country subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingCountrySubtextDisplayed(), "The checkout page billing address section country subtext isn't displayed");
        //assert checkout page billing address section country dropdown menu is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingCountryDropdownMenuDisplayed(), "The checkout page billing address section country dropdown menu isn't displayed");
        //assert checkout page billing address section first name subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingFirstNameSubtextDisplayed(), "The checkout page billing address section first name subtext isn't displayed");
        //assert checkout page billing address section first name input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingFirstNameInputFieldDisplayed(), "The checkout page billing address section first name input field isn't displayed");
        //assert checkout page billing address section last name subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingLastNameSubtextDisplayed(), "The checkout page billing address section last name subtext isn't displayed");
        //assert checkout page billing address section last name input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingLastNameInputFieldDisplayed(), "The checkout page billing address section last name input field isn't displayed");
        //assert checkout page billing address section address subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingAddressSubtextDisplayed(), "The checkout page billing address section address subtext isn't displayed");
        //assert checkout page billing address section address input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingAddressInputFieldDisplayed(), "The checkout page billing address section address input field isn't displayed");
        //assert checkout page billing address section apartment subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingApartmentSubtextDisplayed(), "The checkout page billing address section apartment subtext isn't displayed");
        //assert checkout page billing address section apartment input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingApartmentInputFieldDisplayed(), "The checkout page billing address section apartment input field isn't displayed");
        //assert checkout page billing address section company subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingCompanySubtextDisplayed(), "The checkout page billing address section company subtext isn't displayed");
        //assert checkout page billing address section company input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingCompanyInputFieldDisplayed(), "The checkout page billing address section company input field isn't displayed");
        //assert checkout page billing address section city subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingCitySubtextDisplayed(), "The checkout page billing address section city subtext isn't displayed");
        //assert checkout page billing address section city input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingCityInputFieldDisplayed(), "The checkout page billing address section city input field isn't displayed");
        //assert checkout page billing address section state subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingStateSubtextDisplayed(), "The checkout page billing address section state subtext isn't displayed");
        //assert checkout page billing address section state input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingStateInputFieldDisplayed(), "The checkout page billing address section state input field isn't displayed");
        //assert checkout page billing address section post code subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingPostCodeSubtextDisplayed(), "The checkout page billing address section post code subtext isn't displayed");
        //assert checkout page billing address section post code input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingPostCodeInputFieldDisplayed(), "The checkout page billing address section post code input field isn't displayed");
        //assert checkout page billing address section phone subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingPhoneSubtextDisplayed(), "The checkout page billing address section phone subtext isn't displayed");
        //assert checkout page billing address section phone input field is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingPhoneInputFieldDisplayed(), "The checkout page billing address section phone input field isn't displayed");
        //assert checkout page billing address section continue button is displayed
        assertTrue(checkoutPage.isCheckoutPageBillingContinueButtonDisplayed(), "The checkout page billing address section continue button isn't displayed");
    }

    //checkout page payment section web element assert text method
    protected void isCheckoutPagePaymentSectionWebElementDisplayed(CheckoutPage checkoutPage) {
        //assert checkout page payment section title is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentSectionTitleDisplayed(), "The checkout page payment section title isn't displayed");
        //assert checkout page payment section test gateway subtext is displayed (Selenium can't seem to find this element with VALID selector)
        //assertTrue(checkoutPage.isCheckoutPagePaymentSectionTestGatewaySubtextDisplayed(), "The checkout page payment section test gateway subtext isn't displayed");
        //list elements
        //assert checkout page payment section card icons are displayed (as a list)
        assertTrue(checkoutPage.isCheckoutPagePaymentSectionCardIconDisplayed(), "The checkout page payment section card icons aren't displayed");
        //assert checkout page payment section icons (lock and '?') are displayed (as a list)
        assertTrue(checkoutPage.isCheckoutPagePaymentSectionIconDisplayed(), "The checkout page payment section icons (lock and '?') aren't displayed");
        //singular elements
        //assert checkout page payment section credit card subtext is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCreditCardSubtextDisplayed(), "The checkout page payment section credit card subtext isn't displayed");
        //assert checkout page payment section credit card input field is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCreditCardInputFieldDisplayed(), "The checkout page payment section credit card input field isn't displayed");
        //assert checkout page payment section credit card expiration date subtext is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCreditCardExpDateSubtextDisplayed(), "The checkout page payment section credit card expiration date subtext isn't displayed");
        //assert checkout page payment section credit card expiration date input field is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCreditCardExpDateInputFieldDisplayed(), "The checkout page payment section credit card expiration date input field isn't displayed");
        //assert checkout page payment section credit card name subtext is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCreditCardNameSubtextDisplayed(), "The checkout page payment section credit card name subtext isn't displayed");
        //assert checkout page payment section credit card name input field is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCreditCardNameInputFieldDisplayed(), "The checkout page payment section credit card name input field isn't displayed");
        //assert checkout page payment section credit card CVV number subtext is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCVVNumberSubtextDisplayed(), "The checkout page payment section credit card CVV number subtext isn't displayed");
        //assert checkout page payment section credit card CVV number input field is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentCVVNumberInputFieldDisplayed(), "The checkout page payment section credit card CVV number input field isn't displayed");
        //assert checkout page payment section place order button is displayed
        assertTrue(checkoutPage.isCheckoutPagePaymentPlaceOrderButtonDisplayed(), "The checkout page payment section place order button isn't displayed");
    }

    //checkout page order summary section web element assert test method
    protected void isCheckoutPageOrderSummarySectionWebElementDisplayed(CheckoutPage checkoutPage) {
        //assert checkout page order summary section title is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummarySectionTitleDisplayed(), "The checkout page order summary section title isn't displayed");
        //assert checkout page order summary section edit cart link is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryEditCartLinkDisplayed(), "The checkout page order summary section edit cart link isn't displayed");
        //order summary product table
        //assert checkout page order summary product count is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryProductCountDisplayed(), "The checkout page order summary product count isn't displayed");
        //list elements (table)
        //assert checkout page order summary product images are displayed (as a list)
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryProductImageDisplayed(), "The checkout page order summary section product images aren't displayed");
        //assert checkout page order summary product cunt and names (singular element block) are displayed (as a list)
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryProductCountAndNameDisplayed(), "The checkout page order summary section product count and names aren't displayed");
        //assert checkout page order summary product unit prices are displayed (as a list)
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryProductUnitPriceDisplayed(), "The checkout page order summary section product unit prices aren't displayed");
        //summary
        //assert checkout page order summary subtotal price subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummarySubtotalPriceSubtextDisplayed(), "The checkout page order summary subtotal price subtext isn't displayed");
        //assert checkout page order summary subtotal price is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummarySubtotalPriceDisplayed(), "The checkout page order summary subtotal price isn't displayed");
        //assert checkout page order summary shipping price subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryShippingPriceSubtextDisplayed(), "The checkout page order summary shipping price subtext isn't displayed");
        //assert checkout page order summary shipping price is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryShippingPriceDisplayed(), "The checkout page order summary shipping price isn't displayed");
        //assert checkout page order summary tax subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryTaxSubtextDisplayed(), "The checkout page order summary tax subtext isn't displayed");
        //assert checkout page order summary tax amount is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryTaxAmountDisplayed(), "The checkout page order summary tax amount isn't displayed");
        //assert checkout page order summary coupon link is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryCouponLinkDisplayed(), "The checkout page order summary coupon link isn't displayed");
        //assert checkout page order summary total price subtext is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryTotalPriceSubtextDisplayed(), "The checkout page order summary total price subtext isn't displayed");
        //assert checkout page order summary total price is displayed
        assertTrue(checkoutPage.isCheckoutPageOrderSummaryTotalPriceDisplayed(), "The checkout page order summary total price isn't displayed");
    }

    //checkout page checkout confirmation section web element assert test method
    protected void isCheckoutPageConfirmationSectionWebElementDisplayed(CheckoutPage checkoutPage) {
        //assert checkout page checkout confirmation section success message title is displayed
        assertTrue(checkoutPage.isCheckoutConfirmationMessageTitleDisplayed(), "The checkout page checkout confirmation section success message title isn't displayed");
        //assert checkout page checkout confirmation section order number text is displayed
        assertTrue(checkoutPage.isCheckoutConfirmationOrderNumberTextDisplayed(), "The checkout page checkout confirmation section order number text isn't displayed");
        //assert checkout page checkout confirmation section success message is displayed
        assertTrue(checkoutPage.isCheckoutConfirmationMessageDisplayed(), "The checkout page checkout confirmation section success message isn't displayed");
        //assert checkout page checkout confirmation section success message contact link is displayed
        assertTrue(checkoutPage.isCheckoutConfirmationMessageContactLinkDisplayed(), "The checkout page checkout confirmation section success message contact link isn't displayed");
        //assert checkout page checkout confirmation section success message phone link is displayed
        assertTrue(checkoutPage.isCheckoutConfirmationMessagePhoneLinkDisplayed(), "The checkout page checkout confirmation section success message phone link isn't displayed");
        //assert checkout page checkout confirmation section "Continue" button is displayed
        assertTrue(checkoutPage.isCheckoutConfirmationContinueShoppingButtonDisplayed(), "The checkout page checkout confirmation section 'Continue' button isn't displayed");
    }

    //order invoice page web element assert test method
    protected void isOrderInvoicePageWebElementDisplayed(OrderInvoicePage orderInvoicePage){
        //assert order invoice page order number is displayed
        assertTrue(orderInvoicePage.isOrderNumberDisplayed(), "The order invoice page order number isn't displayed");
        //order contents section
        //assert order invoice page order content section title is displayed
        assertTrue(orderInvoicePage.isOrderContentsSectionTitleDisplayed(), "The order invoice page order content section title isn't displayed");
        //assert order invoice page order content section item shipped subtext is displayed
        assertTrue(orderInvoicePage.isOrderContentsSectionItemShippedSubtextDisplayed(), "The order invoice page order content section item shipped subtext isn't displayed");
        //list elements
        //assert order invoice page order content section item checkbox(es) are displayed (as a list)
        assertTrue(orderInvoicePage.isOrderContentsItemCheckboxElementDisplayed(), "The order invoice page order content section item checkbox(es) aren't displayed");
        //assert order invoice page order content section item image(s) are displayed (as a list)
        assertTrue(orderInvoicePage.isOrderContentsItemImgElementDisplayed(), "The order invoice page order content section item image(s) aren't displayed");
        //assert order invoice page order content section item name count(s) are displayed (as a list)
        assertTrue(orderInvoicePage.isOrderContentsItemNameCountElementDisplayed(), "The order invoice page order content section item name count(s) aren't displayed");
        //assert order invoice page order content section item unit price(s) are displayed (as a list)
        assertTrue(orderInvoicePage.isOrderContentsItemUnitPriceElementDisplayed(), "The order invoice page order content section item unit price(s) aren't displayed");
        //order summary section
        //assert order invoice page order content subtotal subtext is displayed
        assertTrue(orderInvoicePage.isOrderContentsSubtotalSubtextDisplayed(), "The order invoice page order content section subtotal subtext isn't displayed");
        //assert order invoice page order content subtotal price is displayed
        assertTrue(orderInvoicePage.isOrderContentsSubtotalPriceDisplayed(), "The order invoice page order content section subtotal price isn't displayed");
        //assert order invoice page order content grand total subtext is displayed
        assertTrue(orderInvoicePage.isOrderContentsGrandTotalSubtextDisplayed(), "The order invoice page order content section grand total subtext isn't displayed");
        //assert order invoice page order content grand total price is displayed
        assertTrue(orderInvoicePage.isOrderContentsGrandTotalPriceDisplayed(), "The order invoice page order content section grand total price isn't displayed");
        //order details section
        //assert order invoice page order details section title is displayed
        assertTrue(orderInvoicePage.isOrderContentsOrderDetailsSectionTitleDisplayed(), "The order invoice page order details section title isn't displayed");
        //assert order invoice page order status subtext is displayed
        assertTrue(orderInvoicePage.isOrderContentsOrderStatusSubtextDisplayed(), "The order invoice page order status subtext isn't displayed");
        //assert order invoice page order status is displayed
        assertTrue(orderInvoicePage.isOrderContentsOrderStatusDisplayed(), "The order invoice page order status isn't displayed");
        //assert order invoice page order date subtext is displayed
        assertTrue(orderInvoicePage.isOrderContentsOrderDateSubtextDisplayed(), "The order invoice page order date subtext isn't displayed");
        //assert order invoice page order date is displayed
        assertTrue(orderInvoicePage.isOrderContentsOrderDateDisplayed(), "The order invoice page order date isn't displayed");
        //assert order invoice page order total subtext is displayed
        assertTrue(orderInvoicePage.isOrderContentsOrderTotalSubtextDisplayed(), "The order invoice page order total subtext isn't displayed");
        //assert order invoice page order total price is displayed
        assertTrue(orderInvoicePage.isOrderContentsOrderTotalDisplayed(), "The order invoice page order total price isn't displayed");
        //assert order invoice page payment method subtext is displayed
        assertTrue(orderInvoicePage.isOrderContentsPayMethodSubtextDisplayed(), "The order invoice page payment method subtext isn't displayed");
        //assert order invoice page payment method is displayed
        assertTrue(orderInvoicePage.isOrderContentsPayMethodDisplayed(), "The order invoice page payment method isn't displayed");
        //assert order invoice page print invoice button is displayed
        assertTrue(orderInvoicePage.isOrderContentsPrintInvoiceButtonDisplayed(), "The order invoice page print invoice button isn't displayed");
        //shipping to address section
        //assert order invoice page shipping to address section title is displayed
        assertTrue(orderInvoicePage.isOrderContentsShipToSectionTitleDisplayed(), "The order invoice page shipping to address section title isn't displayed");
        //assert order invoice page shipping to address name is displayed
        assertTrue(orderInvoicePage.isOrderContentsShippingNameDisplayed(), "The order invoice page shipping to address name isn't displayed");
        //assert order invoice page shipping to address is displayed
        assertTrue(orderInvoicePage.isOrderContentsShippingAddressDisplayed(), "The order invoice page shipping to address isn't displayed");
        //assert order invoice page shipping to address two is displayed
        assertTrue(orderInvoicePage.isOrderContentsShippingAddressTwoDisplayed(), "The order invoice page shipping to address two isn't displayed");
        //assert order invoice page shipping to country is displayed
        assertTrue(orderInvoicePage.isOrderContentsShippingCountryDisplayed(), "The order invoice page shipping to country isn't displayed");
        //billing to address section
        //assert order invoice page billing to address section title is displayed
        assertTrue(orderInvoicePage.isOrderContentsBillToSectionTitleDisplayed(), "The order invoice page billing to address section title isn't displayed");
        //assert order invoice page billing to address name is displayed
        assertTrue(orderInvoicePage.isOrderContentsBillingNameDisplayed(), "The order invoice page billing to address name isn't displayed");
        //assert order invoice page billing to address is displayed
        assertTrue(orderInvoicePage.isOrderContentsBillingAddressDisplayed(), "The order invoice page billing to address isn't displayed");
        //assert order invoice page billing to address two is displayed
        assertTrue(orderInvoicePage.isOrderContentsBillingAddressTwoDisplayed(), "The order invoice page billing to address two isn't displayed");
        //assert order invoice page billing to country is displayed
        assertTrue(orderInvoicePage.isOrderContentsBillingCountryDisplayed(), "The order invoice page billing to country isn't displayed");
        //actions section
        //assert order invoice page actions section title is displayed
        assertTrue(orderInvoicePage.isOrderContentsActionsSectionTitleDisplayed(), "The order invoice page actions section title isn't displayed");
        //assert order invoice page reorder button is displayed
        assertTrue(orderInvoicePage.isOrderContentsReorderButtonDisplayed(), "The order invoice page reorder button isn't displayed");
    }

    //add review modal page web element assert test method
    protected void isAddReviewModalPageWebElementDisplayed(AddReviewModalPage addReviewModalPage) {
        //assert add review modal page title is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalTitleDisplayed(), "The add review modal page title isn't displayed");
        //assert add review modal page close button is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalCloseButtonDisplayed(), "The add review modal page close button isn't displayed");
        //assert add review modal page product image is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalProductImageDisplayed(), "The add review modal page product image isn't displayed");
        //assert add review modal page product brand is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalProductBrandDisplayed(), "The add review modal page product brand isn't displayed");
        //assert add review modal page product name is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalProductNameDisplayed(), "The add review modal page product name isn't displayed");
        //assert add review modal page rating subtext is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalRatingSubtextDisplayed(), "The add review modal page rating subtext isn't displayed");
        //assert add review modal page rating dropdown menu is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalRatingDropdownMenuDisplayed(), "The add review modal page rating dropdown menu isn't displayed");
        //assert add review modal page name subtext is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalNameSubtextDisplayed(), "The add review modal page name subtext isn't displayed");
        //assert add review modal page name input field is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalNameInputFieldDisplayed(), "The add review modal page name input field isn't displayed");
        //assert add review modal page email subtext is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalEmailSubtextDisplayed(), "The add review modal page email subtext isn't displayed");
        //assert add review modal page email input field is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalEmailInputFieldDisplayed(), "The add review modal page email input field isn't displayed");
        //assert add review modal page review subject subtext is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalReviewSubjectSubtextDisplayed(), "The add review modal page review subject subtext isn't displayed");
        //assert add review modal page review subject input field is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalReviewSubjectInputFieldDisplayed(), "The add review modal page review subject input field isn't displayed");
        //assert add review modal page review subtext is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalCommentsSubtextDisplayed(), "The add review modal page review subtext isn't displayed");
        //assert add review modal page review textarea is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalCommentsInputFieldDisplayed(), "The add review modal page review textarea isn't displayed");
        //assert add review modal page submit review button is displayed
        assertTrue(addReviewModalPage.isAddReviewPageModalSubmitReviewButtonDisplayed(), "The add review modal page submit review isn't displayed");
        //list elements
        //assert add review modal page required tags are displayed (as a list)
        assertTrue(addReviewModalPage.isAddReviewPageModalNameRequiredTagDisplayed(), "The add review modal page required tags aren't displayed");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //general page text element assert test method(elements that all pages have)
    protected void isGeneralPageTextElementAsExpected(GeneralPage generalPage) {
        //header -> upper navbar
        //assert header upper navbar search dropdown link text is as expected
        assertEquals("SEARCH", generalPage.getHeaderUpperNavSearchDropdownText(), "The header upper navbar search dropdown link text doesn't match expectations.");
        //assert header upper navbar gift certificates link text is as expected
        assertEquals("GIFT CERTIFICATES", generalPage.getHeaderUpperNavGiftCertificateText(), "The header upper navbar gift certificates link text doesn't match expectations.");
        //assert header upper navbar cart link text is as expected (it changes to cart 1 when item is added)
        //assertEquals("CART", generalPage.getHeaderUpperNavCartLinkText(), "The header upper navbar cart link text doesn't match expectations.");
        //assert header home page logo link text is as expected
        assertEquals("CORNERSTONE DEMO", generalPage.getHeaderHomePageLogoLinkText(), "The header home page logo link text doesn't match expectations.");
        //header -> lower navbar
        //assert header lower navbar garden dropdown link text is as expected
        assertEquals("GARDEN", generalPage.getHeaderLowerNavGardenDropdownLinkText(), "The header lower navbar garden dropdown link text doesn't match expectations.");
        //assert header lower navbar shop all link text is as expected
        assertEquals("SHOP ALL", generalPage.getHeaderLowerNavShopAllLinkText(), "The header lower navbar shop all link text doesn't match expectations.");
        //assert header lower navbar kitchen link text is as expected
        assertEquals("KITCHEN", generalPage.getHeaderLowerNavKitchenLinkText(), "The header lower navbar kitchen link text doesn't match expectations.");
        //assert header lower navbar publications link text is as expected
        assertEquals("PUBLICATIONS", generalPage.getHeaderLowerNavPublicationsLinkText(), "The header lower navbar publications link text doesn't match expectations.");
        //assert header lower navbar utility link text is as expected
        assertEquals("UTILITY", generalPage.getHeaderLowerNavUtilityLinkText(), "The header lower navbar utility link text doesn't match expectations.");
        //assert header lower navbar journal link text is as expected
        assertEquals("JOURNAL", generalPage.getHeaderLowerNavJournalLinkText(), "The header lower navbar journal link text doesn't match expectations.");
        //assert header lower navbar our story link text is as expected
        assertEquals("OUR STORY", generalPage.getHeaderLowerNavOurStoryLinkText(), "The header lower navbar our story link text doesn't match expectations.");
        //assert header lower navbar contact us link text is as expected
        assertEquals("CONTACT US", generalPage.getHeaderLowerNavContactUsLinkText(), "The header lower navbar contact us link text doesn't match expectations.");
        //assert header lower navbar shipping and returns link text is as expected
        assertEquals("SHIPPING & RETURNS", generalPage.getHeaderLowerNavShippingAndReturnsLinkText(), "The header lower navbar shipping and returns link text doesn't match expectations.");
        //footer section
        //navigate column
        //assert footer navigate section title is as expected
        assertEquals("Navigate", generalPage.getFooterNavigateSectionTitle(), "The footer navigate section title doesn't match expectations.");
        //assert footer navigate section journal link text is as expected
        assertEquals("Journal", generalPage.getFooterJournalLinkText(), "The footer navigate section journal link text doesn't match expectations.");
        //assert footer navigate section our story link text is as expected
        assertEquals("Our Story", generalPage.getFooterOurStoryLinkText(), "The footer navigate section our story link text doesn't match expectations.");
        //assert footer navigate section contact us link text is as expected
        assertEquals("Contact Us", generalPage.getFooterContactUsLinkText(), "The footer navigate section contact us link text doesn't match expectations.");
        //assert footer navigate section shipping and returns link text is as expected
        assertEquals("Shipping & Returns", generalPage.getFooterShippingAndReturnsLinkText(), "The footer navigate section shipping and returns link text doesn't match expectations.");
        //assert footer navigate section sitemap link text is as expected
        assertEquals("Sitemap", generalPage.getFooterSitemapLinkText(), "The footer navigate section sitemap link text doesn't match expectations.");
        //categories column
        //assert footer categories section title is as expected
        assertEquals("Categories", generalPage.getFooterCategoriesSectionTitle(), "The footer categories section title doesn't match expectations.");
        //assert footer categories section garden link text is as expected
        assertEquals("Garden", generalPage.getFooterGardenLinkText(), "The footer categories section garden link text doesn't match expectations.");
        //assert footer categories section shop all link text is as expected
        assertEquals("Shop All", generalPage.getFooterShopAllLinkText(), "The footer categories section shop all link text doesn't match expectations.");
        //assert footer categories section kitchen link text is as expected
        assertEquals("Kitchen", generalPage.getFooterKitchenLinkText(), "The footer categories section kitchen link text doesn't match expectations.");
        //assert footer categories section publications link text is as expected
        assertEquals("Publications", generalPage.getFooterPublicationsLinkText(), "The footer categories section publications link text doesn't match expectations.");
        //assert footer categories section utility link text is as expected
        assertEquals("Utility", generalPage.getFooterUtilityLinkText(), "The footer categories section utility link text doesn't match expectations.");
        //popular brands column
        //assert footer popular brands section title is as expected
        assertEquals("Popular Brands", generalPage.getFooterPopularBrandsSectionTitle(), "The footer popular brands section title doesn't match expectations.");
        //assert footer popular brands section fresh brand link text is as expected
        assertEquals("FreshBrand", generalPage.getFooterFreshBrandLinkText(), "The footer popular brands section fresh brand link text doesn't match expectations.");
        //assert footer popular brands section OFS link text is as expected
        assertEquals("OFS", generalPage.getFooterOFSLinkText(), "The footer popular brands section OFS link text doesn't match expectations.");
        //assert footer popular brands section view all link text is as expected
        assertEquals("View All", generalPage.getFooterViewAllLinkText(), "The footer popular brands section view all link text doesn't match expectations.");
        //information column
        //assert footer information section title is as expected
        assertEquals("Info", generalPage.getFooterInfoSectionTitle(), "The footer information section title doesn't match expectations.");
        //assert footer information section address text is as expected
        assertEquals("685 Market Street\n" + "San Francisco, CA 94105", generalPage.getFooterAddressText(), "The footer information section address text doesn't match expectations.");
        //assert footer information section call us text is as expected
        assertEquals("Call us at (415) 555-5555", generalPage.getFooterCallUsText(), "The footer information section call us text doesn't match expectations.");
        //subscribe to newsletter column
        //assert footer subscribe to newsletter section title is as expected
        assertEquals("Subscribe to our newsletter", generalPage.getFooterSubscribeToNewsletterSectionTitle(), "The footer subscribe to newsletter section title doesn't match expectations.");
        //assert footer subscribe to newsletter section address text is as expected
        assertEquals("Get the latest updates on new products and upcoming sales", generalPage.getFooterSubscribeToNewsletterSectionSubtext(), "The footer subscribe to newsletter section subtext doesn't match expectations.");
        //copyright text elements
        //assert footer powered by text is as expected
        assertEquals("Powered by BigCommerce", generalPage.getFooterPoweredByText(), "The footer powered by text doesn't match expectations.");
        //assert footer copyright text is as expected
        assertEquals("© 2025 Cornerstone Demo", generalPage.getFooterCopyrightText(), "The footer copyright text doesn't match expectations.");
    }

    //home page text element assert test method
    protected void isHomePageTextElementAsExpected(HomePage homePage) {
        //assert home page carousel image title is as expected
        assertEquals("Cornerstone Light", homePage.getHomePageCarouselImageTitle().getFirst(), "The home page carousel image title doesn't match expectations.");
        //assert home page carousel image subtitle is as expected
        assertEquals("Integer facilisis sed nunc vitae elementum. Integer rutrum varius orci, a auctor diam vestibulum in. Vestibulum vitae libero nec risus eleifend vehicula in eu neque.", homePage.getHomePageCarouselImageSubtitle().getFirst(), "The home page carousel image subtitle doesn't match expectations.");
        //assert home page most popular products section title is as expected
        assertEquals("Most Popular Products", homePage.getHomePageMostPopularSectionTitle(), "The home page most popular products title doesn't match expectations.");
        //assert home page new products section title is as expected
        assertEquals("New Products", homePage.getHomePageNewProductsSectionTitle(), "The home page new products section title doesn't match expectations.");
        //assert home page banner link text is as expected
        assertEquals("Save 25% on our Orbit Terrarium", homePage.getHomePageBannerLinkText(), "The home page banner link text doesn't match expectations.");
    }

    //register page text element assert test method
    protected void isRegisterPageTextElementAsExpected(RegisterPage registerPage) {
        //assert register page title is as expected
        assertEquals("New Account", registerPage.getRegisterPageTitle(), "The register page title doesn't match expectations.");
        //assert register page email subtext is as expected
        assertEquals("Email Address", registerPage.getRegisterPageEmailSubtext(), "The register page email subtext doesn't match expectations.");
        //assert register page password subtext is as expected
        assertEquals("Password", registerPage.getRegisterPagePasswordSubtext(), "The register page password subtext doesn't match expectations.");
        //assert register page confirm password subtext is as expected
        assertEquals("Confirm Password", registerPage.getRegisterPageConfirmPasswordSubtext(), "The register page confirm password subtext doesn't match expectations.");
        //assert register page country subtext is as expected
        assertEquals("Country", registerPage.getRegisterPageCountrySubtext(), "The register page country subtext doesn't match expectations.");
        //assert register page first name subtext is as expected
        assertEquals("First Name", registerPage.getRegisterPageFirstNameSubtext(), "The register page first name subtext doesn't match expectations.");
        //assert register page last name subtext is as expected
        assertEquals("Last Name", registerPage.getRegisterPageLastNameSubtext(), "The register page last name subtext doesn't match expectations.");
        //assert register page address 1 subtext is as expected
        assertEquals("Address Line 1", registerPage.getRegisterPageAddress1Subtext(), "The register page address 1 subtext doesn't match expectations.");
        //assert register page address 2 subtext is as expected
        assertEquals("Address Line 2", registerPage.getRegisterPageAddress2Subtext(), "The register page address 2 subtext doesn't match expectations.");
        //assert register page company subtext is as expected
        assertEquals("Company Name", registerPage.getRegisterPageCompanySubtext(), "The register page company subtext doesn't match expectations.");
        //assert register page city subtext is as expected
        assertEquals("Suburb/City", registerPage.getRegisterPageCitySubtext(), "The register page city subtext doesn't match expectations.");
        //assert register page state subtext is as expected
        assertEquals("State/Province", registerPage.getRegisterPageStateSubtext(), "The register page state subtext doesn't match expectations.");
        //assert register page post code subtext is as expected
        assertEquals("Zip/Postcode", registerPage.getRegisterPagePostCodeSubtext(), "The register page post code subtext doesn't match expectations.");
        //assert register page phone subtext is as expected
        assertEquals("Phone Number", registerPage.getRegisterPagePhoneSubtext(), "The register page phone subtext doesn't match expectations.");
        //assert register page required tags and their count are as expected
        List<String> expected = Collections.nCopies(11, "REQUIRED"); //assert the tag count and content is as expected (since it's an array of tags)
        assertEquals(expected, registerPage.getRegisterPageRequiredTagElements(), "The register page required tags don't match expectations.");
    }

    //account dashboard page text element assert test method
    protected void isAccountDashboardPageTextElementAsExpected(AccountDashboardPage accountDashboardPage) {
        //assert account dashboard page navbar orders link is as expected
        assertEquals("Orders", accountDashboardPage.getAccountDashboardPageNavbarOrdersLinkText(), "The account dashboard page navbar orders link doesn't match expectations.");
        //assert account dashboard page navbar returns link is as expected
        assertEquals("Returns", accountDashboardPage.getAccountDashboardPageNavbarReturnsLinkText(), "The account dashboard page navbar returns link doesn't match expectations.");
        //assert account dashboard page navbar messages link is as expected
        assertEquals("Messages ", accountDashboardPage.getAccountDashboardPageNavbarMessagesLinkText(), "The account dashboard page navbar messages link doesn't match expectations.");
        //assert account dashboard page navbar addresses link is as expected
        assertEquals("Addresses", accountDashboardPage.getAccountDashboardPageNavbarAddressesLinkText(), "The account dashboard page navbar addresses link doesn't match expectations.");
        //assert account dashboard page navbar wishlists link is as expected
        assertEquals("Wish Lists", accountDashboardPage.getAccountDashboardPageNavbarWishlistsLinkText(), "The account dashboard page navbar wishlists link doesn't match expectations.");
        //assert account dashboard page navbar recently viewed link is as expected
        assertEquals("Recently Viewed", accountDashboardPage.getAccountDashboardPageNavbarRecentlyViewedLinkText(), "The account dashboard page navbar recently viewed link doesn't match expectations.");
        //assert account dashboard page navbar account settings link is as expected
        assertEquals("Account Settings", accountDashboardPage.getAccountDashboardPageNavbarAccountSettingsLinkText(), "The account dashboard page navbar account settings link doesn't match expectations.");
    }

    //orders page text element assert test method (before any order placement, the user gets here after register/login)
    protected void isOrdersPageNoOrderTextElementsAsExpected(AccountDashboardPage accountDashboardPage) {
        //assert account dashboard page title is as expected (since the user gets on orders page section after clicking 'Account')
        assertEquals("Orders", accountDashboardPage.getAccountDashboardPageTitle(), "The account dashboard page title doesn't match expectations.");
        //assert account dashboard page orders info box text is as expected
        assertEquals("You haven't placed any orders with us. When you do, their status will appear on this page.", accountDashboardPage.getAccountDashboardPageOrdersNotPlacedBoxText(), "The account dashboard page orders not placed box doesn't match expectations.");
    }

    //account settings page text element assert test method
    protected void isAccountSettingsPageTextElementAsExpected(AccountSettingsPage accountSettingsPage) {
        //assert account settings page title is as expected
        assertEquals("Account Settings", accountSettingsPage.getAccountSettingsPageTitle(), "The account settings page title doesn't match expectations.");
        //assert account settings page first name subtext is as expected
        assertEquals("First Name", accountSettingsPage.getAccountSettingsPageFirstNameSubtext(), "The account settings page first name subtext doesn't match expectations.");
        //assert account settings page last name subtext is as expected
        assertEquals("Last Name", accountSettingsPage.getAccountSettingsPageLastNameSubtext(), "The account settings page last name subtext doesn't match expectations.");
        //assert account settings page company subtext is as expected
        assertEquals("Company", accountSettingsPage.getAccountSettingsPageCompanySubtext(), "The account settings page company subtext doesn't match expectations.");
        //assert account settings page phone subtext is as expected
        assertEquals("Phone Number", accountSettingsPage.getAccountSettingsPagePhoneSubtext(), "The account settings page phone subtext doesn't match expectations.");
        //assert account settings page email subtext is as expected
        assertEquals("Email Address", accountSettingsPage.getAccountSettingsPageEmailSubtext(), "The account settings page email subtext doesn't match expectations.");
        //assert account settings page password subtext is as expected
        assertEquals("Password", accountSettingsPage.getAccountSettingsPagePasswordSubtext(), "The account settings page password subtext doesn't match expectations.");
        //assert account settings page current password subtext is as expected
        assertEquals("Current Password", accountSettingsPage.getAccountSettingsPageCurrentPasswordSubtext(), "The account settings page current password subtext doesn't match expectations.");
        //assert account settings page confirm password subtext is as expected
        assertEquals("Confirm Password", accountSettingsPage.getAccountSettingsPageConfirmPasswordSubtext(), "The account settings page confirm password subtext doesn't match expectations.");
    }

    //add address page text element assert test method
    protected void isAddAddressPageTextElementAsExpected(AddAddressPage addAddressPage) {
        //assert add address page company subtext is as expected
        assertEquals("Country", addAddressPage.getAddAddressPageCountrySubtext(), "The add address page country subtext doesn't match expectations.");
        //assert add address page first name subtext is as expected
        assertEquals("First Name", addAddressPage.getAddAddressPageFirstNameSubtext(), "The add address page first name subtext doesn't match expectations.");
        //assert add address page last name subtext is as expected
        assertEquals("Last Name", addAddressPage.getAddAddressPageLastNameSubtext(), "The add address page last name subtext doesn't match expectations.");
        //assert add address page address 1 subtext is as expected
        assertEquals("Address Line 1", addAddressPage.getAddAddressPageAddress1Subtext(), "The add address page address 1 subtext doesn't match expectations.");
        //assert add address page address 2 subtext is as expected
        assertEquals("Address Line 2", addAddressPage.getAddAddressPageAddress2Subtext(), "The add address page address 2 subtext doesn't match expectations.");
        //assert add address page company subtext is as expected
        assertEquals("Company Name", addAddressPage.getAddAddressPageCompanySubtext(), "The add address page company subtext doesn't match expectations.");
        //assert add address page city subtext is as expected
        assertEquals("Suburb/City", addAddressPage.getAddAddressPageCitySubtext(), "The add address page city subtext doesn't match expectations.");
        //assert add address page state subtext is as expected
        assertEquals("State/Province", addAddressPage.getAddAddressPageStateSubtext(), "The add address page state subtext doesn't match expectations.");
        //assert add address page post code subtext is as expected
        assertEquals("Zip/Postcode", addAddressPage.getAddAddressPagePostCodeSubtext(), "The add address page post code subtext doesn't match expectations.");
        //assert add address page phone subtext is as expected
        assertEquals("Phone Number", addAddressPage.getAddAddressPagePhoneSubtext(), "The add address page phone subtext doesn't match expectations.");
        //assert add address page required tags and their count are as expected
        List<String> expected = Collections.nCopies(8, "REQUIRED"); //assert the tag count and content is as expected (since it's an array of tags)
        assertEquals(expected, addAddressPage.getAddAddressRequiredTagElements(), "The add address page required tags don't match expectations.");
    }

    //login register dashboard page text element assert test method
    protected void isLoginRegisterDashboardTextElementAsExpected(LoginRegisterDashboardPage loginRegisterDashboardPage) {
        //assert login register dashboard page title is as expected
        assertEquals("Sign in", loginRegisterDashboardPage.getLoginRegisterDashboardPageTitle(), "The login register dashboard page title doesn't match expectations.");
        //login section
        //assert login register dashboard page email subtext is as expected
        assertEquals("Email Address:", loginRegisterDashboardPage.getLoginSectionEmailSubtext(), "The login register dashboard page email subtext doesn't match expectations.");
        //assert login register dashboard page password subtext is as expected
        assertEquals("Password:", loginRegisterDashboardPage.getLoginSectionPasswordSubtext(), "The login register dashboard page password subtext doesn't match expectations.");
        //assert login register dashboard forgot password link text is as expected
        assertEquals("Forgot your password?", loginRegisterDashboardPage.getLoginSectionForgotPasswordLinkText(), "The login register dashboard page forgot password link text doesn't match expectations.");
        //new customer (register) section
        //assert login register dashboard register section title is as expected
        assertEquals("New Customer?", loginRegisterDashboardPage.getRegisterSectionTitle(), "The login register dashboard page register section title doesn't match expectations.");
        //assert login register dashboard register description subtitle is as expected
        assertEquals("Create an account with us and you'll be able to:", loginRegisterDashboardPage.getRegisterSectionDescriptionSubtitle(), "The login register dashboard page register section description subtitle doesn't match expectations.");
        //assert login register dashboard register description elements are as expected (as a list)
        List<String> expected = Arrays.asList("Check out faster", "Save multiple shipping addresses", "Access your order history", "Track new orders", "Save items to your Wish List");
        assertEquals(expected, loginRegisterDashboardPage.getRegisterSectionDescriptionText(), "The login register dashboard page register section description elements don't match expectations.");
    }

    //single product page text element assert test method
    protected void isSingleProductPageTextElementAsExpected(SingleProductPage singleProductPage) {
        //assert single product page product weight subtext is as expected
        assertEquals("Weight:", singleProductPage.getSingleProductPageProductWeightSubtext(), "The single product page product weight subtext doesn't match expectations.");
        //assert single product page gift wrapping subtext is as expected
        assertEquals("Gift wrapping:", singleProductPage.getSingleProductPageGiftWrappingSubtext(), "The single product page gift wrapping subtext doesn't match expectations.");
        //assert single product page shipping subtext is as expected
        assertEquals("Shipping:", singleProductPage.getSingleProductPageShippingSubtext(), "The single product page shipping subtext doesn't match expectations.");
        //assert single product page product quantity subtext is as expected
        assertEquals("Quantity:", singleProductPage.getSingleProductPageProductQtySubtext(), "The single product page product quantity subtext doesn't match expectations.");
    }

    //shopping cart modal text element assert test method
    protected void isShoppingCartModalTextElementAsExpected(SingleProductPage singleProductPage) {
        //assert shopping cart modal title is as expected
        assertEquals("Ok,  items were added to your cart. What's next?", singleProductPage.getShoppingCartModalTitle(), "The shopping cart modal title doesn't match expectations.");
        //assert shopping cart modal order subtotal subtext is as expected
        assertEquals("Order subtotal", singleProductPage.getShoppingCartModalOrderSubtotalSubtext(), "The shopping cart modal order subtotal subtext doesn't match expectations.");
    }

    //single category dashboard page text element assert test method
    protected void isSingleCategoryDashboardPageTextElementAsExpected(SingleCategoryDashboardPage singleCategoryDashboardPage) {
        //aside section
        //assert single category dashboard page refined by section subtitle is as expected
        assertEquals("Refine by", singleCategoryDashboardPage.getSingleCategoryDashboardPageRefinedBySubtitle(), "The single category dashboard page refined by section subtitle doesn't match expectations.");
        //assert single category dashboard page brand section subtitle is as expected
        assertEquals("Brand", singleCategoryDashboardPage.getSingleCategoryDashboardPageBrandSubtitle(), "The single category dashboard page brand section subtitle doesn't match expectations.");
        //assert single category dashboard page price section subtitle is as expected (sometimes it isn't displayed, due to additional div change)
        //assertEquals("Price", singleCategoryDashboardPage.getSingleCategoryDashboardPagePriceSubtitle(), "The single category dashboard page price section subtitle doesn't match expectations.");
    }

    //add to compare list page text element assert test method
    protected void isAddToCompareListPageTextElementAsExpected(AddToCompareListPage addToCompareListPage) {
        //assert add to compare list page description subtext is as expected
        assertEquals("Description", addToCompareListPage.getAddToCompareListPageDescriptionSubtext(), "The add to compare list page description subtext doesn't match expectations.");
        //assert add to compare list page rating subtext is as expected
        assertEquals("Rating", addToCompareListPage.getAddToCompareListPageRatingSubtext(), "The add to compare list page rating subtext doesn't match expectations.");
        //assert add to compare list page availability subtext is as expected
        assertEquals("Availability:", addToCompareListPage.getAddToCompareListPageAvailabilitySubtext(), "The add to compare list page availability subtext doesn't match expectations.");
        //assert add to compare list page other details subtext is as expected
        assertEquals("Other Details", addToCompareListPage.getAddToCompareListPageOtherDetailsSubtext(), "The add to compare list page other details subtext doesn't match expectations.");
    }

    //shopping cart page text element assert test method
    protected void isShoppingCartPageTextElementAsExpected(ShoppingCartPage shoppingCartPage) {
        //assert shopping cart page title is as expected
        assertEquals("Your Cart", shoppingCartPage.getShoppingCartPageTitle(), "The shopping cart page title doesn't match expectations.");
        //shopping cart table
        //assert shopping cart table item subtext is as expected
        assertEquals("Item", shoppingCartPage.getShoppingCartTableItemSubtext(), "The shopping cart table item subtext doesn't match expectations.");
        //assert shopping cart table price subtext is as expected
        assertEquals("Price", shoppingCartPage.getShoppingCartTablePriceSubtext(), "The shopping cart table price subtext doesn't match expectations.");
        //assert shopping cart table quantity subtext is as expected
        assertEquals("Quantity", shoppingCartPage.getShoppingCartTableQuantitySubtext(), "The shopping cart table quantity subtext doesn't match expectations.");
        //assert shopping cart table total price subtext is as expected
        assertEquals("Total", shoppingCartPage.getShoppingCartTableTotalSubtext(), "The shopping cart table total price subtext doesn't match expectations.");
        //summary table
        //assert shopping cart summary table subtotal price subtext is as expected
        assertEquals("Subtotal:", shoppingCartPage.getShoppingCartSummaryTableSubtotalSubtext(), "The shopping cart summary table subtotal price subtext doesn't match expectations.");
        //assert shopping cart summary table shipping subtext is as expected
        assertEquals("Shipping:", shoppingCartPage.getShoppingCartSummaryTableShippingSubtext(), "The shopping cart summary table shipping subtext doesn't match expectations.");
        //assert shopping cart summary table coupon code subtext is as expected
        assertEquals("Coupon Code:", shoppingCartPage.getShoppingCartSummaryTableCouponCodeSubtext(), "The shopping cart summary table coupon code subtext doesn't match expectations.");
        //assert shopping cart summary table gift certificate subtext is as expected
        assertEquals("Gift Certificate:", shoppingCartPage.getShoppingCartSummaryTableGiftCertificateSubtext(), "The shopping cart summary table gift certificate subtext doesn't match expectations.");
        //assert shopping cart summary table grand total price subtext is as expected
        assertEquals("Grand total:", shoppingCartPage.getShoppingCartSummaryTableGrandTotalSubtext(), "The shopping cart summary table grand total price subtext doesn't match expectations.");
    }

    //shopping cart page shipping section text element assert test method
    protected void isShoppingCartShipSectionTextElementAsExpected(ShoppingCartPage shoppingCartPage) {
        //assert shopping cart summary table shipping section country subtext is as expected
        assertEquals("Country", shoppingCartPage.getShoppingCartShippingCountrySubtext(), "The shopping cart summary table shipping section country subtext doesn't match expectations.");
        //assert shopping cart summary table shipping section state subtext is as expected
        assertEquals("State/province", shoppingCartPage.getShoppingCartShippingStateSubtext(), "The shopping cart summary table shipping section state subtext doesn't match expectations.");
        //assert shopping cart summary table shipping section city subtext is as expected
        assertEquals("Suburb/city", shoppingCartPage.getShoppingCartShippingCitySubtext(), "The shopping cart summary table shipping section city subtext doesn't match expectations.");
        //assert shopping cart summary table shipping section post code subtext is as expected
        assertEquals("Zip/postcode", shoppingCartPage.getShoppingCartShippingPostCodeSubtext(), "The shopping cart summary table shipping section post code subtext doesn't match expectations.");
    }

    //checkout page checkout (customer) section text element assert test method
    protected void isCheckoutPageCheckoutSectionTextElementAsExpected(CheckoutPage checkoutPage) {
        //assert checkout page checkout section title is as expected
        assertEquals("Customer", checkoutPage.getCheckoutPageCheckoutSectionTitle(), "The checkout page checkout section title doesn't match expectations.");
        //assert checkout page checkout section email subtext is as expected
        assertEquals("Email", checkoutPage.getCheckoutPageGuestEmailSubtext(), "The checkout page checkout section email subtext doesn't match expectations.");
        //assert checkout page checkout section newsletter subscribe subtext is as expected
        assertEquals("Subscribe to our newsletter.", checkoutPage.getCheckoutPageCheckoutSectionNewsletterSubSubtext(), "The checkout page checkout section newsletter subscribe subtext doesn't match expectations.");
        //assert checkout page checkout section privacy policy subtext is as expected
        assertEquals("Yes, I agree with the privacy policy.", checkoutPage.getCheckoutPageCheckoutSectionPrivacyPolicySubtext(), "The checkout page checkout section privacy policy subtext doesn't match expectations.");
        //assert checkout page checkout section sign in offer subtext is as expected
        assertEquals("Already have an account? Sign in now", checkoutPage.getCheckoutPageCheckoutSectionSignInOfferSubtext(), "The checkout page checkout section sign in offer subtext doesn't match expectations.");
    }

    //checkout page shipping address section text element assert
    protected void isCheckoutPageShippingAddressSectionTextElementAsExpected(CheckoutPage checkoutPage) {
        //assert checkout page shipping address section title is as expected
        assertEquals("Shipping", checkoutPage.getCheckoutPageShippingSectionTitle(), "The checkout page shipping address section title doesn't match expectations.");
        //assert checkout page shipping address section subtext is as expected
        assertEquals("Shipping address", checkoutPage.getCheckoutPageShippingSectionSubtext(), "The checkout page shipping address section subtext doesn't match expectations.");
        //assert checkout page shipping address ship to multiple addresses link text is as expected
        assertEquals("Shipping", checkoutPage.getCheckoutPageShippingSectionShipMultipleAddressesLinkText(), "The checkout page shipping address section  ship to multiple addresses link text doesn't match expectations.");
        //input form
        //assert checkout page shipping address section country subtext is as expected
        assertEquals("Country", checkoutPage.getCheckoutPageShippingCountrySubtext(), "The checkout page shipping address section country subtext doesn't match expectations.");
        //assert checkout page shipping address section first name subtext is as expected
        assertEquals("First Name", checkoutPage.getCheckoutPageShippingFirstNameSubtext(), "The checkout page shipping address section first name subtext doesn't match expectations.");
        //assert checkout page shipping address section last name subtext is as expected
        assertEquals("Last Name", checkoutPage.getCheckoutPageShippingLastNameSubtext(), "The checkout page shipping address section last name subtext doesn't match expectations.");
        //assert checkout page shipping address subtext is as expected
        assertEquals("Address", checkoutPage.getCheckoutPageShippingAddressSubtext(), "The checkout page shipping address subtext doesn't match expectations.");
        //assert checkout page shipping address section apartment subtext is as expected
        assertEquals("Apartment/Suite/Building", checkoutPage.getCheckoutPageShippingApartmentSubtext(), "The checkout page shipping address section apartment subtext doesn't match expectations.");
        //assert checkout page shipping address section company subtext is as expected
        assertEquals("Company Name", checkoutPage.getCheckoutPageShippingCompanySubtext(), "The checkout page shipping address section company subtext doesn't match expectations.");
        //assert checkout page shipping address section city subtext is as expected
        assertEquals("City", checkoutPage.getCheckoutPageShippingCitySubtext(), "The checkout page shipping address section city subtext doesn't match expectations.");
        //assert checkout page shipping address section state subtext is as expected
        assertEquals("State/Province", checkoutPage.getCheckoutPageShippingStateSubtext(), "The checkout page shipping address section state subtext doesn't match expectations.");
        //assert checkout page shipping address section post code subtext is as expected
        assertEquals("Postal Code", checkoutPage.getCheckoutPageShippingPostCodeSubtext(), "The checkout page shipping address section post code subtext doesn't match expectations.");
        //assert checkout page shipping address section phone subtext is as expected
        assertEquals("Phone Number", checkoutPage.getCheckoutPageShippingPhoneSubtext(), "The checkout page shipping address section phone subtext doesn't match expectations.");
        //assert checkout page shipping address section shipping and billing address are same subtext is as expected
        assertEquals("My billing address is the same as my shipping address.", checkoutPage.getCheckoutPageShippingAndBillAddressSameSubtext(), "The checkout page shipping address section shipping and billing address are same subtext doesn't match expectations.");
        //assert checkout page shipping address section order comments subtext is as expected
        assertEquals("Order Comments", checkoutPage.getCheckoutPageShippingOrderCommentsSubtext(), "The checkout page shipping address section order comments subtext doesn't match expectations.");
    }

    //checkout page shipping method section text element assert test method (appears only after shipping address input)
    protected void isCheckoutPageShippingMethodSectionTextElementAsExpected(CheckoutPage checkoutPage) {
        //assert checkout page shipping method section subtitle is as expected
        assertEquals("Shipping Method", checkoutPage.getCheckoutPageShippingMethodSubtitle(), "The checkout page shipping method section subtitle doesn't match expectations.");
        //assert checkout page shipping method section subtext is as expected
        assertEquals("Flat Rate", checkoutPage.getCheckoutPageShippingMethodSubtext(), "The checkout page shipping method section subtext doesn't match expectations.");
    }

    //checkout page billing address section text element assert test method
    protected void isCheckoutPageBillingAddressSectionTextElementAsExpected(CheckoutPage checkoutPage) {
        //assert checkout page billing address section title is as expected
        assertEquals("Billing", checkoutPage.getCheckoutPageBillingSectionTitle(), "The checkout page billing address section title doesn't match expectations.");
        //assert checkout page billing address section subtext is as expected
        assertEquals("Billing Address", checkoutPage.getCheckoutPageBillingSectionSubtext(), "The checkout page billing address section subtext doesn't match expectations.");
        //input form
        //assert checkout page billing address section country subtext is as expected
        assertEquals("Country", checkoutPage.getCheckoutPageBillingCountrySubtext(), "The checkout page billing address section country subtext doesn't match expectations.");
        //assert checkout page billing address section first name subtext is as expected
        assertEquals("First Name", checkoutPage.getCheckoutPageBillingFirstNameSubtext(), "The checkout page billing address section first name subtext doesn't match expectations.");
        //assert checkout page billing address section last name subtext is as expected
        assertEquals("Last Name", checkoutPage.getCheckoutPageBillingLastNameSubtext(), "The checkout page billing address section last name subtext doesn't match expectations.");
        //assert checkout page billing address subtext is as expected
        assertEquals("Address", checkoutPage.getCheckoutPageBillingAddressSubtext(), "The checkout page billing address subtext doesn't match expectations.");
        //assert checkout page billing address section apartment subtext is as expected
        assertEquals("Apartment/Suite/Building", checkoutPage.getCheckoutPageBillingApartmentSubtext(), "The checkout page billing address section apartment subtext doesn't match expectations.");
        //assert checkout page billing address section company subtext is as expected
        assertEquals("Company Name", checkoutPage.getCheckoutPageBillingCompanySubtext(), "The checkout page billing address section company subtext doesn't match expectations.");
        //assert checkout page billing address section city subtext is as expected
        assertEquals("City", checkoutPage.getCheckoutPageBillingCitySubtext(), "The checkout page billing address section city subtext doesn't match expectations.");
        //assert checkout page billing address section state subtext is as expected
        assertEquals("State/Province", checkoutPage.getCheckoutPageBillingStateSubtext(), "The checkout page billing address section state subtext doesn't match expectations.");
        //assert checkout page billing address section post code subtext is as expected
        assertEquals("Postal Code", checkoutPage.getCheckoutPageBillingPostCodeSubtext(), "The checkout page billing address section post code subtext doesn't match expectations.");
        //assert checkout page billing address section phone subtext is as expected
        assertEquals("Phone Number", checkoutPage.getCheckoutPageBillingPhoneSubtext(), "The checkout page billing address section phone subtext doesn't match expectations.");
    }

    //checkout page payment method text element assert test method
    protected void isCheckoutPagePaymentMethodSectionTextElementAsExpected(CheckoutPage checkoutPage) {
        //assert checkout page payment method section title is as expected
        assertEquals("Payment", checkoutPage.getCheckoutPagePaymentSectionTitle(), "The checkout page payment method section title doesn't match expectations.");
        //input form
        //assert checkout page payment method section test gateway subtext is as expected
        assertEquals("Test Gateway", checkoutPage.getCheckoutPagePaymentSectionTestGatewaySubtext(), "The checkout page payment method section test gateway subtext doesn't match expectations.");
        //assert checkout page payment method section credit card number subtext is as expected
        assertEquals("Credit Card Number", checkoutPage.getCheckoutPagePaymentCreditCardNumberSubtext(), "The checkout page payment method section credit card number subtext doesn't match expectations.");
        //assert checkout page payment method section credit card expiration date subtext is as expected
        assertEquals("Expiration", checkoutPage.getCheckoutPagePaymentCreditCardExpDateSubtext(), "The checkout page payment method section credit card expiration date subtext doesn't match expectations.");
        //assert checkout page payment method section credit card name subtext is as expected
        assertEquals("Name on Card", checkoutPage.getCheckoutPagePaymentCreditCardNameSubtext(), "The checkout page payment method section credit card name subtext doesn't match expectations.");
        //assert checkout page payment method section credit card CVV number subtext is as expected
        assertEquals("CVV", checkoutPage.getCheckoutPagePaymentCVVNumberSubtext(), "The checkout page payment method section credit card CVV number subtext doesn't match expectations.");
    }

    //checkout page order summary section text element assert test method
    protected void isCheckoutPageOrderSummarySectionTextElementAsExpected(CheckoutPage checkoutPage) {
        //assert checkout page order summary section title is as expected
        assertEquals("Order Summary", checkoutPage.getCheckoutPageOrderSummarySectionTitle(), "The checkout page order summary section title doesn't match expectations.");
        //assert checkout page order summary section edit cart link is as expected
        assertEquals("Edit Cart", checkoutPage.getCheckoutPageOrderSummaryEditCartLinkText(), "The checkout page order summary section edit cart link doesn't match expectations.");
        //assert checkout page order summary subtotal subtext is as expected
        assertEquals("Subtotal", checkoutPage.getCheckoutPageOrderSummarySubtotalPriceSubtext(), "The checkout page order summary subtotal price subtext doesn't match expectations.");
        //assert checkout page order summary shipping price subtext is as expected
        assertEquals("Shipping", checkoutPage.getCheckoutPageOrderSummaryShippingPriceSubtext(), "The checkout page order summary shipping price subtext doesn't match expectations.");
        //assert checkout page order summary tax subtext is as expected
        assertEquals("Tax", checkoutPage.getCheckoutPageOrderSummaryTaxSubtext(), "The checkout page order summary tax subtext doesn't match expectations.");
        //assert checkout page order summary coupon link text is as expected
        assertEquals("Coupon/Gift Certificate", checkoutPage.getCheckoutPageOrderSummaryCouponLinkText(), "The checkout page order summary coupon link text doesn't match expectations.");
        //assert checkout page order summary total price subtext is as expected
        assertEquals("Total (CAD)", checkoutPage.getCheckoutPageOrderSummaryTotalPriceSubtext(), "The checkout page order summary total price subtext doesn't match expectations.");
    }

    //checkout page order confirmation section text element assert test method
    protected void isCheckoutPageConfirmationSectionTextElementAsExpected(CheckoutPage checkoutPage) {
        //assert checkout page checkout confirmation section success message title is as expected
        assertEquals("Thank you!", checkoutPage.getCheckoutConfirmationMessageTitle(), "The checkout page checkout confirmation section success message title doesn't match expectations.");
        //assert checkout page checkout confirmation section order number subtext is as expected
        assertEquals("Your order number is ", checkoutPage.getCheckoutConfirmationOrderNumberSubtext(), "The checkout page checkout confirmation section order number subtext doesn't match expectations.");
        //assert checkout page checkout confirmation section success message is as expected
        assertEquals("An email will be sent containing information about your purchase. If you have any questions about your purchase, email us at cory+bc@pixelunion.net or call us at (415) 555-5555.", checkoutPage.getCheckoutConfirmationMessage(), "The checkout page checkout confirmation section success message doesn't match expectations.");
    }

    //order invoice page text element assert test method
    protected void isOrderInvoicePageTextElementAsExpected(OrderInvoicePage orderInvoicePage){
        //assert order invoice page order contents section title is as expected
        assertEquals("Order Contents", orderInvoicePage.getOrderContentsSectionTitle(), "The order invoice page order contents section title doesn't match expectations.");
        //assert order invoice page order contents subtotal price subtext is as expected
        assertEquals("Subtotal:", orderInvoicePage.getOrderContentsSubtotalSubtext(), "The order invoice page order contents section subtotal price subtext doesn't match expectations.");
        //assert order invoice page order contents grand total price subtext is as expected (sometimes it can be "Shipping:")
        //assertEquals("Grand total:", orderInvoicePage.getOrderContentsGrandTotalSubtext(), "The order invoice page order contents section grand total price subtext doesn't match expectations.");
        //order details section
        //assert order invoice page order details section title is as expected
        assertEquals("Order Details", orderInvoicePage.getOrderContentsOrderDetailsSectionTitle(), "The order invoice page order details section title doesn't match expectations.");
        //assert order invoice page order status subtext is as expected
        assertEquals("Order status:", orderInvoicePage.getOrderContentsOrderStatusSubtext(), "The order invoice page order status subtext doesn't match expectations.");
        //assert order invoice page order date subtext is as expected
        assertEquals("Order date:", orderInvoicePage.getOrderContentsOrderDateSubtext(), "The order invoice page order date subtext doesn't match expectations.");
        //assert order invoice page order total subtext is as expected
        assertEquals("Order total:", orderInvoicePage.getOrderContentsOrderTotalSubtext(), "The order invoice page order total subtext doesn't match expectations.");
        //assert order invoice page payment method subtext is as expected
        assertEquals("Payment method:", orderInvoicePage.getOrderContentsPayMethodSubtext(), "The order invoice page payment methods subtext doesn't match expectations.");
        //shipping to address section
        //assert order invoice page shipping to address section title is as expected
        assertEquals("Ship To", orderInvoicePage.getOrderContentsShipToSectionTitle(), "The order invoice page shipping to address section title doesn't match expectations.");
        //billing to address section
        //assert order invoice page billing to address section title is as expected
        assertEquals("Bill To", orderInvoicePage.getOrderContentsBillToSectionTitle(), "The order invoice page billing to address section title doesn't match expectations.");
        //shipping to address section
        //assert order invoice page actions section title is as expected
        assertEquals("Actions", orderInvoicePage.getOrderContentsActionsSectionTitle(), "The order invoice page actions section title doesn't match expectations.");
    }

    //orders page text element assert test method (after order placement)
    protected void isOrdersPageAfterOrderTextElementsAsExpected(AccountDashboardPage accountDashboardPage) {
        //assert account dashboard page orders section orders placed subtexts are as expected (as a list)
        List<String> orderPlacedSubtexts = accountDashboardPage.getAccountDashboardPageOrdersPlacedSubtext();
        assertTrue(orderPlacedSubtexts.stream().allMatch("ORDER PLACED"::equals),
                "The account dashboard page orders section order placed subtexts don't match expectations.");
        //assert account dashboard page orders section orders last update subtexts are as expected (as a list)
        List<String> orderLastUpdateSubtexts = accountDashboardPage.getAccountDashboardPageOrdersLastUpdateSubtext();
        assertTrue(orderLastUpdateSubtexts.stream().allMatch("LAST UPDATE"::equals),
                "The account dashboard page orders section order last update subtexts don't match expectations.");
        //assert account dashboard page orders section awaiting fulfillment tags are as expected (as a list)
        List<String> orderAwaitFulfillTags = accountDashboardPage.getAccountDashboardPageOrdersAwaitFulfillTag();
        assertTrue(orderAwaitFulfillTags.stream().allMatch("AWAITING FULFILLMENT"::equals),
                "The account dashboard page orders section awaiting fulfillment tags don't match expectations.");

    }

    //add review modal page text element assert test method
    protected void isAddReviewModalPageTextElementAsExpected(AddReviewModalPage addReviewModalPage) {
        //assert add review modal page title is as expected
        assertEquals("Write a Review", addReviewModalPage.getAddReviewPageModalTitle(), "The add review modal page title doesn't match expectations.");
        //assert add review modal page rating subtext is as expected
        assertEquals("Rating", addReviewModalPage.getAddReviewPageModalRatingSubtext(), "The add review modal page rating subtext doesn't match expectations.");
        //assert add review modal page name subtext is as expected
        assertEquals("Rating", addReviewModalPage.getAddReviewPageModalNameSubtext(), "The add review modal page name subtext doesn't match expectations.");
        //assert add review modal page email subtext is as expected
        assertEquals("Rating", addReviewModalPage.getAddReviewPageModalEmailSubtext(), "The add review modal page email subtext doesn't match expectations.");
        //assert add review modal page review subject subtext is as expected
        assertEquals("Rating", addReviewModalPage.getAddReviewPageModalReviewSubjectSubtext(), "The add review modal page review subject subtext doesn't match expectations.");
        //assert add review modal page comments subtext is as expected
        assertEquals("Rating", addReviewModalPage.getAddReviewPageModalCommentsSubtext(), "The add review modal page comments subtext doesn't match expectations.");
        //list elements
        //assert register page required tags and their count are as expected
        List<String> expected = Collections.nCopies(5, "REQUIRED"); //assert the tag count and content is as expected (since it's an array of tags)
        assertEquals(expected, addReviewModalPage.getAddReviewPageModalRequiredTag(), "The add review modal page required tags don't match expectations.");
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //home page product data logger method
    protected void logHomePageProductData(HomePage homePage) {
        System.out.println("Home page displayed product data: " + "\n");

        logger.info("Home page most popular product category tag(s): " + homePage.getHomePageMostPopularCategoryTag());
        logger.info("Home page most popular product name(s): " + homePage.getHomePageMostPopularProductName());
        logger.info("Home page most popular product unit price(s): " + homePage.getHomePageMostPopularProductUnitPrice());

        logger.info("Home page new product category tag(s): " + homePage.getHomePageNewProductCategoryTag());
        logger.info("Home page new product name(s): " + homePage.getHomePageNewProductName());
        logger.info("Home page new product unit price(s): " + homePage.getHomePageNewProductUnitPrice());

        System.out.println("\n");
    }

    //address dashboard page orders section (page) data logger method
    protected void logAccountDashboardOrdersDisplayedData(AccountDashboardPage accountDashboardPage) {
        System.out.println("Address dashboard page orders displayed data: " + "\n");

        logger.info("Displayed order number(s): " + accountDashboardPage.getAccountDashboardPageOrderNumber());
        logger.info("Displayed order product count and total cost: " + accountDashboardPage.getAccountDashboardPageOrderProductCountTotalCost());
        logger.info("Displayed order placed date(s): " + accountDashboardPage.getAccountDashboardPageOrderPlacedDate());
        logger.info("Displayed order last update date(s): " + accountDashboardPage.getAccountDashboardPageOrderLastUpdateDate());

        System.out.println("\n");
    }

    //address dashboard page data logger method
    protected void logAddressDashboardPageData(AddressDashboardPage addressDashboardPage) {
        System.out.println("Address dashboard page displayed address data: " + "\n");

        logger.info("Displayed address username(s): " + addressDashboardPage.getAccountAddressUserName());
        logger.info("Displayed address details: " + addressDashboardPage.getAccountAddressDetails());
        logger.info("Displayed address phone(s): " + addressDashboardPage.getAccountAddressPhone());

        System.out.println("\n");
    }

    //single product page data logger method
    protected void logSingleProductPageData(SingleProductPage singleProductPage) {
        System.out.println("Single product page displayed product data: " + "\n");

        logger.info("Single product page product name: " + singleProductPage.getSingleProductPageTitle());
        logger.info("Single product page product brand: " + singleProductPage.getSingleProductPageProductBrandLinkText());
        logger.info("Single product page product unit price: " + singleProductPage.getSingleProductPageProductUnitPrice());
        logger.info("Single product page product weight: " + singleProductPage.getSingleProductPageProductWeight());
        logger.info("Single product page product gift wrapping option: " + singleProductPage.getSingleProductPageProductGiftWrappingOptionText());
        logger.info("Single product page product shipping option: " + singleProductPage.getSingleProductPageProductShippingOption());
        logger.info("Single product page product description: " + singleProductPage.getSingleProductPageProductDescription());

        System.out.println("\n");

    }

    //shopping cart modal data logger method
    protected void logShoppingCartModalProductData(SingleProductPage singleProductPage) {

        System.out.println("Shopping cart modal product displayed product data: " + "\n");

        logger.info("Displayed shopping cart modal order subtotal price: " + singleProductPage.getShoppingCartModalOrderSubtotalPrice());
        logger.info("Displayed shopping cart modal product count: " + singleProductPage.getShoppingCartModalProductCount());
        logger.info("Displayed shopping cart modal product name: " + singleProductPage.getShoppingCartModalProductName());
        logger.info("Displayed shopping cart modal product brand: " + singleProductPage.getShoppingCartModalProductBrand());
        logger.info("Displayed shopping cart modal product unit price and count: " + singleProductPage.getShoppingCartModalProductUnitPriceAndCount());

        System.out.println("\n");

    }

    //single category dashboard page subtext logger method
    protected void logSingleCategoryDashboardPageSubtext(SingleCategoryDashboardPage singleCategoryDashboardPage) {

        System.out.println("Single category dashboard page subtext displayed product data: " + "\n");

        logger.info("Displayed single category dashboard page brand subtext(s): " + singleCategoryDashboardPage.getSingleCategoryDashboardPageBrandSubtext());
        logger.info("Displayed single category dashboard page other (category) subtext(s): " + singleCategoryDashboardPage.getSingleCategoryDashboardPageOtherSubtext());

        System.out.println("\n");

    }

    //single category dashboard page product data logger method
    protected void logSingleCategoryDashboardPageProductData(SingleCategoryDashboardPage singleCategoryDashboardPage) {

        System.out.println("Single category dashboard page product displayed product data: " + "\n");

        logger.info("Single category dashboard page title: " + singleCategoryDashboardPage.getSingleCategoryDashboardPageTitle());
        logger.info("Single category dashboard page product brand(s): " + singleCategoryDashboardPage.getSingleCategoryDashboardPageProductBrand());
        logger.info("Single category dashboard page product name(s): " + singleCategoryDashboardPage.getSingleCategoryDashboardPageProductName());
        logger.info("Single category dashboard page product MSRP unit price(s): " + singleCategoryDashboardPage.getSingleCategoryDashboardPageProductMSRPPrice());
        logger.info("Single category dashboard page product unit price(s): " + singleCategoryDashboardPage.getSingleCategoryDashboardPageProductUnitPrice());

        System.out.println("\n");

    }

    //add to compare list product data logger method
    protected void logAddToCompareListProductData(AddToCompareListPage addToCompareListPage) {

        System.out.println("Add to compare list page displayed product data: " + "\n");

        logger.info("Add to compare list page product title: " + addToCompareListPage.getAddToCompareListPageTitle());
        logger.info("Add to compare list page product brand(s): " + addToCompareListPage.getAddToCompareListPageProductBrand());
        logger.info("Add to compare list page product name(s): " + addToCompareListPage.getAddToCompareListPageProductName());
        logger.info("Add to compare list page product unit price(s): " + addToCompareListPage.getAddToCompareListPageProductUnitPrice());
        logger.info("Add to compare list page product description(s): " + addToCompareListPage.getAddToCompareListPageProductDescription());
        logger.info("Add to compare list page product rating(s): " + addToCompareListPage.getAddToCompareListPageProductRating());
        logger.info("Add to compare list page product availability(ies): " + addToCompareListPage.getAddToCompareListPageProductAvailability());
        logger.info("Add to compare list page product other details: " + addToCompareListPage.getAddToCompareListPageProductOtherDetails());

        System.out.println("\n");

    }

    //shopping cart page product data logger method
    protected void logShoppingCartPageProductData(ShoppingCartPage shoppingCartPage) {

        System.out.println("Shopping cart displayed product data: " + "\n");

        logger.info("Displayed shopping cart product brand(s): " + shoppingCartPage.getShoppingCartTableProductBrand());
        logger.info("Displayed shopping cart product name(s): " + shoppingCartPage.getShoppingCartTableProductName());
        logger.info("Displayed shopping cart product price(s): " + shoppingCartPage.getShoppingCartTableProductPrice());
        logger.info("Displayed shopping cart product quantity(ies): " + shoppingCartPage.getShoppingCartTableProductQty());
        logger.info("Displayed shopping cart product total prices): " + shoppingCartPage.getShoppingCartTableProductTotalPrice());
        logger.info("Displayed shopping cart summary subtotal price: " + shoppingCartPage.getShoppingCartSummaryTableSubtotalPrice());
        logger.info("Displayed shopping cart summary grand total price: " + shoppingCartPage.getShoppingCartSummaryTableGrandTotalPrice());

        System.out.println("\n");

    }

    //checkout page order summary product data logger method
    protected void logCheckoutPageOrderSummaryProductData(CheckoutPage checkoutPage) {

        System.out.println("Checkout page order summary displayed product data: " + "\n");

        logger.info("Displayed order summary product count: " + checkoutPage.getCheckoutPageOrderSummaryProductCount());
        logger.info("Displayed order summary product count and name(s): " + checkoutPage.getCheckoutPageOrderSummaryProductCountAndName());
        logger.info("Displayed order summary product unit price(s): " + checkoutPage.getCheckoutPageOrderSummaryProductUnitPrice());
        logger.info("Displayed order summary product subtotal price: " + checkoutPage.getCheckoutPageOrderSummarySubtotalPrice());
        logger.info("Displayed order summary product shipping price: " + checkoutPage.getCheckoutPageOrderSummaryShippingPrice());
        logger.info("Displayed order summary product tax amount: " + checkoutPage.getCheckoutPageOrderSummaryTaxAmount());
        logger.info("Displayed order summary product total price: " + checkoutPage.getCheckoutPageOrderSummaryTotalPrice());

        System.out.println("\n");

    }

    //order invoice page order data logger method
    protected void logOrderInvoicePageOrderData(OrderInvoicePage orderInvoicePage){

        System.out.println("Displayed order invoice page confirmed order data: " + "\n");

        logger.info("Displayed order number: " + orderInvoicePage.getOrderNumber());
        logger.info("Displayed order items shipped: " + orderInvoicePage.getOrderContentsItemShippedSubtext());
        logger.info("Displayed order items name and count: " + orderInvoicePage.getOrderContentsItemNameCount());
        logger.info("Displayed order items unit price: " + orderInvoicePage.getOrderContentsItemUnitPriceCount());
        logger.info("Displayed order status: " + orderInvoicePage.getOrderStatus());
        logger.info("Displayed order date: " + orderInvoicePage.getOrderDate());
        logger.info("Displayed order total price: " + orderInvoicePage.getOrderTotal());
        logger.info("Displayed order payment method: " + orderInvoicePage.getOrderPaymentMethod());
        logger.info("Displayed order shipping address full name: " + orderInvoicePage.getOrderShippingName());
        logger.info("Displayed order shipping address: " + orderInvoicePage.getOrderShippingAddress());
        logger.info("Displayed order shipping address line two: " + orderInvoicePage.getOrderShippingAddressTwo());
        logger.info("Displayed order shipping country: " + orderInvoicePage.getOrderShippingCountry());
        logger.info("Displayed order billing address full name: " + orderInvoicePage.getOrderBillingName());
        logger.info("Displayed order billing address: " + orderInvoicePage.getOrderBillingAddress());
        logger.info("Displayed order billing address line two: " + orderInvoicePage.getOrderBillingAddressTwo());
        logger.info("Displayed order billing country: " + orderInvoicePage.getOrderBillingCountry());

        System.out.println("\n");

    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //test result screenshot method
    public void captureScreenshot(WebDriver driver, String fileName) {
        try {
            Thread.sleep(1500);//apply wait time for the right time to get the screenshot (WebDriverWait doesn't work here)
            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            File destination = new File("E:\\IntelliAqua Selenium projects\\CornerstoneDemoStoreSelenium\\src\\test\\resources\\" + " " +  fileName + ".png");
            Files.copy(screenshot.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);
            logger.info("Screenshot saved at: " + destination.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


}
